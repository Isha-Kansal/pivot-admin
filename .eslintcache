[{"/Volumes/DATA/Isha Kansal/reactjs/pivot-admin/src/index.js":"1","/Volumes/DATA/Isha Kansal/reactjs/pivot-admin/src/App.js":"2","/Volumes/DATA/Isha Kansal/reactjs/pivot-admin/src/reportWebVitals.js":"3","/Volumes/DATA/Isha Kansal/pivot-admin/src/index.js":"4","/Volumes/DATA/Isha Kansal/pivot-admin/src/App.js":"5","/Volumes/DATA/Isha Kansal/pivot-admin/src/store/index.js":"6","/Volumes/DATA/Isha Kansal/pivot-admin/src/polyfill.js":"7","/Volumes/DATA/Isha Kansal/pivot-admin/src/serviceWorker.js":"8","/Volumes/DATA/Isha Kansal/pivot-admin/src/store/sagas/index.js":"9","/Volumes/DATA/Isha Kansal/pivot-admin/src/store/reducers/index.js":"10","/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/TheLayout.js":"11","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/login/Login.js":"12","/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/index.js":"13","/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/TheSidebar.js":"14","/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/TheHeaderDropdown.js":"15","/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/TheHeader.js":"16","/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/TheContent.js":"17","/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/_nav.js":"18","/Volumes/DATA/Isha Kansal/pivot-admin/src/routes.js":"19","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/resources/Resources.js":"20","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/Users.js":"21","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/experts/Experts.js":"22","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/User.js":"23","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/experts/AddExpert.js":"24","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/resources/AddResource.js":"25","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/store/sagas.js":"26","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/store/types.js":"27","/Volumes/DATA/Isha Kansal/pivot-admin/src/common/axios.js":"28","/Volumes/DATA/Isha Kansal/pivot-admin/src/config.js":"29","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/store/reducer.js":"30","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/store/action.js":"31","/Volumes/DATA/Isha Kansal/pivot-admin/src/loader/index.js":"32","/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/icons.js":"33","/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/logo.js":"34","/Volumes/DATA/Isha Kansal/pivot-admin/src/assets/icons/index.js":"35","/Volumes/DATA/Isha Kansal/pivot-admin/src/common/commonModal.js":"36","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/resources/Resource.js":"37","/Volumes/DATA/Isha Kansal/pivot-admin/src/common/stringFunction.js":"38","/Volumes/DATA/Isha Kansal/pivot-admin/src/common/toolTip.js":"39","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/experts/Expert.js":"40","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/experts/ExpertsFieldsData.js":"41","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/resources/ResourcesFieldsData.js":"42","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/UserPlanner.js":"43","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/planner/Network.js":"44","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/planner/Explore.js":"45","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/planner/Learn.js":"46","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/planner/Apply.js":"47","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/planner/Prepare.js":"48","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/planner/Planner.js":"49"},{"size":500,"mtime":1612329326000,"results":"50","hashOfConfig":"51"},{"size":195,"mtime":1612330254000,"results":"52","hashOfConfig":"51"},{"size":362,"mtime":1612329326000,"results":"53","hashOfConfig":"51"},{"size":933,"mtime":1612777214000,"results":"54","hashOfConfig":"55"},{"size":2079,"mtime":1613978982000,"results":"56","hashOfConfig":"55"},{"size":774,"mtime":1614073379000,"results":"57","hashOfConfig":"55"},{"size":1895,"mtime":1612498790000,"results":"58","hashOfConfig":"55"},{"size":4686,"mtime":1612498790000,"results":"59","hashOfConfig":"55"},{"size":179,"mtime":1612762089000,"results":"60","hashOfConfig":"55"},{"size":186,"mtime":1612844550000,"results":"61","hashOfConfig":"55"},{"size":837,"mtime":1614150810000,"results":"62","hashOfConfig":"55"},{"size":5940,"mtime":1613734933000,"results":"63","hashOfConfig":"55"},{"size":284,"mtime":1614150798000,"results":"64","hashOfConfig":"55"},{"size":1109,"mtime":1614161219000,"results":"65","hashOfConfig":"55"},{"size":419,"mtime":1613735310000,"results":"66","hashOfConfig":"55"},{"size":1169,"mtime":1614161219000,"results":"67","hashOfConfig":"55"},{"size":1164,"mtime":1612770427000,"results":"68","hashOfConfig":"55"},{"size":668,"mtime":1614316162000,"results":"69","hashOfConfig":"55"},{"size":1693,"mtime":1614315872000,"results":"70","hashOfConfig":"55"},{"size":8075,"mtime":1614324118000,"results":"71","hashOfConfig":"55"},{"size":8724,"mtime":1614323301000,"results":"72","hashOfConfig":"55"},{"size":10886,"mtime":1614324799000,"results":"73","hashOfConfig":"55"},{"size":8635,"mtime":1614324675000,"results":"74","hashOfConfig":"55"},{"size":32984,"mtime":1614324847000,"results":"75","hashOfConfig":"55"},{"size":29002,"mtime":1614324250000,"results":"76","hashOfConfig":"55"},{"size":9437,"mtime":1614054509000,"results":"77","hashOfConfig":"55"},{"size":2893,"mtime":1614054045000,"results":"78","hashOfConfig":"55"},{"size":1355,"mtime":1614061702000,"results":"79","hashOfConfig":"55"},{"size":173,"mtime":1614322910000,"results":"80","hashOfConfig":"55"},{"size":6445,"mtime":1614054296000,"results":"81","hashOfConfig":"55"},{"size":2752,"mtime":1614054121000,"results":"82","hashOfConfig":"55"},{"size":340,"mtime":1613103961000,"results":"83","hashOfConfig":"55"},{"size":7216,"mtime":1614315013000,"results":"84","hashOfConfig":"55"},{"size":9997,"mtime":1612769714000,"results":"85","hashOfConfig":"55"},{"size":3924,"mtime":1612782108000,"results":"86","hashOfConfig":"55"},{"size":1918,"mtime":1614227912000,"results":"87","hashOfConfig":"55"},{"size":5561,"mtime":1614324135000,"results":"88","hashOfConfig":"55"},{"size":124,"mtime":1613034251000,"results":"89","hashOfConfig":"55"},{"size":424,"mtime":1613107911000,"results":"90","hashOfConfig":"55"},{"size":10045,"mtime":1614324796000,"results":"91","hashOfConfig":"55"},{"size":13185,"mtime":1613977399000,"results":"92","hashOfConfig":"55"},{"size":1485,"mtime":1613651299000,"results":"93","hashOfConfig":"55"},{"size":1846,"mtime":1614321330000,"results":"94","hashOfConfig":"55"},{"size":6940,"mtime":1614317793000,"results":"95","hashOfConfig":"55"},{"size":8069,"mtime":1614318218000,"results":"96","hashOfConfig":"55"},{"size":5187,"mtime":1614317871000,"results":"97","hashOfConfig":"55"},{"size":2327,"mtime":1614317871000,"results":"98","hashOfConfig":"55"},{"size":3985,"mtime":1614317871000,"results":"99","hashOfConfig":"55"},{"size":706,"mtime":1614315262000,"results":"100","hashOfConfig":"55"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"161ocxv",{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},"z7vibx",{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"109"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"109"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"109"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"147","messages":"148","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"109"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"152","messages":"153","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"109"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"109"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"109"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"109"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"109"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"109"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"109"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"109"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"109"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},"/Volumes/DATA/Isha Kansal/reactjs/pivot-admin/src/index.js",[],"/Volumes/DATA/Isha Kansal/reactjs/pivot-admin/src/App.js",[],"/Volumes/DATA/Isha Kansal/reactjs/pivot-admin/src/reportWebVitals.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/index.js",[],["215","216"],"/Volumes/DATA/Isha Kansal/pivot-admin/src/App.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/store/index.js",["217"],"import { applyMiddleware, createStore, compose } from \"redux\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport createSagaMiddleware from \"redux-saga\";\n\nimport { rootReducer } from \"./reducers/index\";\nimport rootSaga from \"./sagas/index\";\nimport logger from \"redux-logger\";\n\nconst persistConfig = {\n  debug: false,\n  key: \"root\",\n  keyPrefix: \"v.1\",\n  storage,\n};\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nexport const store = createStore(\n  persistedReducer,\n  compose(applyMiddleware(sagaMiddleware, logger))\n);\nexport const persistor = persistStore(store);\n\nsagaMiddleware.run(rootSaga);\nexport default { store, persistor };\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/polyfill.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/serviceWorker.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/store/sagas/index.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/store/reducers/index.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/TheLayout.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/views/login/Login.js",["218"],"import React, { Component } from \"react\";\n\nimport { NotificationManager } from \"react-notifications\";\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardGroup,\n  CCol,\n  CContainer,\n  CForm,\n  CInput,\n  CInputGroup,\n  CInputGroupPrepend,\n  CInputGroupText,\n  CRow,\n} from \"@coreui/react\";\nimport Loader from \"../../loader\";\nimport { FormText } from \"reactstrap\";\nimport CIcon from \"@coreui/icons-react\";\nimport { loginByAdmin } from \"../store/action\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { withRouter } from \"react-router-dom\";\nclass Login extends Component {\n  constructor(props) {\n    super();\n    this.state = {\n      name: \"\",\n      password: \"\",\n      errorText: \"\",\n      errorType: \"\",\n\n      loading: false,\n    };\n  }\n  handleChange = (e, type) => {\n    e.preventDefault();\n    this.setState({\n      [type]: e.target.value,\n      errorText: \"\",\n      errorType: \"\",\n    });\n  };\n  onHandleSubmit = (e) => {\n    e && e.preventDefault();\n\n    const { name, password } = this.state;\n    if (name === \"\") {\n      this.setState({ errorText: \"Name can not be empty\", errorType: \"name\" });\n    } else if (password === \"\") {\n      this.setState({\n        errorText: \"Password can not be empty\",\n        errorType: \"password\",\n      });\n    } else this.authenticateAdmin();\n  };\n  authenticateAdmin = () => {\n    const { name, password } = this.state;\n    this.setState({\n      loading: true,\n    });\n    let formData = {\n      email: name,\n      password: password,\n    };\n\n    this.props.loginByAdmin(\"user/login\", formData, (value) => {\n      this.setState({\n        loading: false,\n      });\n\n      if (value.status === 200) {\n        localStorage.setItem(\"auth_token\", value.data.user.auth_token);\n        NotificationManager.success(\"Login Successfully\", \"\", 1000);\n\n        localStorage.setItem(\"isLoggedIn\", true);\n\n        this.props.history.push(\"/users\");\n      } else {\n        NotificationManager.error(\"Please enter valid credentials\", \"\", 1000);\n        this.setState({\n          name: \"\",\n          password: \"\",\n        });\n      }\n    });\n  };\n  onKeyDown = (e) => {\n    if (e.key === \"Enter\") {\n      e.preventDefault();\n\n      this.onHandleSubmit();\n    }\n  };\n  render() {\n    const { errorText, errorType, loading, name, password } = this.state;\n\n    return (\n      <div className=\"c-app c-default-layout flex-row align-items-center\">\n        <CContainer>\n          <CRow className=\"justify-content-center\">\n            <CCol md=\"8\">\n              <CCardGroup className=\"position-relative\">\n                {loading && <Loader />}\n\n                <CCard className=\"p-4\">\n                  <CCardBody>\n                    <CForm onKeyDown={(e) => this.onKeyDown(e)}>\n                      <h1>Login</h1>\n                      <p className=\"text-muted\">Sign In to your account</p>\n                      <div className=\"mb-3\">\n                        <CInputGroup>\n                          <CInputGroupPrepend>\n                            <CInputGroupText>\n                              <CIcon name=\"cil-user\" />\n                            </CInputGroupText>\n                          </CInputGroupPrepend>\n                          <CInput\n                            type=\"text\"\n                            placeholder=\"Username\"\n                            autoComplete=\"username\"\n                            onChange={(e) => this.handleChange(e, \"name\")}\n                            value={name}\n                          />\n                        </CInputGroup>\n                        <p className=\"mb-0\">\n                          {errorType === \"name\" && (\n                            <FormText color=\"danger\" className=\"error\">\n                              {errorText}\n                            </FormText>\n                          )}\n                        </p>\n                      </div>\n                      <div className=\"mb-4\">\n                        <CInputGroup>\n                          <CInputGroupPrepend>\n                            <CInputGroupText>\n                              <CIcon name=\"cil-lock-locked\" />\n                            </CInputGroupText>\n                          </CInputGroupPrepend>\n                          <CInput\n                            type=\"password\"\n                            placeholder=\"Password\"\n                            autoComplete=\"current-password\"\n                            onChange={(e) => this.handleChange(e, \"password\")}\n                            value={password}\n                          />\n                        </CInputGroup>\n                        <p className=\"mb-0\">\n                          {\" \"}\n                          {errorType === \"password\" && (\n                            <FormText color=\"danger\" className=\"error\">\n                              {errorText}\n                            </FormText>\n                          )}\n                        </p>\n                      </div>\n\n                      <CRow>\n                        <CCol xs=\"6\">\n                          <CButton\n                            color=\"primary\"\n                            className=\"px-4\"\n                            onClick={this.onHandleSubmit}\n                            disabled={loading}\n                            className=\"login-btn\"\n                          >\n                            Login\n                          </CButton>\n                        </CCol>\n                        {/* <CCol xs=\"6\" className=\"text-right\">\n                          <CButton color=\"link\" className=\"px-0\">\n                            Forgot password?\n                          </CButton>\n                        </CCol> */}\n                      </CRow>\n                    </CForm>\n                  </CCardBody>\n                </CCard>\n              </CCardGroup>\n            </CCol>\n          </CRow>\n        </CContainer>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {};\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return bindActionCreators(\n    {\n      loginByAdmin,\n    },\n    dispatch\n  );\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Login));\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/index.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/TheSidebar.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/TheHeaderDropdown.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/TheHeader.js",["219"],"import React, { useState } from \"react\";\n\nimport { withRouter } from \"react-router-dom\";\nimport {\n  CHeader,\n  CHeaderNav,\n  CSubheader,\n  CBreadcrumbRouter,\n  CToggler,\n} from \"@coreui/react\";\n\nimport routes from \"../routes\";\nimport { TheHeaderDropdown, TheSidebar } from \"./index\";\n\nconst TheHeader = (props) => {\n  const toggleSidebar = () => {\n    props.toggleSideBar();\n  };\n  const toggleSidebarMobile = () => {\n    console.log(\"toggleSidebarMobile\");\n    props.toggleSideBar();\n  };\n  return (\n    <CHeader withSubheader>\n      <CToggler\n        inHeader\n        className=\"ml-md-3 d-lg-none\"\n        onClick={toggleSidebarMobile}\n      />\n      <CToggler\n        inHeader\n        className=\"ml-3 d-md-down-none\"\n        onClick={toggleSidebar}\n      />\n      <CHeaderNav className=\"d-md-down-none mr-auto\"></CHeaderNav>\n\n      <CHeaderNav className=\"px-3\">\n        <TheHeaderDropdown history={props.history} />\n        <TheSidebar sidebarOpen={props.sidebarOpen} />\n      </CHeaderNav>\n      <CSubheader className=\"px-3 justify-content-between\">\n        <CBreadcrumbRouter\n          className=\"border-0 c-subheader-nav m-0 px-0 px-md-3\"\n          routes={routes}\n        />\n      </CSubheader>\n    </CHeader>\n  );\n};\n\nexport default withRouter(TheHeader);\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/TheContent.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/_nav.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/routes.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/views/resources/Resources.js",["220","221","222"],"/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/Users.js",["223"],"/Volumes/DATA/Isha Kansal/pivot-admin/src/views/experts/Experts.js",["224","225","226","227","228"],"import React, { useState, useEffect } from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { withRouter } from \"react-router-dom\";\n\nimport Pagination from \"react-js-pagination\";\nimport moment from \"moment-timezone\";\nimport { CCard, CCardBody, CCol, CRow, CButton } from \"@coreui/react\";\n\nimport { fetchExperts, deleteExpert, userStatus } from \"../store/action\";\nimport { connect } from \"react-redux\";\nimport { NotificationManager } from \"react-notifications\";\nimport { bindActionCreators } from \"redux\";\nimport Loader from \"../../loader\";\nimport CommonModal from \"../../common/commonModal\";\nimport Tooltip from \"../../common/toolTip\";\nimport EDIT from \"../../assets/icons/edit.svg\";\nimport DELETE from \"../../assets/icons/delete.svg\";\n\nimport ACTIVATE from \"../../assets/icons/activate.svg\";\nimport DEACTIVATE from \"../../assets/icons/deactivate.svg\";\nimport { Table } from \"reactstrap\";\nconst Experts = (props) => {\n  const offsetLimit = 10;\n  const history = useHistory();\n  const queryPage = useLocation().search.match(/page=([0-9]+)/, \"\");\n  const currentPage = Number(queryPage && queryPage[1] ? queryPage[1] : 1);\n  const [page, setPage] = useState(currentPage);\n  const [search, setSearch] = useState(\"\");\n  const [idExpert, setIdExpert] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [expertsDetails, setExpertsDetails] = useState([]);\n  const [modalOpen, setModalOpen] = useState(false);\n  const [count, setCount] = useState(0);\n  const [type, setType] = useState(\"\");\n  const pageChange = (newPage) => {\n    currentPage !== newPage && history.push(`/experts?page=${newPage}`);\n    let limit = 10;\n    setLoading(true);\n    props.fetchExperts(\n      `expert/all?offset=${newPage}&limit=${limit}&search=${search}`,\n      (value) => {\n        setLoading(false);\n        setExpertsDetails(value.data.experts);\n        setCount(value.data.count);\n\n        setPage(newPage);\n      }\n    );\n  };\n  useEffect(() => {\n    currentPage !== page && setPage(currentPage);\n  }, [currentPage, page]);\n  const addExpert = () => {\n    props.history.push(\"/addExpert\");\n  };\n  const handleSearch = (e) => {\n    setSearch(e.target.value);\n    setPage(1);\n  };\n\n  const editExpert = (e, item) => {\n    setIdExpert(item.id);\n    e.preventDefault();\n    e.stopPropagation();\n    props.history.push(`/editExpert/${item._id}`);\n  };\n\n  const onDelete = (e, type, id) => {\n    setIdExpert(id);\n    setType(type);\n    e.preventDefault();\n    e.stopPropagation();\n    setModalOpen(!modalOpen);\n  };\n\n  const deleteExpert = (id) => {\n    if (type === \"deleteExpert\") {\n      if (idExpert === id) setModalOpen(false);\n      setLoading(true);\n      props.deleteExpert(`expert/delete/${id}`, (value) => {\n        if (value.status === 200) {\n          NotificationManager.success(\"Expert deleted successfully\", \"\", 1000);\n          setLoading(false);\n\n          callApiToFetchAllExperts();\n        }\n      });\n    } else {\n      if (idExpert === id) setModalOpen(false);\n      setLoading(true);\n      let obj = {\n        type: type,\n        id: id,\n        user_type: \"expert\",\n      };\n\n      props.userStatus(\"common/change-status\", obj, (value) => {\n        if (value.status === 200) {\n          NotificationManager.success(value.message, \"\", 1000);\n\n          callApiToFetchAllExperts();\n        }\n      });\n    }\n  };\n  useEffect(() => {\n    callApiToFetchAllExperts();\n  }, [search]);\n  const callApiToFetchAllExperts = () => {\n    setLoading(true);\n\n    let limit = 10;\n    props.fetchExperts(\n      `expert/all?offset=${page}&limit=${limit}&search=${search}`,\n      (value) => {\n        if (value.status === 200) {\n          setLoading(false);\n          setExpertsDetails(value.data.experts);\n          setCount(value.data.count);\n        }\n      }\n    );\n  };\n  const onBlock = (e, type, item) => {\n    setIdExpert(item._id);\n    setType(type);\n    e.preventDefault();\n    e.stopPropagation();\n    setModalOpen(!modalOpen);\n  };\n\n  return (\n    <CRow>\n      <CCol xl={12}>\n        <form className=\"position-relative\">\n          <div className=\"text-center search-input\">\n            <input\n              type=\"search\"\n              className=\"form-control\"\n              placeholder=\"Search\"\n              required\n              onChange={handleSearch}\n            />\n          </div>\n          <div className=\"text-right resource-btn\">\n            <CButton block color=\"info\" onClick={addExpert}>\n              Add Expert\n            </CButton>\n          </div>\n        </form>\n        <CCard>\n          {loading && <Loader />}\n          <CCardBody>\n            <Table responsive>\n              <thead>\n                <tr>\n                  <th className=\"text-nowrap \">Name</th>\n\n                  <th>Email</th>\n\n                  <th>Designation</th>\n\n                  <th>Country</th>\n                  <th>Role</th>\n                  <th>Created At</th>\n                  <th>Action</th>\n                </tr>\n              </thead>\n              <tbody>\n                {expertsDetails && expertsDetails.length === 0 && !loading && (\n                  <h3 className=\"text-center no-user-found\">\n                    No Experts Found!\n                  </h3>\n                )}\n                {expertsDetails &&\n                  expertsDetails.length > 0 &&\n                  expertsDetails.map((item, index) => {\n                    let istDate = new Date(item.createdAt);\n\n                    let createdAt = moment(istDate).format(\n                      \"DD-MM-YYYY, hh:mm a\"\n                    );\n                    return (\n                      <tr\n                        style={{ cursor: \"pointer\" }}\n                        onClick={() =>\n                          history.push({\n                            pathname: `/experts/${item._id}`,\n                          })\n                        }\n                      >\n                        <td>\n                          {\" \"}\n                          {item.first_name && item.last_name\n                            ? item.first_name + \" \" + item.last_name\n                            : \"-\"}\n                        </td>\n                        <td>{item.email ? item.email : \"-\"}</td>\n                        <td>{item.designation}</td>\n                        <td>{item.country}</td>\n                        <td>{item.role}</td>\n                        <td>\n                          {\" \"}\n                          {createdAt !== \"Invalid date\" ? createdAt : \"-\"}\n                        </td>\n                        <td>\n                          <div className=\"d-flex align-items-center\">\n                            <button\n                              id={`edit-${index}`}\n                              className=\"icon\"\n                              onClick={(e) => editExpert(e, item)}\n                            >\n                              <img src={EDIT} className=\"ml-3\" />\n                            </button>\n                            <Tooltip placement=\"top\" target={`edit-${index}`}>\n                              Edit\n                            </Tooltip>\n                            <button\n                              className=\"icon\"\n                              onClick={(e) =>\n                                onDelete(e, \"deleteExpert\", item._id)\n                              }\n                              id={`delete-${index}`}\n                            >\n                              <img src={DELETE} className=\"ml-3\" />\n                            </button>\n                            <Tooltip placement=\"top\" target={`delete-${index}`}>\n                              Delete\n                            </Tooltip>\n                            {item.expert_status !== \"deactivated\" && (\n                              <>\n                                <button\n                                  onClick={(e) =>\n                                    onBlock(e, \"deactivate\", item)\n                                  }\n                                  className=\"icon\"\n                                  id={`deactivate-${index}`}\n                                >\n                                  <img src={DEACTIVATE} className=\"ml-3\" />\n                                </button>\n                                <Tooltip\n                                  placement=\"top\"\n                                  target={`deactivate-${index}`}\n                                >\n                                  Deactivate\n                                </Tooltip>\n                              </>\n                            )}\n\n                            {item.expert_status === \"deactivated\" && (\n                              <>\n                                <button\n                                  onClick={(e) => onBlock(e, \"activate\", item)}\n                                  className=\"icon\"\n                                  id={`activate-${index}`}\n                                >\n                                  <img src={ACTIVATE} className=\"ml-3\" />\n                                </button>\n                                <Tooltip\n                                  placement=\"top\"\n                                  target={`activate-${index}`}\n                                >\n                                  Activate\n                                </Tooltip>\n                              </>\n                            )}\n                          </div>\n                        </td>\n                      </tr>\n                    );\n                  })}\n              </tbody>\n            </Table>\n\n            <div className=\"text-center pagination-input\">\n              {count > 10 && !loading && (\n                <Pagination\n                  className=\"mt-3 mx-auto w-fit-content\"\n                  itemClass=\"page-item\"\n                  linkClass=\"page-link\"\n                  activeClass=\"active\"\n                  activePage={page}\n                  itemsCountPerPage={offsetLimit}\n                  totalItemsCount={count}\n                  pageRangeDisplayed={5}\n                  onChange={pageChange}\n                />\n              )}\n            </div>\n            <div>\n              {modalOpen && (\n                <CommonModal\n                  isOpen={modalOpen}\n                  toggle={(e) => onDelete(e)}\n                  block_delete={(e) => deleteExpert(e, idExpert)}\n                  id={idExpert}\n                  type={type}\n                />\n              )}\n            </div>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {};\n};\nconst mapDispatchToProps = (dispatch) => {\n  return bindActionCreators(\n    {\n      fetchExperts,\n      deleteExpert,\n      userStatus,\n    },\n    dispatch\n  );\n};\nexport default withRouter(\n  connect(mapStateToProps, mapDispatchToProps)(Experts)\n);\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/User.js",["229","230","231"],"/Volumes/DATA/Isha Kansal/pivot-admin/src/views/experts/AddExpert.js",["232","233","234","235","236","237","238"],"import React, { Component } from \"react\";\n\nimport ADD from \"../../assets/icons/add.svg\";\nimport {\n  addExpert,\n  addImage,\n  fetchOneExpert,\n  editExpert,\n} from \"../store/action\";\nimport moment from \"moment-timezone\";\nimport { connect } from \"react-redux\";\nimport { NotificationManager } from \"react-notifications\";\nimport { bindActionCreators } from \"redux\";\nimport { withRouter } from \"react-router-dom\";\nimport BackArrow from \"../../assets/icons/left-arrow.svg\";\nimport Loader from \"../../loader\";\nimport CANCEL from \"../../assets/icons/cancel.svg\";\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardFooter,\n  CCardHeader,\n  CCol,\n  CForm,\n  CFormGroup,\n  CTextarea,\n  CInput,\n  CLabel,\n  CRow,\n} from \"@coreui/react\";\n\nimport Select from \"react-select\";\nimport CameraIcon from \"../../assets/icons/photo-camera.svg\";\nimport { Input } from \"reactstrap\";\nimport CIcon from \"@coreui/icons-react\";\nimport Avatar from \"../../assets/icons/avatar.png\";\nimport {\n  optionsFields,\n  optionsGender,\n  optionsCountry,\n  optionsExpertise,\n  optionsRole,\n  optionsIndustry,\n  optionsSkill,\n  optionsService,\n} from \"./ExpertsFieldsData\";\n\nclass AddExpert extends Component {\n  constructor(props) {\n    super();\n    this.state = {\n      first_name: \"\",\n      last_name: \"\",\n      email: \"\",\n      contact: \"\",\n      gender: \"\",\n      country: \"\",\n      designation: \"\",\n      expertise: [],\n      loadiing: false,\n      role: \"\",\n      industry: \"\",\n      fields: [],\n      about: [],\n      errorType: \"\",\n      errorText: \"\",\n      service: \"\",\n      rate: \"\",\n      expertImage: null,\n      selectedDate: new Date(),\n      linkedIn: \"\",\n      calendlyLink: \"\",\n    };\n  }\n  componentDidMount() {\n    const expert_id = this.props && this.props.match.params.id;\n\n    if (expert_id) {\n      this.setState({\n        loadiing: true,\n      });\n      this.props.fetchOneExpert(`expert/${expert_id}`, (value) => {\n        const {\n          first_name,\n          last_name,\n          gender,\n          country,\n          designation,\n          expert_fields,\n          current_role,\n          industry,\n          skills,\n          service,\n          email,\n          contact_no,\n          linkedIn,\n          calendly,\n          price,\n          info,\n        } = value.data.expert;\n        const infoData = info.map((el) => {\n          return { value: el };\n        });\n        this.setState({\n          loadiing: false,\n          first_name,\n          last_name,\n          gender,\n          country,\n          designation,\n          fields: expert_fields,\n          role: current_role,\n          industry,\n          email,\n          contact: contact_no,\n          service,\n          rate: price,\n          linkedIn,\n          about: infoData,\n          skill: skills && skills[0] && skills[0].label,\n          expertise: skills && skills[0] && skills[0].values,\n          calendlyLink: calendly,\n        });\n      });\n    }\n  }\n  uploadImage = (event) => {\n    this.clearError();\n    if (event.target.files && event.target.files[0]) {\n      var reader = new FileReader();\n      reader.onloadend = function () {\n        this.callApiAddImage((reader && reader.result) || \"\");\n        // props.setImage(reader.result);\n        this.setState({\n          expertImage: reader.result,\n        });\n      }.bind(this);\n      reader.readAsDataURL(event.target.files[0]);\n    }\n  };\n  errorShow = (type) => {\n    const { errorType, errorText } = this.state;\n    return errorType === type ? <p>{errorText}</p> : null;\n  };\n  clearError = () => {\n    this.setState({\n      errorType: \"\",\n      errorText: \"\",\n    });\n  };\n  inputHandler = (e) => {\n    this.clearError();\n    this.setState({ [e.target.name]: e.target.value });\n  };\n  handleChange = (data, type) => {\n    this.clearError();\n\n    if (type === \"fields\") {\n      let arr;\n      if (data.length <= 3) {\n        arr = data.map((el) => {\n          return el.value;\n        });\n        this.setState({\n          fields: arr,\n        });\n      } else {\n        NotificationManager.info(\"You can select upto 3 only\", \"\", 1000);\n      }\n    }\n    if (type === \"gender\") {\n      this.setState({\n        gender: data.value,\n      });\n    }\n    if (type === \"country\") {\n      this.setState({\n        country: data.value,\n      });\n    }\n    if (type === \"designation\") {\n      this.setState({\n        designation: data.value,\n      });\n    }\n    if (type === \"expertise\") {\n      let arr;\n      if (data.length <= 3) {\n        arr = data.map((el) => {\n          return el.value;\n        });\n        this.setState({\n          expertise: arr,\n        });\n      } else {\n        NotificationManager.info(\"You can select upto 3 only\", \"\", 1000);\n      }\n    }\n    if (type === \"role\") {\n      this.setState({\n        role: data.value,\n      });\n    }\n    if (type === \"industry\") {\n      this.setState({\n        industry: data.value,\n      });\n    }\n\n    if (type === \"service\") {\n      this.setState({\n        service: data.value,\n      });\n    }\n    if (type === \"skill\") {\n      this.setState({\n        skill: data.value,\n      });\n    }\n    if (type === \"rate\") {\n      this.setState({\n        rate: data.value,\n      });\n    }\n  };\n  validateEmail = (email) => {\n    var re = /^(([^<>()\\]\\\\.,;:\\s@“]+(\\.[^<>()\\]\\\\.,;:\\s@“]+)*)|(“.+“))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n    return re.test(String(email).toLowerCase());\n  };\n  onSubmit = (e) => {\n    const expert_id = this.props && this.props.match.params.id;\n\n    const {\n      first_name,\n      last_name,\n      email,\n      contact,\n      gender,\n      country,\n      designation,\n      calendlyLink,\n      role,\n      industry,\n      expertise,\n      fields,\n      about,\n      service,\n      rate,\n      linkedIn,\n      skill,\n    } = this.state;\n\n    if (first_name === \"\") {\n      this.setState({\n        errorType: \"first_name\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Name should not be empty</b>\n          </span>\n        ),\n      });\n      return;\n    }\n    if (first_name !== \"\") {\n      let filter = /^[a-zA-Z0-9]+([-_\\s]{1}[a-zA-Z0-9]+)*$/;\n\n      if (!filter.test(first_name)) {\n        this.setState({\n          errorType: \"first_name\",\n          errorText: (\n            <span className=\"text-danger\">\n              <b>\n                {\" \"}\n                Name should be combination of alphanumeric text, underscore,\n                space and hyphen\n              </b>\n            </span>\n          ),\n        });\n        return;\n      }\n    }\n\n    if (last_name === \"\") {\n      this.setState({\n        errorType: \"last_name\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Name should not be empty</b>\n          </span>\n        ),\n      });\n      return;\n    }\n    if (last_name !== \"\") {\n      let filter = /^[a-zA-Z0-9]+([-_\\s]{1}[a-zA-Z0-9]+)*$/;\n\n      if (!filter.test(last_name)) {\n        this.setState({\n          errorType: \"last_name\",\n          errorText: (\n            <span className=\"text-danger\">\n              <b>\n                {\" \"}\n                Name should be combination of alphanumeric text, underscore,\n                space and hyphen\n              </b>\n            </span>\n          ),\n        });\n        return;\n      }\n    }\n\n    if (email === \"\") {\n      this.setState({\n        errorType: \"email\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Email Id is empty</b>\n          </span>\n        ),\n      });\n      return;\n    }\n    if (!this.validateEmail(email)) {\n      this.setState({\n        errorType: \"email\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Invalid email</b>\n          </span>\n        ),\n      });\n      return;\n    }\n\n    // if (contact === \"\") {\n    //   this.setState({\n    //     errorType: \"contact\",\n    //     errorText: <span className=\"text-danger\">Mobile number is empty</span>,\n    //     loading: false,\n    //   });\n\n    //   return;\n    // }\n\n    if (contact !== \"\") {\n      if (contact.length < 10 || contact.length > 10) {\n        this.setState({\n          errorType: \"contact\",\n          errorText: (\n            <span className=\"text-danger\">\n              {\" \"}\n              <b>Phone number should be of length 10</b>\n            </span>\n          ),\n          loading: false,\n        });\n\n        return;\n      }\n    }\n\n    if (contact !== \"\") {\n      let filter = /^\\d{10}$/;\n      if (!filter.test(contact)) {\n        this.setState({\n          errorType: \"contact\",\n          errorText: (\n            <span className=\"text-danger\">\n              {\" \"}\n              <b>Please enter valid phone number</b>\n            </span>\n          ),\n          loading: false,\n        });\n\n        return;\n      }\n    }\n\n    if (gender === \"\") {\n      this.setState({\n        errorType: \"gender\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Select your gender</b>\n          </span>\n        ),\n      });\n      return;\n    }\n    if (country === \"\") {\n      this.setState({\n        errorType: \"country\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Select your country</b>\n          </span>\n        ),\n      });\n      return;\n    }\n\n    if (designation === \"\") {\n      this.setState({\n        errorType: \"designation\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Designation should not be empty</b>\n          </span>\n        ),\n      });\n      return;\n    }\n\n    if (fields.length === 0) {\n      this.setState({\n        errorType: \"fields\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Select your fields</b>\n          </span>\n        ),\n      });\n      return;\n    }\n\n    if (role === \"\") {\n      this.setState({\n        errorType: \"role\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Select your current role</b>\n          </span>\n        ),\n      });\n      return;\n    }\n    if (industry === \"\") {\n      this.setState({\n        errorType: \"industry\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Select your industry</b>\n          </span>\n        ),\n      });\n      return;\n    }\n\n    if (service === \"\") {\n      this.setState({\n        errorType: \"service\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Select your service</b>\n          </span>\n        ),\n      });\n      return;\n    }\n    if (rate === \"\") {\n      this.setState({\n        errorType: \"rate\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Please enter the rate</b>\n          </span>\n        ),\n      });\n      return;\n    }\n    if (linkedIn === \"\") {\n      this.setState({\n        errorType: \"linkedIn\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Please enter linkedIn link</b>\n          </span>\n        ),\n      });\n      return;\n    }\n    if (linkedIn !== \"\") {\n      let filter = /(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)/g;\n\n      if (!filter.test(linkedIn)) {\n        this.setState({\n          errorType: \"linkedIn\",\n          errorText: (\n            <span className=\"text-danger\">\n              <b> Please enter valid linkedIn link</b>\n            </span>\n          ),\n        });\n        return;\n      }\n    }\n    if (calendlyLink === \"\") {\n      this.setState({\n        errorType: \"calendlyLink\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Please enter calendly link</b>\n          </span>\n        ),\n      });\n      return;\n    }\n\n    if (skill === undefined) {\n      this.setState({\n        errorType: \"skill\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Select your skill</b>\n          </span>\n        ),\n      });\n      return;\n    }\n\n    if (expertise.length === 0) {\n      this.setState({\n        errorType: \"expertise\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Please enter your expert areas</b>\n          </span>\n        ),\n      });\n      return;\n    }\n    if (about.length === 0) {\n      this.setState({\n        errorType: \"about\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Please add some information</b>\n          </span>\n        ),\n      });\n      return;\n    }\n    if (about.length === 1 && about[0].value === \"\") {\n      this.setState({\n        errorType: \"about\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Please add some information</b>\n          </span>\n        ),\n      });\n      return;\n    }\n\n    if (!expert_id) {\n      this.callApiAddExpert();\n    } else {\n      this.callApiEditExpert();\n    }\n  };\n\n  callApiEditExpert = () => {\n    const expert_id = this.props && this.props.match.params.id;\n    const {\n      first_name,\n      last_name,\n      gender,\n      country,\n      designation,\n      fields,\n      role,\n      industry,\n      calendlyLink,\n      service,\n      rate,\n      linkedIn,\n      about,\n      skill,\n      expertise,\n      expertImage,\n      email,\n      contact,\n    } = this.state;\n    let aboutData = about.map((el) => {\n      return el.value;\n    });\n    let skillObj = [{ label: skill, values: expertise }];\n    const timeZone = moment.tz.guess(true);\n\n    let obj = {\n      id: expert_id,\n      first_name,\n      last_name,\n      gender,\n      country,\n      designation,\n      fields,\n      role,\n      industry,\n      skills: skillObj,\n      service,\n      email,\n      contact_no: contact ? contact : \"\",\n      linkedIn,\n      calendly: calendlyLink,\n      price: rate,\n      info: aboutData,\n      time_zone: timeZone,\n    };\n    if (expertImage) {\n      obj.profile_pic = expertImage;\n    }\n\n    this.setState({\n      loadiing: true,\n    });\n    this.props.editExpert(\"expert/update-profile\", obj, (value) => {\n      if (value.status === 200) {\n        NotificationManager.success(\"Expert edit successfully\", \"\", 1000);\n        this.props.history.push(\"/experts\");\n        this.setState({\n          loadiing: false,\n        });\n      }\n    });\n  };\n\n  callApiAddExpert = () => {\n    const {\n      first_name,\n      last_name,\n      email,\n      contact,\n      gender,\n      country,\n      designation,\n      fields,\n      role,\n      industry,\n      skill,\n      expertise,\n      service,\n      rate,\n      linkedIn,\n      about,\n      expertImage,\n      calendlyLink,\n    } = this.state;\n    let aboutData = about.map((el) => {\n      return el.value;\n    });\n    const timeZone = moment.tz.guess(true);\n    let skillObj = [{ label: skill, values: expertise }];\n\n    let obj = {\n      // profile_pic:expertImage,\n      first_name,\n      last_name,\n      gender,\n      country,\n      role,\n      industry,\n      skills: skillObj,\n      fields,\n      info: aboutData,\n      linkedIn,\n      designation,\n      price: rate,\n      service,\n      time_zone: timeZone,\n      email,\n      contact_no: contact ? contact : \"\",\n      calendly: calendlyLink,\n    };\n    if (expertImage) {\n      obj.profile_pic = expertImage;\n    }\n\n    this.setState({\n      loadiing: true,\n    });\n    this.props.addExpert(\"expert/create\", obj, (value) => {\n      if (value.status === 200) {\n        NotificationManager.success(\"Expert added successfully\", \"\", 1000);\n        this.props.history.push(\"/experts\");\n        this.setState({\n          loadiing: false,\n        });\n      }\n    });\n  };\n\n  callApiAddImage = (base64) => {\n    this.setState({\n      loadiing: true,\n    });\n\n    let obj = {\n      base64,\n    };\n    this.props.addImage(\"upload/profile-picture\", obj, (value) => {\n      if (value.status === 200) {\n        this.setState({\n          expertImage: value.data.url,\n          loadiing: false,\n        });\n      }\n    });\n  };\n  resetState = (e) => {\n    e.preventDefault();\n    this.setState({\n      first_name: \"\",\n      last_name: \"\",\n      email: \"\",\n      contact: \"\",\n      gender: \"\",\n      country: \"\",\n      designation: \"\",\n      expertise: [],\n      skill: \"\",\n      role: \"\",\n      industry: \"\",\n      fields: [],\n      about: [],\n      errorType: \"\",\n      errorText: \"\",\n      service: \"\",\n      rate: \"\",\n      linkedIn: \"\",\n      calendlyLink: \"\",\n      selectedDate: new Date(),\n    });\n  };\n  handleBack = (e) => {\n    e.preventDefault();\n    this.props.history.push(\"/experts\");\n  };\n  onChange = (date) => {\n    this.setState({\n      selectedDate: date,\n    });\n  };\n  handlePlusButton = (e) => {\n    const { about } = this.state;\n    const newArr = [...about];\n    e.preventDefault();\n    e.stopPropagation();\n    let newAbout = {\n      value: \"\",\n    };\n    newArr.push(newAbout);\n    this.setState({\n      about: newArr,\n    });\n  };\n  inputAbout = (e, index) => {\n    let aboutToUpdate = this.state.about[index];\n    const newArray = [...this.state.about];\n    aboutToUpdate = {\n      ...aboutToUpdate,\n      value: e.target.value,\n    };\n\n    newArray[index] = aboutToUpdate;\n\n    this.clearError();\n    this.setState({ [e.target.name]: e.target.value, about: newArray });\n  };\n  handleCancel = (e, index) => {\n    e.preventDefault();\n    e.stopPropagation();\n    const { about } = this.state;\n\n    const newArr = [...about];\n    newArr.splice(index, 1);\n    this.setState({\n      about: newArr,\n    });\n  };\n  render() {\n    const expert_id = this.props && this.props.match.params.id;\n    const {\n      first_name,\n      last_name,\n      loadiing,\n      designation,\n      country,\n      expertise,\n      about,\n      fields,\n      gender,\n      expertImage,\n      role,\n      industry,\n      email,\n      contact,\n      service,\n      rate,\n      selectedDate,\n      linkedIn,\n      calendlyLink,\n      skill,\n    } = this.state;\n    let fieldsVal = optionsFields.filter((item) => {\n      return fields.includes(item.label);\n    });\n    let expertiseVal = optionsExpertise.filter((item) => {\n      return expertise.includes(item.label);\n    });\n\n    return (\n      <CRow>\n        <CCol xs=\"12\" sm=\"12\">\n          <CCard className=\"expert-card\">\n            {loadiing && <Loader />}\n            <CCardHeader>\n              <CButton onClick={this.handleBack} className=\"backBtn\">\n                <img src={BackArrow} className=\"mr-2\" /> Back\n              </CButton>\n              <div className=\"update-profile-image\">\n                <img\n                  id=\"output\"\n                  src={expertImage ? expertImage : Avatar}\n                  alt=\"profile\"\n                  className=\"profile negative-margin\"\n                />\n                <div className=\"upload-box\">\n                  <Input\n                    type=\"file\"\n                    accept=\"image/*\"\n                    id=\"f-upload\"\n                    name=\"myImage\"\n                    onChange={this.uploadImage}\n                    className=\"d-none\"\n                  />\n                  <label htmlFor=\"f-upload\" class=\"custom-file-upload\">\n                    <div className=\"camera-btn\" onClick={this.uploadImage}>\n                      <img src={CameraIcon} alt=\"camera\" />\n                    </div>\n                  </label>\n                </div>\n              </div>\n            </CCardHeader>\n            <CCardBody>\n              <CForm\n                action=\"\"\n                method=\"post\"\n                encType=\"multipart/form-data\"\n                className=\"form-horizontal\"\n              >\n                <CFormGroup row className=\"my-0\">\n                  <CCol xs=\"6\">\n                    <CFormGroup>\n                      <CLabel htmlFor=\"first_name\">First Name</CLabel>\n                      <CInput\n                        id=\"first_name\"\n                        name=\"first_name\"\n                        placeholder=\"First Name\"\n                        onChange={this.inputHandler}\n                        value={first_name}\n                      />\n                      {this.errorShow(\"first_name\")}\n                    </CFormGroup>\n                  </CCol>\n                  <CCol xs=\"6\">\n                    <CFormGroup>\n                      <CLabel htmlFor=\"last_name\">Last Name</CLabel>\n                      <CInput\n                        id=\"last_name\"\n                        name=\"last_name\"\n                        placeholder=\"Last Name\"\n                        onChange={this.inputHandler}\n                        value={last_name}\n                      />\n                      {this.errorShow(\"last_name\")}\n                    </CFormGroup>\n                  </CCol>\n                </CFormGroup>\n\n                <CFormGroup row className=\"my-0\">\n                  <CCol xs=\"6\">\n                    <CFormGroup>\n                      <CLabel htmlFor=\"email\">Email</CLabel>\n                      <CInput\n                        type=\"email\"\n                        id=\"email\"\n                        name=\"email\"\n                        placeholder=\"Email\"\n                        onChange={this.inputHandler}\n                        value={email}\n                        disabled={expert_id}\n                      />\n                      {this.errorShow(\"email\")}\n                    </CFormGroup>\n                  </CCol>\n                  <CCol xs=\"6\">\n                    <CFormGroup>\n                      <CLabel htmlFor=\"contact\">Contact</CLabel>\n                      <CInput\n                        id=\"contact\"\n                        name=\"contact\"\n                        placeholder=\"Contact\"\n                        onChange={this.inputHandler}\n                        value={contact}\n                      />\n                      {this.errorShow(\"contact\")}\n                    </CFormGroup>\n                  </CCol>\n                </CFormGroup>\n\n                <CFormGroup row className=\"my-0\">\n                  <CCol xs=\"6\">\n                    <CFormGroup>\n                      <CLabel htmlFor=\"gender\">Gender</CLabel>\n                      <Select\n                        custom\n                        placeholder=\"Select gender\"\n                        name=\"gender\"\n                        id=\"gender\"\n                        onChange={(data) => this.handleChange(data, \"gender\")}\n                        value={gender ? { value: gender, label: gender } : null}\n                        options={optionsGender}\n                      ></Select>\n                      {this.errorShow(\"gender\")}\n                    </CFormGroup>\n                  </CCol>\n                  <CCol xs=\"6\">\n                    <CFormGroup>\n                      <CLabel htmlFor=\"country\">Country</CLabel>\n                      <Select\n                        custom\n                        name=\"country\"\n                        id=\"country\"\n                        name=\"country\"\n                        placeholder=\"Select Country\"\n                        onChange={(data) => this.handleChange(data, \"country\")}\n                        value={\n                          country ? { value: country, label: country } : null\n                        }\n                        options={optionsCountry}\n                      ></Select>\n                      {this.errorShow(\"country\")}\n                    </CFormGroup>\n                  </CCol>\n                </CFormGroup>\n\n                <CFormGroup row className=\"my-0\">\n                  <CCol xs=\"6\">\n                    <CFormGroup>\n                      <CLabel htmlFor=\"designation\">Designation</CLabel>\n\n                      <CInput\n                        id=\"designation\"\n                        name=\"designation\"\n                        placeholder=\"Designation\"\n                        onChange={this.inputHandler}\n                        value={designation}\n                      />\n                      {this.errorShow(\"designation\")}\n                    </CFormGroup>\n                  </CCol>\n\n                  <CCol xs=\"6\">\n                    <CFormGroup>\n                      <CLabel htmlFor=\"fields\">Fields</CLabel>\n\n                      <Select\n                        isMulti\n                        custom\n                        placeholder=\"Select Fields\"\n                        id=\"fields\"\n                        name=\"fields\"\n                        onChange={(data) => this.handleChange(data, \"fields\")}\n                        value={fieldsVal}\n                        options={optionsFields}\n                      ></Select>\n                      {this.errorShow(\"fields\")}\n                    </CFormGroup>\n                  </CCol>\n                </CFormGroup>\n\n                <CFormGroup row className=\"my-0\">\n                  <CCol xs=\"6\">\n                    <CFormGroup>\n                      <CLabel htmlFor=\"role\">Current Role</CLabel>\n\n                      <Select\n                        custom\n                        id=\"role\"\n                        placeholder=\"Select Role\"\n                        name=\"role\"\n                        onChange={(data) => this.handleChange(data, \"role\")}\n                        value={role ? { value: role, label: role } : null}\n                        options={optionsRole}\n                      ></Select>\n                      {this.errorShow(\"role\")}\n                    </CFormGroup>\n                  </CCol>\n\n                  <CCol xs=\"6\">\n                    <CFormGroup>\n                      <CLabel htmlFor=\"industry\">Current Industry</CLabel>\n\n                      <Select\n                        custom\n                        id=\"industry\"\n                        name=\"industry\"\n                        placeholder=\"Select Industry\"\n                        onChange={(data) => this.handleChange(data, \"industry\")}\n                        value={\n                          industry ? { value: industry, label: industry } : null\n                        }\n                        options={optionsIndustry}\n                      ></Select>\n                      {this.errorShow(\"industry\")}\n                    </CFormGroup>\n                  </CCol>\n                </CFormGroup>\n\n                <CFormGroup row className=\"my-0\">\n                  <CCol xs=\"6\">\n                    <CFormGroup>\n                      <CLabel htmlFor=\"service\">Service</CLabel>\n\n                      <Select\n                        custom\n                        id=\"service\"\n                        name=\"service\"\n                        placeholder=\"Select Service\"\n                        onChange={(data) => this.handleChange(data, \"service\")}\n                        value={\n                          service ? { value: service, label: service } : null\n                        }\n                        options={optionsService}\n                      ></Select>\n                      {this.errorShow(\"service\")}\n                    </CFormGroup>\n                  </CCol>\n\n                  <CCol xs=\"6\">\n                    <CFormGroup>\n                      <CLabel htmlFor=\"rate\">Rate</CLabel>\n\n                      <CInput\n                        id=\"rate\"\n                        placeholder=\"Rate\"\n                        name=\"rate\"\n                        onChange={this.inputHandler}\n                        value={rate}\n                      />\n                      {this.errorShow(\"rate\")}\n                    </CFormGroup>\n                  </CCol>\n                </CFormGroup>\n\n                <CFormGroup row className=\"my-0\">\n                  <CCol xs=\"6\">\n                    <CFormGroup>\n                      <CLabel htmlFor=\"linkedIn\">LinkedIn Link</CLabel>\n                      <CInput\n                        name=\"linkedIn\"\n                        id=\"linkedIn\"\n                        onChange={this.inputHandler}\n                        placeholder=\"LinkedIn Link\"\n                        value={linkedIn}\n                      />\n                      {this.errorShow(\"linkedIn\")}\n                    </CFormGroup>\n                  </CCol>\n                  <CCol xs=\"6\">\n                    <CFormGroup>\n                      <CLabel htmlFor=\"linkedIn\">Calendly Link</CLabel>\n                      <CInput\n                        name=\"calendlyLink\"\n                        id=\"calendlyLink\"\n                        onChange={this.inputHandler}\n                        placeholder=\"Calendly Link\"\n                        value={calendlyLink}\n                      />\n                      {this.errorShow(\"calendlyLink\")}\n                    </CFormGroup>\n                  </CCol>\n                </CFormGroup>\n                <CFormGroup row className=\"my-0\">\n                  <CCol xs=\"6\">\n                    <CFormGroup>\n                      <CLabel htmlFor=\"skill\">Skill</CLabel>\n\n                      <Select\n                        custom\n                        id=\"skill\"\n                        placeholder=\"Select Skill\"\n                        name=\"skill\"\n                        onChange={(data) => this.handleChange(data, \"skill\")}\n                        value={skill ? { value: skill, label: skill } : null}\n                        options={optionsSkill}\n                      ></Select>\n                      {this.errorShow(\"skill\")}\n                    </CFormGroup>\n                  </CCol>\n                  <CCol xs=\"6\">\n                    {skill && (\n                      <CFormGroup>\n                        <CLabel htmlFor=\"expertise\">{skill}</CLabel>\n\n                        <Select\n                          isMulti\n                          custom\n                          id=\"expertise\"\n                          placeholder=\"Select areas of your expertise/specialities\"\n                          name=\"expertise\"\n                          value={expertiseVal}\n                          options={optionsExpertise}\n                          onChange={(e) => this.handleChange(e, \"expertise\")}\n                        ></Select>\n                        {this.errorShow(\"expertise\")}\n                      </CFormGroup>\n                    )}\n                  </CCol>\n                </CFormGroup>\n                <CFormGroup row className=\"my-0\">\n                  <CCol xs=\"12\">\n                    <CFormGroup>\n                      <CLabel htmlFor=\"about\">About</CLabel>\n                      <div\n                        onClick={this.handlePlusButton}\n                        class=\"d-flex justify-content-between add-list\"\n                      >\n                        <CLabel htmlFor=\"pros\">Add Information</CLabel>\n                        <button className=\"icon\">\n                          <img src={ADD} className=\"ml-3\" />\n                        </button>\n                      </div>\n                      {this.errorShow(\"about\")}\n                      {about &&\n                        about.length > 0 &&\n                        about.map((el, index) => {\n                          return (\n                            <div className=\"d-flex align-items-center mb-2 \">\n                              <CTextarea\n                                rows=\"6\"\n                                id={`about${index}`}\n                                name={`about${index}`}\n                                placeholder={`${index + 1}.`}\n                                autoComplete={`about${index}`}\n                                onChange={(e) => {\n                                  this.inputAbout(e, index);\n                                }}\n                                value={el.value}\n                              />\n                              <button\n                                className=\"icon\"\n                                onClick={(e) => this.handleCancel(e, index)}\n                              >\n                                <img src={CANCEL} className=\"ml-3\" />\n                              </button>\n                            </div>\n                          );\n                        })}\n                    </CFormGroup>\n                  </CCol>\n                </CFormGroup>\n              </CForm>\n            </CCardBody>\n            <CCardFooter>\n              <div className=\"text-right\">\n                <CButton\n                  type=\"submit\"\n                  size=\"sm\"\n                  color=\"primary\"\n                  onClick={this.onSubmit}\n                >\n                  <CIcon name=\"cil-scrubber\" /> Submit\n                </CButton>\n                <CButton\n                  type=\"reset\"\n                  size=\"sm\"\n                  color=\"danger\"\n                  onClick={this.resetState}\n                  className=\"ml-2\"\n                >\n                  <CIcon name=\"cil-ban\" /> Reset\n                </CButton>\n              </div>\n            </CCardFooter>\n          </CCard>\n        </CCol>\n      </CRow>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {};\n};\nconst mapDispatchToProps = (dispatch) => {\n  return bindActionCreators(\n    {\n      addExpert,\n      addImage,\n      fetchOneExpert,\n      editExpert,\n    },\n    dispatch\n  );\n};\nexport default withRouter(\n  connect(mapStateToProps, mapDispatchToProps)(AddExpert)\n);\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/resources/AddResource.js",["239","240","241","242","243","244","245","246","247","248"],"/Volumes/DATA/Isha Kansal/pivot-admin/src/views/store/sagas.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/views/store/types.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/common/axios.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/config.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/views/store/reducer.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/views/store/action.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/loader/index.js",["249","250"],"import React from \"react\";\nconst dots = [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}];\nexport default () => (\n  <>\n    <div className=\"loader-backdrop\" />\n    <div className=\"content-loader\">\n      <div className=\"dot-loader\">\n        {dots.map(({}, index) => (\n          <div key={index} />\n        ))}\n      </div>\n    </div>\n  </>\n);\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/icons.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/logo.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/assets/icons/index.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/common/commonModal.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/views/resources/Resource.js",["251"],"/Volumes/DATA/Isha Kansal/pivot-admin/src/common/stringFunction.js",[],["252","253"],"/Volumes/DATA/Isha Kansal/pivot-admin/src/common/toolTip.js",["254"],"import React, { useState } from \"react\";\nimport { Tooltip } from \"reactstrap\";\n\nexport default ({ placement = \"left\", target, children }) => {\n  const [tooltipOpen, setTooltipOpen] = useState(false);\n\n  const toggle = () => setTooltipOpen(!tooltipOpen);\n\n  return (\n    <Tooltip\n      placement={placement}\n      isOpen={tooltipOpen}\n      target={target}\n      toggle={toggle}\n    >\n      {children}\n    </Tooltip>\n  );\n};\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/experts/Expert.js",["255","256"],"import React, { useState, useEffect } from \"react\";\nimport {\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CNavLink,\n  CNav,\n  CTabContent,\n  CTabPane,\n  CTabs,\n  CNavItem,\n  CBadge,\n} from \"@coreui/react\";\nimport moment from \"moment\";\n\nimport Loader from \"../../loader\";\n\nimport { connect } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { withRouter } from \"react-router-dom\";\nimport { fetchOneExpert } from \"../store/action\";\nconst Expert = (props) => {\n  const [expert, setExpert] = useState({});\n  const [loading, setLoading] = useState(false);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    setLoading(true);\n\n    const expert_id = props && props.match.params.id;\n    dispatch(\n      fetchOneExpert(`expert/${expert_id}`, (value) => {\n        setExpert(value.data.expert);\n        setLoading(false);\n      })\n    );\n  }, []);\n\n  let istDate = new Date(expert.createdAt);\n\n  let createdAt = moment(istDate).format(\"DD-MM-YYYY, hh:mm a\");\n  let fields =\n    expert && expert.expert_fields && expert.expert_fields.join(\", \");\n  let info = expert && expert.info && expert.info.join(\", \");\n\n  let skills =\n    expert.skills &&\n    expert.skills[0] &&\n    expert.skills[0].values &&\n    expert.skills[0].values.join(\", \");\n\n  const getBadge = (status) => {\n    switch (status) {\n      case \"Deactivated\":\n        return \"danger\";\n\n      case \"Activated\":\n        return \"success\";\n\n      default:\n        return \"primary\";\n    }\n  };\n\n  return (\n    <CRow>\n      <CCol lg={12}>\n        <CCard>\n          {loading && <Loader />}\n          {/* <CCardHeader>Expert Details</CCardHeader> */}\n\n          <CCardBody>\n            <CTabs>\n              <CNav variant=\"tabs\">\n                <CNavItem>\n                  <CNavLink>Expert Details</CNavLink>\n                </CNavItem>\n                <CNavItem>\n                  <CNavLink>\n                    List of Users that the expert has had calls with\n                  </CNavLink>\n                </CNavItem>\n              </CNav>\n              <CTabContent>\n                <CTabPane>\n                  {expert && (\n                    <table className=\"table\">\n                      <tbody>\n                        {createdAt !== \"Invalid date\" && (\n                          <tr>\n                            <td>Created At</td>\n                            <td>\n                              <strong> {createdAt}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {!loading && (\n                          <tr>\n                            <td>Status</td>\n\n                            <td>\n                              <CBadge\n                                color={getBadge(\n                                  expert.expert_status === \"deactivated\"\n                                    ? \"Deactivated\"\n                                    : \"Activated\"\n                                )}\n                              >\n                                {expert.expert_status === \"deactivated\"\n                                  ? \"Deactivated\"\n                                  : \"Activated\"}\n                              </CBadge>\n                            </td>\n                          </tr>\n                        )}\n                        {!loading && (\n                          <tr>\n                            <td>EID</td>\n                            <td>\n                              <strong>{expert._id}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {expert.profile_pic && (\n                          <tr>\n                            <td>Picture</td>\n                            <td>\n                              <img\n                                style={{\n                                  width: \"100px\",\n                                  height: \"100px\",\n                                  borderRadius: \"4px\",\n                                }}\n                                src={expert.profile_pic}\n                                alt=\"profile\"\n                              />\n                            </td>\n                          </tr>\n                        )}\n                        {expert.first_name && (\n                          <tr>\n                            <td>First name</td>\n                            <td>\n                              <strong>{expert.first_name}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {expert.last_name && (\n                          <tr>\n                            <td>Last name</td>\n                            <td>\n                              <strong>{expert.last_name}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {expert.email && (\n                          <tr>\n                            <td>Email</td>\n                            <td>\n                              <strong>{expert.email}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {expert.contact_no && (\n                          <tr>\n                            <td>Contact</td>\n                            <td>\n                              <strong>{expert.contact_no}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {expert.gender && (\n                          <tr>\n                            <td>Gender</td>\n                            <td>\n                              <strong>{expert.gender}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {expert.country && (\n                          <tr>\n                            <td>Country</td>\n                            <td>\n                              <strong>{expert.country}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {info && (\n                          <tr>\n                            <td>About</td>\n                            <td>\n                              <strong>{info}</strong>\n                            </td>\n                          </tr>\n                        )}\n\n                        {expert.current_role && (\n                          <tr>\n                            <td>Current Role</td>\n                            <td>\n                              <strong>{expert.current_role}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {expert.industry && (\n                          <tr>\n                            <td>Current Industry</td>\n                            <td>\n                              <strong>{expert.industry}</strong>\n                            </td>\n                          </tr>\n                        )}\n\n                        {expert.designation && (\n                          <tr>\n                            <td>Designation</td>\n                            <td>\n                              <strong>{expert.designation}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {expert.linkedIn && (\n                          <tr>\n                            <td>LinkedIn Link</td>\n                            <td>\n                              <strong>{expert.linkedIn}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {expert.calendly && (\n                          <tr>\n                            <td>Calendly Link</td>\n                            <td>\n                              <strong>{expert.calendly}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {expert.price && (\n                          <tr>\n                            <td>Rate</td>\n                            <td>\n                              <strong>{expert.price}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {expert.service && (\n                          <tr>\n                            <td>Service</td>\n                            <td>\n                              <strong>{expert.service}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {fields && (\n                          <tr>\n                            <td>Fields</td>\n                            <td>\n                              <strong>{fields}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {skills && (\n                          <tr>\n                            <td>Skills</td>\n                            <td>\n                              <strong>{skills}</strong>\n                            </td>\n                          </tr>\n                        )}\n                      </tbody>\n                    </table>\n                  )}\n                </CTabPane>\n                <CTabPane>\n                  <table className=\"table\">\n                    <tbody>\n                      <tr>\n                        <td>Users List</td>\n                      </tr>\n                    </tbody>\n                  </table>\n                </CTabPane>\n              </CTabContent>\n            </CTabs>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {};\n};\nconst mapDispatchToProps = (dispatch) => {\n  return bindActionCreators(\n    {\n      fetchOneExpert,\n    },\n    dispatch\n  );\n};\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Expert));\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/experts/ExpertsFieldsData.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/views/resources/ResourcesFieldsData.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/UserPlanner.js",["257"],"import React from \"react\";\nimport Loader from \"../../loader\";\nimport {\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CTabs,\n  CNavItem,\n  CNavLink,\n  CNav,\n  CTabContent,\n  CTabPane,\n} from \"@coreui/react\";\n\nimport Network from \"./planner/Network\";\nimport Explore from \"./planner/Explore\";\nimport Learn from \"./planner/Learn\";\nimport Prepare from \"./planner/Prepare\";\nimport Apply from \"./planner/Apply\";\nconst UserPlanner = () => {\n  return (\n    <CRow>\n      <CCol lg={12}>\n        <CCard className=\"position-relative\">\n          <CCardHeader>\n            Click on a module below to see the information\n          </CCardHeader>\n          <CCardBody>\n            <CTabs>\n              <CNav variant=\"tabs\">\n                <CNavItem>\n                  <CNavLink>Explore</CNavLink>\n                </CNavItem>\n                <CNavItem>\n                  <CNavLink>Network</CNavLink>\n                </CNavItem>\n                <CNavItem>\n                  <CNavLink>Learn</CNavLink>\n                </CNavItem>\n                <CNavItem>\n                  <CNavLink>Prepare</CNavLink>\n                </CNavItem>\n                <CNavItem>\n                  <CNavLink>Apply</CNavLink>\n                </CNavItem>\n              </CNav>\n              <CTabContent>\n                <CTabPane>\n                  <Explore />\n                </CTabPane>\n                <CTabPane>\n                  <Network />\n                </CTabPane>\n                <CTabPane>\n                  <Learn />\n                </CTabPane>\n                <CTabPane>\n                  <Prepare />\n                </CTabPane>\n                <CTabPane>\n                  <Apply />\n                </CTabPane>\n              </CTabContent>\n            </CTabs>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  );\n};\nexport default UserPlanner;\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/planner/Network.js",["258","259","260","261","262","263","264","265","266"],"import React, { useState } from \"react\";\nimport Loader from \"../../../loader\";\nimport {\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CBadge,\n  CTabs,\n  CNavItem,\n  CNavLink,\n  CNav,\n  CTabContent,\n  CTabPane,\n  CButton,\n  CCollapse,\n} from \"@coreui/react\";\nimport { Table } from \"reactstrap\";\nconst Network = (props) => {\n  const [accordion, setAccordion] = useState(1);\n  const getBadge = (status) => {\n    switch (status) {\n      case \"Done\":\n        return \"success\";\n\n      // case \"Not Verified\":\n      //   return \"danger\";\n      // case \"Activated\":\n      //   return \"success\";\n\n      // case \"Blocked\":\n      //   return \"danger\";\n      default:\n        return \"primary\";\n    }\n  };\n  return (\n    <div id=\"accordion\">\n      <CCard className=\"mb-0\">\n        <CCardHeader id=\"headingOne\">\n          <CButton\n            block\n            color=\"link\"\n            className=\"text-left m-0 p-0\"\n            onClick={() => setAccordion(accordion === 0 ? null : 0)}\n          >\n            <h5 className=\"m-0 p-0\">Existing Connections</h5>\n          </CButton>\n        </CCardHeader>\n        <CCollapse show={accordion === 0}>\n          <CCardBody>\n            <CCardHeader>\n              <table className=\"table\">\n                <tbody>\n                  <tr>\n                    <td>Status</td>\n                    <td>\n                      {\" \"}\n                      <CBadge color={getBadge(\"Done\")}>Done</CBadge>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n              <form>\n                <div className=\"text-center search-input\">\n                  <input\n                    type=\"search\"\n                    className=\"form-control\"\n                    placeholder=\"Search\"\n                    required\n                  />\n                </div>\n              </form>\n            </CCardHeader>\n            <Table responsive>\n              <thead>\n                <th className=\"text-nowrap \">Career Options</th>\n\n                <th>Family / Relatives</th>\n                <th>Friends</th>\n\n                <th>Professional Network</th>\n                <th>Other</th>\n              </thead>\n            </Table>\n          </CCardBody>\n        </CCollapse>\n      </CCard>\n      <CCard className=\"mb-0\">\n        <CCardHeader id=\"headingTwo\">\n          <CButton\n            block\n            color=\"link\"\n            className=\"text-left m-0 p-0\"\n            onClick={() => setAccordion(accordion === 1 ? null : 1)}\n          >\n            <h5 className=\"m-0 p-0\">New Connections</h5>\n          </CButton>\n        </CCardHeader>\n        <CCollapse show={accordion === 1}>\n          <CCardBody>\n            <CCardHeader>\n              <table className=\"table\">\n                <tbody>\n                  <tr>\n                    <td>Status</td>\n                    <td>\n                      {\" \"}\n                      <CBadge color={getBadge(\"Done\")}>Done</CBadge>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n              <form>\n                <div className=\"text-center search-input\">\n                  <input\n                    type=\"search\"\n                    className=\"form-control\"\n                    placeholder=\"Search\"\n                    required\n                  />\n                </div>\n              </form>\n            </CCardHeader>\n            <Table responsive>\n              {/* <thead>\n                <th className=\"text-nowrap \">My Interests,Skills and Values</th>\n\n                <th>World Needs</th>\n                <th>World Pays For</th>\n              </thead> */}\n            </Table>\n          </CCardBody>\n        </CCollapse>\n      </CCard>\n      <CCard className=\"mb-0\">\n        <CCardHeader id=\"headingThree\">\n          <CButton\n            block\n            color=\"link\"\n            className=\"text-left m-0 p-0\"\n            onClick={() => setAccordion(accordion === 2 ? null : 2)}\n          >\n            <h5 className=\"m-0 p-0\">Cold Messages</h5>\n          </CButton>\n        </CCardHeader>\n        <CCollapse show={accordion === 2}>\n          <CCardBody>\n            <CCardHeader>\n              <table className=\"table\">\n                <tbody>\n                  <tr>\n                    <td>Status</td>\n                    <td>\n                      {\" \"}\n                      <CBadge color={getBadge(\"Done\")}>Done</CBadge>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n              <form>\n                <div className=\"text-center search-input\">\n                  <input\n                    type=\"search\"\n                    className=\"form-control\"\n                    placeholder=\"Search\"\n                    required\n                  />\n                </div>\n              </form>\n            </CCardHeader>\n            <Table responsive>\n              <thead>\n                <th className=\"text-nowrap \">Title</th>\n\n                <th>Cold Message</th>\n              </thead>\n            </Table>\n          </CCardBody>\n        </CCollapse>\n      </CCard>\n\n      <CCard className=\"mb-0\">\n        <CCardHeader id=\"headingThree\">\n          <CButton\n            block\n            color=\"link\"\n            className=\"text-left m-0 p-0\"\n            onClick={() => setAccordion(accordion === 3 ? null : 3)}\n          >\n            <h5 className=\"m-0 p-0\">Key Takeaways</h5>\n          </CButton>\n        </CCardHeader>\n        <CCollapse show={accordion === 3}>\n          <CCardBody>\n            <CCardHeader>\n              <table className=\"table\">\n                <tbody>\n                  <tr>\n                    <td>Status</td>\n                    <td>\n                      {\" \"}\n                      <CBadge color={getBadge(\"Done\")}>Done</CBadge>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n              <form>\n                <div className=\"text-center search-input\">\n                  <input\n                    type=\"search\"\n                    className=\"form-control\"\n                    placeholder=\"Search\"\n                    required\n                  />\n                </div>\n              </form>\n            </CCardHeader>\n            <Table responsive>\n              <thead>\n                <th className=\"text-nowrap \">Name</th>\n\n                <th>Organization</th>\n                <th>Current Role</th>\n                <th>Relationship</th>\n                <th>Role & Industry Insights</th>\n                <th>Company Insights</th>\n                <th>Relevant Connections</th>\n                <th>Relevant Groups</th>\n                <th>Learning & Development</th>\n                <th>Job Search</th>\n                <th>Job Referral</th>\n                <th>Other</th>\n              </thead>\n            </Table>\n          </CCardBody>\n        </CCollapse>\n      </CCard>\n    </div>\n  );\n};\nexport default Network;\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/planner/Explore.js",["267","268","269","270","271","272","273","274","275"],"import React, { useState } from \"react\";\nimport Loader from \"../../../loader\";\nimport {\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CBadge,\n  CTabs,\n  CNavItem,\n  CNavLink,\n  CNav,\n  CTabContent,\n  CTabPane,\n  CButton,\n  CCollapse,\n} from \"@coreui/react\";\nimport { Table } from \"reactstrap\";\nconst Explore = (props) => {\n  const [accordion, setAccordion] = useState(1);\n  const getBadge = (status) => {\n    switch (status) {\n      case \"Done\":\n        return \"success\";\n\n      // case \"Not Verified\":\n      //   return \"danger\";\n      // case \"Activated\":\n      //   return \"success\";\n\n      // case \"Blocked\":\n      //   return \"danger\";\n      default:\n        return \"primary\";\n    }\n  };\n\n  return (\n    <div id=\"accordion\">\n      <CCard className=\"mb-0\">\n        <CCardHeader id=\"headingOne\">\n          <CButton\n            block\n            color=\"link\"\n            className=\"text-left m-0 p-0 d-flex justify-content-between\"\n            onClick={() => setAccordion(accordion === 0 ? null : 0)}\n          >\n            <h5 className=\"m-0 p-0\">Introspection</h5>\n            {/* <span className=\"done-txt\">Done</span> */}\n          </CButton>\n        </CCardHeader>\n        <CCollapse show={accordion === 0}>\n          <CCardBody>\n            <CCardHeader>\n              <table className=\"table\">\n                <tbody>\n                  <tr>\n                    <td>Status</td>\n                    <td>\n                      {\" \"}\n                      <CBadge color={getBadge(\"Done\")}>Done</CBadge>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n              <form>\n                <div className=\"text-center search-input\">\n                  <input\n                    type=\"search\"\n                    className=\"form-control\"\n                    placeholder=\"Search\"\n                    required\n                  />\n                </div>\n              </form>\n            </CCardHeader>\n            <Table responsive>\n              <thead>\n                <th className=\"text-nowrap \">Priority Level</th>\n\n                <th>My Interests</th>\n                <th>My Skills</th>\n\n                <th>My Values</th>\n              </thead>\n            </Table>\n          </CCardBody>\n        </CCollapse>\n      </CCard>\n      <CCard className=\"mb-0\">\n        <CCardHeader id=\"headingTwo\">\n          <CButton\n            block\n            color=\"link\"\n            className=\"text-left m-0 p-0\"\n            onClick={() => setAccordion(accordion === 1 ? null : 1)}\n          >\n            <h5 className=\"m-0 p-0\">Extrospection</h5>\n          </CButton>\n        </CCardHeader>\n        <CCollapse show={accordion === 1}>\n          <CCardBody>\n            <CCardHeader>\n              <table className=\"table\">\n                <tbody>\n                  <tr>\n                    <td>Status</td>\n                    <td>\n                      {\" \"}\n                      <CBadge color={getBadge(\"Done\")}>Done</CBadge>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n              <form>\n                <div className=\"text-center search-input\">\n                  <input\n                    type=\"search\"\n                    className=\"form-control\"\n                    placeholder=\"Search\"\n                    required\n                  />\n                </div>\n              </form>\n            </CCardHeader>\n            <Table responsive>\n              <thead>\n                <th className=\"text-nowrap \">My Interests,Skills and Values</th>\n\n                <th>World Needs</th>\n                <th>World Pays For</th>\n              </thead>\n            </Table>\n          </CCardBody>\n        </CCollapse>\n      </CCard>\n      <CCard className=\"mb-0\">\n        <CCardHeader id=\"headingThree\">\n          <CButton\n            block\n            color=\"link\"\n            className=\"text-left m-0 p-0\"\n            onClick={() => setAccordion(accordion === 2 ? null : 2)}\n          >\n            <h5 className=\"m-0 p-0\">Personality Assessment</h5>\n          </CButton>\n        </CCardHeader>\n        <CCollapse show={accordion === 2}>\n          <CCardHeader>\n            <table className=\"table\">\n              <tbody>\n                <tr>\n                  <td>Status</td>\n                  <td>\n                    {\" \"}\n                    <CBadge color={getBadge(\"Done\")}>Done</CBadge>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n            <form>\n              <div className=\"text-center search-input\">\n                <input\n                  type=\"search\"\n                  className=\"form-control\"\n                  placeholder=\"Search\"\n                  required\n                />\n              </div>\n            </form>\n          </CCardHeader>\n          <CCardBody>\n            <thead>\n              <th className=\"text-nowrap \">Career Option</th>\n            </thead>\n          </CCardBody>\n        </CCollapse>\n      </CCard>\n\n      <CCard className=\"mb-0\">\n        <CCardHeader id=\"headingThree\">\n          <CButton\n            block\n            color=\"link\"\n            className=\"text-left m-0 p-0\"\n            onClick={() => setAccordion(accordion === 3 ? null : 3)}\n          >\n            <h5 className=\"m-0 p-0\">Practical Understanding</h5>\n          </CButton>\n        </CCardHeader>\n        <CCollapse show={accordion === 3}>\n          <CCardBody>\n            <CCardHeader>\n              <table className=\"table\">\n                <tbody>\n                  <tr>\n                    <td>Status</td>\n                    <td>\n                      {\" \"}\n                      <CBadge color={getBadge(\"Done\")}>Done</CBadge>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n              <form>\n                <div className=\"text-center search-input\">\n                  <input\n                    type=\"search\"\n                    className=\"form-control\"\n                    placeholder=\"Search\"\n                    required\n                  />\n                </div>\n              </form>\n            </CCardHeader>\n            <Table responsive>\n              <thead>\n                <th className=\"text-nowrap \">Career Option</th>\n\n                <th>Practical Understanding Via</th>\n                <th>Contact Person</th>\n                <th>Contact Email</th>\n                <th>Notes On</th>\n              </thead>\n            </Table>\n          </CCardBody>\n        </CCollapse>\n      </CCard>\n\n      <CCard className=\"mb-0\">\n        <CCardHeader id=\"headingThree\">\n          <CButton\n            block\n            color=\"link\"\n            className=\"text-left m-0 p-0\"\n            onClick={() => setAccordion(accordion === 4 ? null : 4)}\n          >\n            <h5 className=\"m-0 p-0\">Career Options</h5>\n          </CButton>\n        </CCardHeader>\n        <CCollapse show={accordion === 4}>\n          <CCardBody>\n            <CCardHeader>\n              <table className=\"table\">\n                <tbody>\n                  <tr>\n                    <td>Status</td>\n                    <td>\n                      {\" \"}\n                      <CBadge color={getBadge(\"Done\")}>Done</CBadge>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n              <form>\n                <div className=\"text-center search-input\">\n                  <input\n                    type=\"search\"\n                    className=\"form-control\"\n                    placeholder=\"Search\"\n                    required\n                  />\n                </div>\n              </form>\n            </CCardHeader>\n            <Table responsive>\n              <thead>\n                <th className=\"text-nowrap \">Career Option</th>\n\n                <th>Pros</th>\n                <th>Cons</th>\n                <th>Net Score</th>\n                <th>Decision</th>\n              </thead>\n            </Table>\n          </CCardBody>\n        </CCollapse>\n      </CCard>\n    </div>\n  );\n};\nexport default Explore;\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/planner/Learn.js",["276","277","278","279","280","281","282","283","284"],"import React, { useState } from \"react\";\nimport Loader from \"../../../loader\";\nimport {\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CBadge,\n  CTabs,\n  CNavItem,\n  CNavLink,\n  CNav,\n  CTabContent,\n  CTabPane,\n  CButton,\n  CCollapse,\n} from \"@coreui/react\";\nimport { Table } from \"reactstrap\";\nconst Learn = (props) => {\n  const [accordion, setAccordion] = useState(1);\n  const getBadge = (status) => {\n    switch (status) {\n      case \"Done\":\n        return \"success\";\n\n      // case \"Not Verified\":\n      //   return \"danger\";\n      // case \"Activated\":\n      //   return \"success\";\n\n      // case \"Blocked\":\n      //   return \"danger\";\n      default:\n        return \"primary\";\n    }\n  };\n  return (\n    <div id=\"accordion\">\n      <CCard className=\"mb-0\">\n        <CCardHeader id=\"headingOne\">\n          <CButton\n            block\n            color=\"link\"\n            className=\"text-left m-0 p-0\"\n            onClick={() => setAccordion(accordion === 0 ? null : 0)}\n          >\n            <h5 className=\"m-0 p-0\">Skills</h5>\n          </CButton>\n        </CCardHeader>\n        <CCollapse show={accordion === 0}>\n          <CCardBody>\n            <CCardHeader>\n              <table className=\"table\">\n                <tbody>\n                  <tr>\n                    <td>Status</td>\n                    <td>\n                      {\" \"}\n                      <CBadge color={getBadge(\"Done\")}>Done</CBadge>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n              <form>\n                <div className=\"text-center search-input\">\n                  <input\n                    type=\"search\"\n                    className=\"form-control\"\n                    placeholder=\"Search\"\n                    required\n                  />\n                </div>\n              </form>\n            </CCardHeader>\n            <Table responsive>\n              <thead>\n                <th className=\"text-nowrap \">My Hard Skills</th>\n\n                <th>My Soft Skills</th>\n                <th>Required Hard Skills</th>\n\n                <th>Required Soft Skills</th>\n              </thead>\n            </Table>\n          </CCardBody>\n        </CCollapse>\n      </CCard>\n      <CCard className=\"mb-0\">\n        <CCardHeader id=\"headingTwo\">\n          <CButton\n            block\n            color=\"link\"\n            className=\"text-left m-0 p-0\"\n            onClick={() => setAccordion(accordion === 1 ? null : 1)}\n          >\n            <h5 className=\"m-0 p-0\">Learning Platforms</h5>\n          </CButton>\n        </CCardHeader>\n        <CCollapse show={accordion === 1}>\n          <CCardBody>\n            <CCardHeader>\n              <table className=\"table\">\n                <tbody>\n                  <tr>\n                    <td>Status</td>\n                    <td>\n                      {\" \"}\n                      <CBadge color={getBadge(\"Done\")}>Done</CBadge>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n              <form>\n                <div className=\"text-center search-input\">\n                  <input\n                    type=\"search\"\n                    className=\"form-control\"\n                    placeholder=\"Search\"\n                    required\n                  />\n                </div>\n              </form>\n            </CCardHeader>\n            <Table responsive>\n              <thead>\n                <th className=\"text-nowrap \">Skills</th>\n\n                <th>Platform Name</th>\n                <th>Course Topic</th>\n                <th>Course Type</th>\n              </thead>\n            </Table>\n          </CCardBody>\n        </CCollapse>\n      </CCard>\n      <CCard className=\"mb-0\">\n        <CCardHeader id=\"headingThree\">\n          <CButton\n            block\n            color=\"link\"\n            className=\"text-left m-0 p-0\"\n            onClick={() => setAccordion(accordion === 2 ? null : 2)}\n          >\n            <h5 className=\"m-0 p-0\">Experimental Learning</h5>\n          </CButton>\n        </CCardHeader>\n        <CCollapse show={accordion === 2}>\n          <CCardBody>\n            <CCardHeader>\n              <table className=\"table\">\n                <tbody>\n                  <tr>\n                    <td>Status</td>\n                    <td>\n                      {\" \"}\n                      <CBadge color={getBadge(\"Done\")}>Done</CBadge>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n              <form>\n                <div className=\"text-center search-input\">\n                  <input\n                    type=\"search\"\n                    className=\"form-control\"\n                    placeholder=\"Search\"\n                    required\n                  />\n                </div>\n              </form>\n            </CCardHeader>\n            <Table responsive>\n              <thead>\n                <th className=\"text-nowrap \">Skills</th>\n\n                <th>Organization</th>\n                <th>Role</th>\n                <th>Role Type</th>\n              </thead>\n            </Table>\n          </CCardBody>\n        </CCollapse>\n      </CCard>\n    </div>\n  );\n};\nexport default Learn;\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/planner/Apply.js",["285","286","287","288","289","290","291","292","293","294"],"import React, { useState } from \"react\";\nimport Loader from \"../../../loader\";\nimport {\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CBadge,\n  CTabs,\n  CNavItem,\n  CNavLink,\n  CNav,\n  CTabContent,\n  CTabPane,\n  CButton,\n  CCollapse,\n} from \"@coreui/react\";\nimport { Table } from \"reactstrap\";\nconst Apply = (props) => {\n  const [accordion, setAccordion] = useState(1);\n  return (\n    <div id=\"accordion\">\n      <CCard className=\"mb-0\">\n        <CCardHeader id=\"headingOne\">\n          <CButton\n            block\n            color=\"link\"\n            className=\"text-left m-0 p-0\"\n            onClick={() => setAccordion(accordion === 0 ? null : 0)}\n          >\n            <h5 className=\"m-0 p-0\">Job Application Tracker</h5>\n          </CButton>\n        </CCardHeader>\n        <CCollapse show={accordion === 0}>\n          <CCardBody>\n            <CCardHeader>\n              <table className=\"table\">\n                <tbody>\n                  <tr>\n                    <td>Status</td>\n                    <td>Done</td>\n                  </tr>\n                </tbody>\n              </table>\n              <form>\n                <div className=\"text-center search-input\">\n                  <input\n                    type=\"search\"\n                    className=\"form-control\"\n                    placeholder=\"Search\"\n                    required\n                  />\n                </div>\n              </form>\n            </CCardHeader>\n            <Table responsive>\n              <thead>\n                <th className=\"text-nowrap \">Company</th>\n\n                <th>Position</th>\n                <th>Location</th>\n\n                <th>Application Deadline</th>\n                <th>Date Applied</th>\n                <th>Job Post URL</th>\n              </thead>\n            </Table>\n          </CCardBody>\n        </CCollapse>\n      </CCard>\n    </div>\n  );\n};\nexport default Apply;\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/planner/Prepare.js",["295","296","297","298","299","300","301","302","303","304"],"import React, { useState } from \"react\";\nimport Loader from \"../../../loader\";\nimport {\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CBadge,\n  CTabs,\n  CNavItem,\n  CNavLink,\n  CNav,\n  CTabContent,\n  CTabPane,\n  CButton,\n  CCollapse,\n} from \"@coreui/react\";\nimport { Table } from \"reactstrap\";\nconst Prepare = (props) => {\n  const [accordion, setAccordion] = useState(1);\n  return (\n    <div id=\"accordion\">\n      <CCard className=\"mb-0\">\n        <CCardHeader id=\"headingOne\">\n          <CButton\n            block\n            color=\"link\"\n            className=\"text-left m-0 p-0\"\n            onClick={() => setAccordion(accordion === 0 ? null : 0)}\n          >\n            <h5 className=\"m-0 p-0\">Job Application Prep</h5>\n          </CButton>\n        </CCardHeader>\n        <CCollapse show={accordion === 0}>\n          <CCardBody>\n            <CCardHeader>\n              <table className=\"table\">\n                <tbody>\n                  <tr>\n                    <td>Status</td>\n                    <td>Done</td>\n                  </tr>\n                </tbody>\n              </table>\n              <form>\n                <div className=\"text-center search-input\">\n                  <input\n                    type=\"search\"\n                    className=\"form-control\"\n                    placeholder=\"Search\"\n                    required\n                  />\n                </div>\n              </form>\n            </CCardHeader>\n            <table className=\"table\">\n              <tbody>\n                <tr>\n                  <td>Resume</td>\n                </tr>\n                <tr>\n                  <td>Cover Letter Template</td>\n                </tr>\n                <tr>\n                  <td>Portfolio / Work Sample</td>\n                </tr>\n                <tr>\n                  <td>Video Profile</td>\n                </tr>\n                <tr>\n                  <td>LinkedIn Profile</td>\n                </tr>\n              </tbody>\n            </table>\n          </CCardBody>\n        </CCollapse>\n      </CCard>\n      <CCard className=\"mb-0\">\n        <CCardHeader id=\"headingTwo\">\n          <CButton\n            block\n            color=\"link\"\n            className=\"text-left m-0 p-0\"\n            onClick={() => setAccordion(accordion === 1 ? null : 1)}\n          >\n            <h5 className=\"m-0 p-0\">Interview Prep</h5>\n          </CButton>\n        </CCardHeader>\n        <CCollapse show={accordion === 1}>\n          <CCardBody>\n            <CCardHeader>\n              <table className=\"table\">\n                <tbody>\n                  <tr>\n                    <td>Status</td>\n                    <td>Done</td>\n                  </tr>\n                </tbody>\n              </table>\n              <form>\n                <div className=\"text-center search-input\">\n                  <input\n                    type=\"search\"\n                    className=\"form-control\"\n                    placeholder=\"Search\"\n                    required\n                  />\n                </div>\n              </form>\n            </CCardHeader>\n            <Table responsive>\n              <thead>\n                <th className=\"text-nowrap \">Topic</th>\n\n                <th>Description</th>\n                <th>Sample Question</th>\n                <th>Talking Points</th>\n              </thead>\n            </Table>\n          </CCardBody>\n        </CCollapse>\n      </CCard>\n    </div>\n  );\n};\nexport default Prepare;\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/planner/Planner.js",[],{"ruleId":"305","replacedBy":"306"},{"ruleId":"307","replacedBy":"308"},{"ruleId":"309","severity":1,"message":"310","line":28,"column":1,"nodeType":"311","endLine":28,"endColumn":37},{"ruleId":"312","severity":1,"message":"313","line":167,"column":29,"nodeType":"314","endLine":167,"endColumn":50},{"ruleId":"315","severity":1,"message":"316","line":1,"column":17,"nodeType":"317","messageId":"318","endLine":1,"endColumn":25},{"ruleId":"319","severity":1,"message":"320","line":90,"column":6,"nodeType":"321","endLine":90,"endColumn":14,"suggestions":"322"},{"ruleId":"323","severity":1,"message":"324","line":180,"column":31,"nodeType":"325","endLine":180,"endColumn":66},{"ruleId":"323","severity":1,"message":"324","line":190,"column":31,"nodeType":"325","endLine":190,"endColumn":68},{"ruleId":"319","severity":1,"message":"326","line":54,"column":6,"nodeType":"321","endLine":54,"endColumn":14,"suggestions":"327"},{"ruleId":"319","severity":1,"message":"328","line":108,"column":6,"nodeType":"321","endLine":108,"endColumn":14,"suggestions":"329"},{"ruleId":"323","severity":1,"message":"324","line":213,"column":31,"nodeType":"325","endLine":213,"endColumn":66},{"ruleId":"323","severity":1,"message":"324","line":225,"column":31,"nodeType":"325","endLine":225,"endColumn":68},{"ruleId":"323","severity":1,"message":"324","line":239,"column":35,"nodeType":"325","endLine":239,"endColumn":76},{"ruleId":"323","severity":1,"message":"324","line":257,"column":35,"nodeType":"325","endLine":257,"endColumn":74},{"ruleId":"315","severity":1,"message":"330","line":1,"column":38,"nodeType":"317","messageId":"318","endLine":1,"endColumn":46},{"ruleId":"315","severity":1,"message":"331","line":7,"column":3,"nodeType":"317","messageId":"318","endLine":7,"endColumn":14},{"ruleId":"319","severity":1,"message":"332","line":41,"column":6,"nodeType":"321","endLine":41,"endColumn":8,"suggestions":"333"},{"ruleId":"334","severity":1,"message":"335","line":489,"column":62,"nodeType":"336","messageId":"337","endLine":489,"endColumn":63,"suggestions":"338"},{"ruleId":"334","severity":1,"message":"335","line":489,"column":105,"nodeType":"336","messageId":"337","endLine":489,"endColumn":106,"suggestions":"339"},{"ruleId":"315","severity":1,"message":"340","line":806,"column":7,"nodeType":"317","messageId":"318","endLine":806,"endColumn":19},{"ruleId":"323","severity":1,"message":"324","line":825,"column":17,"nodeType":"325","endLine":825,"endColumn":57},{"ruleId":"312","severity":1,"message":"313","line":941,"column":25,"nodeType":"314","endLine":941,"endColumn":39},{"ruleId":"323","severity":1,"message":"324","line":1138,"column":27,"nodeType":"325","endLine":1138,"endColumn":61},{"ruleId":"323","severity":1,"message":"324","line":1162,"column":33,"nodeType":"325","endLine":1162,"endColumn":70},{"ruleId":"334","severity":1,"message":"335","line":299,"column":62,"nodeType":"336","messageId":"337","endLine":299,"endColumn":63,"suggestions":"341"},{"ruleId":"334","severity":1,"message":"335","line":299,"column":105,"nodeType":"336","messageId":"337","endLine":299,"endColumn":106,"suggestions":"342"},{"ruleId":"323","severity":1,"message":"324","line":682,"column":17,"nodeType":"325","endLine":682,"endColumn":57},{"ruleId":"323","severity":1,"message":"324","line":722,"column":25,"nodeType":"325","endLine":725,"endColumn":27},{"ruleId":"323","severity":1,"message":"324","line":851,"column":25,"nodeType":"325","endLine":851,"endColumn":59},{"ruleId":"323","severity":1,"message":"324","line":877,"column":31,"nodeType":"325","endLine":877,"endColumn":68},{"ruleId":"323","severity":1,"message":"324","line":889,"column":25,"nodeType":"325","endLine":889,"endColumn":59},{"ruleId":"323","severity":1,"message":"324","line":915,"column":31,"nodeType":"325","endLine":915,"endColumn":68},{"ruleId":"323","severity":1,"message":"324","line":934,"column":25,"nodeType":"325","endLine":934,"endColumn":59},{"ruleId":"323","severity":1,"message":"324","line":961,"column":31,"nodeType":"325","endLine":961,"endColumn":68},{"ruleId":"309","severity":1,"message":"343","line":3,"column":1,"nodeType":"311","endLine":14,"endColumn":3},{"ruleId":"344","severity":1,"message":"345","line":8,"column":20,"nodeType":"346","messageId":"347","endLine":8,"endColumn":22},{"ruleId":"319","severity":1,"message":"332","line":26,"column":6,"nodeType":"321","endLine":26,"endColumn":8,"suggestions":"348"},{"ruleId":"305","replacedBy":"349"},{"ruleId":"307","replacedBy":"350"},{"ruleId":"309","severity":1,"message":"343","line":4,"column":1,"nodeType":"311","endLine":19,"endColumn":3},{"ruleId":"315","severity":1,"message":"331","line":5,"column":3,"nodeType":"317","messageId":"318","endLine":5,"endColumn":14},{"ruleId":"319","severity":1,"message":"332","line":39,"column":6,"nodeType":"321","endLine":39,"endColumn":8,"suggestions":"351"},{"ruleId":"315","severity":1,"message":"352","line":2,"column":8,"nodeType":"317","messageId":"318","endLine":2,"endColumn":14},{"ruleId":"315","severity":1,"message":"352","line":2,"column":8,"nodeType":"317","messageId":"318","endLine":2,"endColumn":14},{"ruleId":"315","severity":1,"message":"353","line":7,"column":3,"nodeType":"317","messageId":"318","endLine":7,"endColumn":7},{"ruleId":"315","severity":1,"message":"354","line":8,"column":3,"nodeType":"317","messageId":"318","endLine":8,"endColumn":7},{"ruleId":"315","severity":1,"message":"355","line":10,"column":3,"nodeType":"317","messageId":"318","endLine":10,"endColumn":8},{"ruleId":"315","severity":1,"message":"356","line":11,"column":3,"nodeType":"317","messageId":"318","endLine":11,"endColumn":11},{"ruleId":"315","severity":1,"message":"357","line":12,"column":3,"nodeType":"317","messageId":"318","endLine":12,"endColumn":11},{"ruleId":"315","severity":1,"message":"358","line":13,"column":3,"nodeType":"317","messageId":"318","endLine":13,"endColumn":7},{"ruleId":"315","severity":1,"message":"359","line":14,"column":3,"nodeType":"317","messageId":"318","endLine":14,"endColumn":14},{"ruleId":"315","severity":1,"message":"360","line":15,"column":3,"nodeType":"317","messageId":"318","endLine":15,"endColumn":11},{"ruleId":"315","severity":1,"message":"352","line":2,"column":8,"nodeType":"317","messageId":"318","endLine":2,"endColumn":14},{"ruleId":"315","severity":1,"message":"353","line":7,"column":3,"nodeType":"317","messageId":"318","endLine":7,"endColumn":7},{"ruleId":"315","severity":1,"message":"354","line":8,"column":3,"nodeType":"317","messageId":"318","endLine":8,"endColumn":7},{"ruleId":"315","severity":1,"message":"355","line":10,"column":3,"nodeType":"317","messageId":"318","endLine":10,"endColumn":8},{"ruleId":"315","severity":1,"message":"356","line":11,"column":3,"nodeType":"317","messageId":"318","endLine":11,"endColumn":11},{"ruleId":"315","severity":1,"message":"357","line":12,"column":3,"nodeType":"317","messageId":"318","endLine":12,"endColumn":11},{"ruleId":"315","severity":1,"message":"358","line":13,"column":3,"nodeType":"317","messageId":"318","endLine":13,"endColumn":7},{"ruleId":"315","severity":1,"message":"359","line":14,"column":3,"nodeType":"317","messageId":"318","endLine":14,"endColumn":14},{"ruleId":"315","severity":1,"message":"360","line":15,"column":3,"nodeType":"317","messageId":"318","endLine":15,"endColumn":11},{"ruleId":"315","severity":1,"message":"352","line":2,"column":8,"nodeType":"317","messageId":"318","endLine":2,"endColumn":14},{"ruleId":"315","severity":1,"message":"353","line":7,"column":3,"nodeType":"317","messageId":"318","endLine":7,"endColumn":7},{"ruleId":"315","severity":1,"message":"354","line":8,"column":3,"nodeType":"317","messageId":"318","endLine":8,"endColumn":7},{"ruleId":"315","severity":1,"message":"355","line":10,"column":3,"nodeType":"317","messageId":"318","endLine":10,"endColumn":8},{"ruleId":"315","severity":1,"message":"356","line":11,"column":3,"nodeType":"317","messageId":"318","endLine":11,"endColumn":11},{"ruleId":"315","severity":1,"message":"357","line":12,"column":3,"nodeType":"317","messageId":"318","endLine":12,"endColumn":11},{"ruleId":"315","severity":1,"message":"358","line":13,"column":3,"nodeType":"317","messageId":"318","endLine":13,"endColumn":7},{"ruleId":"315","severity":1,"message":"359","line":14,"column":3,"nodeType":"317","messageId":"318","endLine":14,"endColumn":14},{"ruleId":"315","severity":1,"message":"360","line":15,"column":3,"nodeType":"317","messageId":"318","endLine":15,"endColumn":11},{"ruleId":"315","severity":1,"message":"352","line":2,"column":8,"nodeType":"317","messageId":"318","endLine":2,"endColumn":14},{"ruleId":"315","severity":1,"message":"353","line":7,"column":3,"nodeType":"317","messageId":"318","endLine":7,"endColumn":7},{"ruleId":"315","severity":1,"message":"354","line":8,"column":3,"nodeType":"317","messageId":"318","endLine":8,"endColumn":7},{"ruleId":"315","severity":1,"message":"361","line":9,"column":3,"nodeType":"317","messageId":"318","endLine":9,"endColumn":9},{"ruleId":"315","severity":1,"message":"355","line":10,"column":3,"nodeType":"317","messageId":"318","endLine":10,"endColumn":8},{"ruleId":"315","severity":1,"message":"356","line":11,"column":3,"nodeType":"317","messageId":"318","endLine":11,"endColumn":11},{"ruleId":"315","severity":1,"message":"357","line":12,"column":3,"nodeType":"317","messageId":"318","endLine":12,"endColumn":11},{"ruleId":"315","severity":1,"message":"358","line":13,"column":3,"nodeType":"317","messageId":"318","endLine":13,"endColumn":7},{"ruleId":"315","severity":1,"message":"359","line":14,"column":3,"nodeType":"317","messageId":"318","endLine":14,"endColumn":14},{"ruleId":"315","severity":1,"message":"360","line":15,"column":3,"nodeType":"317","messageId":"318","endLine":15,"endColumn":11},{"ruleId":"315","severity":1,"message":"352","line":2,"column":8,"nodeType":"317","messageId":"318","endLine":2,"endColumn":14},{"ruleId":"315","severity":1,"message":"353","line":7,"column":3,"nodeType":"317","messageId":"318","endLine":7,"endColumn":7},{"ruleId":"315","severity":1,"message":"354","line":8,"column":3,"nodeType":"317","messageId":"318","endLine":8,"endColumn":7},{"ruleId":"315","severity":1,"message":"361","line":9,"column":3,"nodeType":"317","messageId":"318","endLine":9,"endColumn":9},{"ruleId":"315","severity":1,"message":"355","line":10,"column":3,"nodeType":"317","messageId":"318","endLine":10,"endColumn":8},{"ruleId":"315","severity":1,"message":"356","line":11,"column":3,"nodeType":"317","messageId":"318","endLine":11,"endColumn":11},{"ruleId":"315","severity":1,"message":"357","line":12,"column":3,"nodeType":"317","messageId":"318","endLine":12,"endColumn":11},{"ruleId":"315","severity":1,"message":"358","line":13,"column":3,"nodeType":"317","messageId":"318","endLine":13,"endColumn":7},{"ruleId":"315","severity":1,"message":"359","line":14,"column":3,"nodeType":"317","messageId":"318","endLine":14,"endColumn":14},{"ruleId":"315","severity":1,"message":"360","line":15,"column":3,"nodeType":"317","messageId":"318","endLine":15,"endColumn":11},"no-native-reassign",["362"],"no-negated-in-lhs",["363"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'callApiToFetchAllResources'. Either include it or remove the dependency array.","ArrayExpression",["364"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'callApiToFetchAllUsers'. Either include it or remove the dependency array.",["365"],"React Hook useEffect has a missing dependency: 'callApiToFetchAllExperts'. Either include it or remove the dependency array.",["366"],"'Fragment' is defined but never used.","'CCardHeader' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'props'. Either include them or remove the dependency array.",["367"],"no-useless-escape","Unnecessary escape character: \\+.","Literal","unnecessaryEscape",["368","369"],["370","371"],"'selectedDate' is assigned a value but never used.",["372","373"],["374","375"],"Assign arrow function to a variable before exporting as module default","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected",["376"],["362"],["363"],["377"],"'Loader' is defined but never used.","'CCol' is defined but never used.","'CRow' is defined but never used.","'CTabs' is defined but never used.","'CNavItem' is defined but never used.","'CNavLink' is defined but never used.","'CNav' is defined but never used.","'CTabContent' is defined but never used.","'CTabPane' is defined but never used.","'CBadge' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"378","fix":"379"},{"desc":"380","fix":"381"},{"desc":"382","fix":"383"},{"desc":"384","fix":"385"},{"messageId":"386","fix":"387","desc":"388"},{"messageId":"389","fix":"390","desc":"391"},{"messageId":"386","fix":"392","desc":"388"},{"messageId":"389","fix":"393","desc":"391"},{"messageId":"386","fix":"394","desc":"388"},{"messageId":"389","fix":"395","desc":"391"},{"messageId":"386","fix":"396","desc":"388"},{"messageId":"389","fix":"397","desc":"391"},{"desc":"384","fix":"398"},{"desc":"384","fix":"399"},"Update the dependencies array to be: [callApiToFetchAllResources, search]",{"range":"400","text":"401"},"Update the dependencies array to be: [callApiToFetchAllUsers, search]",{"range":"402","text":"403"},"Update the dependencies array to be: [callApiToFetchAllExperts, search]",{"range":"404","text":"405"},"Update the dependencies array to be: [dispatch, props]",{"range":"406","text":"407"},"removeEscape",{"range":"408","text":"409"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"410","text":"411"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"412","text":"409"},{"range":"413","text":"411"},{"range":"414","text":"409"},{"range":"415","text":"411"},{"range":"416","text":"409"},{"range":"417","text":"411"},{"range":"418","text":"407"},{"range":"419","text":"407"},[2884,2892],"[callApiToFetchAllResources, search]",[1798,1806],"[callApiToFetchAllUsers, search]",[3412,3420],"[callApiToFetchAllExperts, search]",[953,955],"[dispatch, props]",[11004,11005],"",[11004,11004],"\\",[11047,11048],[11047,11047],[7055,7056],[7055,7055],[7098,7099],[7098,7098],[817,819],[914,916]]