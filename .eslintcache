[{"/Volumes/DATA/Isha Kansal/reactjs/pivot-admin/src/index.js":"1","/Volumes/DATA/Isha Kansal/reactjs/pivot-admin/src/App.js":"2","/Volumes/DATA/Isha Kansal/reactjs/pivot-admin/src/reportWebVitals.js":"3","/Volumes/DATA/Isha Kansal/pivot-admin/src/index.js":"4","/Volumes/DATA/Isha Kansal/pivot-admin/src/App.js":"5","/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/TheLayout.js":"6","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/login/Login.js":"7","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/experts/AddExpert.js":"8","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/resources/AddResource.js":"9","/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/index.js":"10","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/experts/ExpertsFieldsData.js":"11","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/resources/ResourcesFieldsData.js":"12","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/store/action.js":"13","/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/TheContent.js":"14","/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/TheHeaderDropdown.js":"15","/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/TheHeader.js":"16","/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/TheSidebar.js":"17","/Volumes/DATA/Isha Kansal/pivot-admin/src/loader/index.js":"18","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/store/types.js":"19","/Volumes/DATA/Isha Kansal/pivot-admin/src/routes.js":"20","/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/logo.js":"21","/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/_nav.js":"22","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/resources/Resource.js":"23","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/experts/Experts.js":"24","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/experts/Expert.js":"25","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/resources/Resources.js":"26","/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/icons.js":"27","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/Users.js":"28","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/User.js":"29","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/planner/Planner.js":"30","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/UserPlanner.js":"31","/Volumes/DATA/Isha Kansal/pivot-admin/src/common/toolTip.js":"32","/Volumes/DATA/Isha Kansal/pivot-admin/src/common/commonModal.js":"33","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/planner/Network.js":"34","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/planner/Explore.js":"35","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/planner/Prepare.js":"36","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/planner/Apply.js":"37","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/planner/Learn.js":"38","/Volumes/DATA/Isha Kansal/pivot-admin/src/store/index.js":"39","/Volumes/DATA/Isha Kansal/pivot-admin/src/serviceWorker.js":"40","/Volumes/DATA/Isha Kansal/pivot-admin/src/store/sagas/index.js":"41","/Volumes/DATA/Isha Kansal/pivot-admin/src/store/reducers/index.js":"42","/Volumes/DATA/Isha Kansal/pivot-admin/src/polyfill.js":"43","/Volumes/DATA/Isha Kansal/pivot-admin/src/assets/icons/index.js":"44","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/store/reducer.js":"45","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/store/sagas.js":"46","/Volumes/DATA/Isha Kansal/pivot-admin/src/common/axios.js":"47","/Volumes/DATA/Isha Kansal/pivot-admin/src/config.js":"48"},{"size":500,"mtime":1612329326000,"results":"49","hashOfConfig":"50"},{"size":195,"mtime":1612330254000,"results":"51","hashOfConfig":"50"},{"size":362,"mtime":1612329326000,"results":"52","hashOfConfig":"50"},{"size":933,"mtime":1614839323000,"results":"53","hashOfConfig":"54"},{"size":2079,"mtime":1614839323000,"results":"55","hashOfConfig":"54"},{"size":837,"mtime":1614839323000,"results":"56","hashOfConfig":"54"},{"size":6087,"mtime":1614842675000,"results":"57","hashOfConfig":"54"},{"size":37818,"mtime":1614938966000,"results":"58","hashOfConfig":"54"},{"size":29002,"mtime":1614839323000,"results":"59","hashOfConfig":"54"},{"size":284,"mtime":1614839323000,"results":"60","hashOfConfig":"54"},{"size":13303,"mtime":1614923745000,"results":"61","hashOfConfig":"54"},{"size":1485,"mtime":1614839323000,"results":"62","hashOfConfig":"54"},{"size":3035,"mtime":1614839323000,"results":"63","hashOfConfig":"54"},{"size":1834,"mtime":1614842674000,"results":"64","hashOfConfig":"54"},{"size":492,"mtime":1614839323000,"results":"65","hashOfConfig":"54"},{"size":1169,"mtime":1614839323000,"results":"66","hashOfConfig":"54"},{"size":1109,"mtime":1614839323000,"results":"67","hashOfConfig":"54"},{"size":340,"mtime":1614839323000,"results":"68","hashOfConfig":"54"},{"size":3158,"mtime":1614839323000,"results":"69","hashOfConfig":"54"},{"size":1693,"mtime":1614839323000,"results":"70","hashOfConfig":"54"},{"size":9997,"mtime":1614839323000,"results":"71","hashOfConfig":"54"},{"size":668,"mtime":1614839323000,"results":"72","hashOfConfig":"54"},{"size":5564,"mtime":1614839323000,"results":"73","hashOfConfig":"54"},{"size":11139,"mtime":1614842674000,"results":"74","hashOfConfig":"54"},{"size":10176,"mtime":1614928904000,"results":"75","hashOfConfig":"54"},{"size":8343,"mtime":1614842355000,"results":"76","hashOfConfig":"54"},{"size":7216,"mtime":1614839323000,"results":"77","hashOfConfig":"54"},{"size":8955,"mtime":1614842266000,"results":"78","hashOfConfig":"54"},{"size":8638,"mtime":1614839323000,"results":"79","hashOfConfig":"54"},{"size":706,"mtime":1614839323000,"results":"80","hashOfConfig":"54"},{"size":1846,"mtime":1614839323000,"results":"81","hashOfConfig":"54"},{"size":424,"mtime":1614839323000,"results":"82","hashOfConfig":"54"},{"size":1918,"mtime":1614839323000,"results":"83","hashOfConfig":"54"},{"size":6940,"mtime":1614839323000,"results":"84","hashOfConfig":"54"},{"size":8069,"mtime":1614839323000,"results":"85","hashOfConfig":"54"},{"size":3985,"mtime":1614839323000,"results":"86","hashOfConfig":"54"},{"size":2327,"mtime":1614839323000,"results":"87","hashOfConfig":"54"},{"size":5187,"mtime":1614839323000,"results":"88","hashOfConfig":"54"},{"size":774,"mtime":1614839323000,"results":"89","hashOfConfig":"54"},{"size":4686,"mtime":1614839323000,"results":"90","hashOfConfig":"54"},{"size":179,"mtime":1614839323000,"results":"91","hashOfConfig":"54"},{"size":186,"mtime":1614839323000,"results":"92","hashOfConfig":"54"},{"size":1895,"mtime":1614839323000,"results":"93","hashOfConfig":"54"},{"size":3924,"mtime":1614839323000,"results":"94","hashOfConfig":"54"},{"size":7013,"mtime":1614839323000,"results":"95","hashOfConfig":"54"},{"size":10085,"mtime":1614839323000,"results":"96","hashOfConfig":"54"},{"size":1357,"mtime":1614842674000,"results":"97","hashOfConfig":"54"},{"size":173,"mtime":1614839323000,"results":"98","hashOfConfig":"54"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"161ocxv",{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},"z7vibx",{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"107"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"117","messages":"118","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"107"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"107"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"107"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"107"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"107"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"107"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"107"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"107"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"107"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"107"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"107"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"107"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"107"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"107"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"107"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"107"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"107"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"107"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},"/Volumes/DATA/Isha Kansal/reactjs/pivot-admin/src/index.js",[],"/Volumes/DATA/Isha Kansal/reactjs/pivot-admin/src/App.js",[],"/Volumes/DATA/Isha Kansal/reactjs/pivot-admin/src/reportWebVitals.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/index.js",[],["215","216"],"/Volumes/DATA/Isha Kansal/pivot-admin/src/App.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/TheLayout.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/views/login/Login.js",["217"],"import React, { Component } from \"react\";\n\nimport { NotificationManager } from \"react-notifications\";\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardGroup,\n  CCol,\n  CContainer,\n  CForm,\n  CInput,\n  CInputGroup,\n  CInputGroupPrepend,\n  CInputGroupText,\n  CRow,\n} from \"@coreui/react\";\nimport Loader from \"../../loader\";\nimport { FormText } from \"reactstrap\";\nimport CIcon from \"@coreui/icons-react\";\nimport { loginByAdmin, setToken } from \"../store/action\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { withRouter } from \"react-router-dom\";\nclass Login extends Component {\n  constructor(props) {\n    super();\n    this.state = {\n      name: \"\",\n      password: \"\",\n      errorText: \"\",\n      errorType: \"\",\n\n      loading: false,\n    };\n  }\n  handleChange = (e, type) => {\n    e.preventDefault();\n    this.setState({\n      [type]: e.target.value,\n      errorText: \"\",\n      errorType: \"\",\n    });\n  };\n  onHandleSubmit = (e) => {\n    e && e.preventDefault();\n\n    const { name, password } = this.state;\n    if (name === \"\") {\n      this.setState({ errorText: \"Name can not be empty\", errorType: \"name\" });\n    } else if (password === \"\") {\n      this.setState({\n        errorText: \"Password can not be empty\",\n        errorType: \"password\",\n      });\n    } else this.authenticateAdmin();\n  };\n  authenticateAdmin = () => {\n    const { name, password } = this.state;\n    this.setState({\n      loading: true,\n    });\n    let formData = {\n      email: name,\n      password: password,\n    };\n\n    this.props.loginByAdmin(\"user/login\", formData, (value) => {\n      this.setState({\n        loading: false,\n      });\n\n      if (value.status === 200) {\n        // this.props.setToken(value.data.user.auth_token);\n        localStorage.setItem(\"auth_token\", value.data.user.auth_token);\n        NotificationManager.success(\"Login Successfully\", \"\", 1000);\n\n        localStorage.setItem(\"isLoggedIn\", true);\n\n        this.props.history.push(\"/users\");\n      } else {\n        NotificationManager.error(\"Please enter valid credentials\", \"\", 1000);\n        this.setState({\n          name: \"\",\n          password: \"\",\n        });\n      }\n    });\n  };\n  onKeyDown = (e) => {\n    if (e.key === \"Enter\") {\n      e.preventDefault();\n\n      this.onHandleSubmit();\n    }\n  };\n  render() {\n    const { errorText, errorType, loading, name, password } = this.state;\n\n    return (\n      <div className=\"c-app c-default-layout flex-row align-items-center\">\n        <CContainer>\n          <CRow className=\"justify-content-center\">\n            <CCol md=\"8\">\n              <CCardGroup className=\"position-relative\">\n                {loading && <Loader />}\n\n                <CCard className=\"p-4\">\n                  <CCardBody>\n                    <CForm onKeyDown={(e) => this.onKeyDown(e)}>\n                      <h1>Login</h1>\n                      <p className=\"text-muted\">Sign In to your account</p>\n                      <div className=\"mb-3\">\n                        <CInputGroup>\n                          <CInputGroupPrepend>\n                            <CInputGroupText>\n                              <CIcon name=\"cil-user\" />\n                            </CInputGroupText>\n                          </CInputGroupPrepend>\n                          <CInput\n                            type=\"text\"\n                            placeholder=\"Username\"\n                            autoComplete=\"username\"\n                            onChange={(e) => this.handleChange(e, \"name\")}\n                            value={name}\n                          />\n                        </CInputGroup>\n                        <p className=\"mb-0\">\n                          {errorType === \"name\" && (\n                            <FormText color=\"danger\" className=\"error\">\n                              {errorText}\n                            </FormText>\n                          )}\n                        </p>\n                      </div>\n                      <div className=\"mb-4\">\n                        <CInputGroup>\n                          <CInputGroupPrepend>\n                            <CInputGroupText>\n                              <CIcon name=\"cil-lock-locked\" />\n                            </CInputGroupText>\n                          </CInputGroupPrepend>\n                          <CInput\n                            type=\"password\"\n                            placeholder=\"Password\"\n                            autoComplete=\"current-password\"\n                            onChange={(e) => this.handleChange(e, \"password\")}\n                            value={password}\n                          />\n                        </CInputGroup>\n                        <p className=\"mb-0\">\n                          {\" \"}\n                          {errorType === \"password\" && (\n                            <FormText color=\"danger\" className=\"error\">\n                              {errorText}\n                            </FormText>\n                          )}\n                        </p>\n                      </div>\n\n                      <CRow>\n                        <CCol xs=\"6\">\n                          <CButton\n                            color=\"primary\"\n                            className=\"px-4\"\n                            onClick={this.onHandleSubmit}\n                            disabled={loading}\n                            className=\"login-btn\"\n                          >\n                            Login\n                          </CButton>\n                        </CCol>\n                      </CRow>\n                    </CForm>\n                  </CCardBody>\n                </CCard>\n              </CCardGroup>\n            </CCol>\n          </CRow>\n        </CContainer>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    saveToken: state.LoginAndNavigationReducer.saveToken,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return bindActionCreators(\n    {\n      loginByAdmin,\n      setToken,\n    },\n    dispatch\n  );\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Login));\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/experts/AddExpert.js",["218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233"],"/Volumes/DATA/Isha Kansal/pivot-admin/src/views/resources/AddResource.js",["234","235","236","237","238","239","240","241","242","243"],"import React, { Component } from \"react\";\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardFooter,\n  CCardHeader,\n  CCol,\n  CForm,\n  CFormGroup,\n  CTextarea,\n  CInput,\n  CLabel,\n  CRow,\n  CInputFile,\n} from \"@coreui/react\";\nimport { connect } from \"react-redux\";\nimport { NotificationManager } from \"react-notifications\";\nimport { bindActionCreators } from \"redux\";\nimport { withRouter } from \"react-router-dom\";\nimport Select from \"react-select\";\nimport {\n  addResource,\n  addImage,\n  setImage,\n  editResource,\n  fetchOneResource,\n} from \"../store/action\";\nimport Loader from \"../../loader\";\nimport {\n  optionsFormat,\n  optionsPricing,\n  optionsCategory,\n  optionsPace,\n} from \"./ResourcesFieldsData\";\n\nimport ADD from \"../../assets/icons/add.svg\";\nimport CANCEL from \"../../assets/icons/cancel.svg\";\n\nimport CIcon from \"@coreui/icons-react\";\n\nimport BackArrow from \"../../assets/icons/left-arrow.svg\";\nclass AddResource extends Component {\n  constructor(props) {\n    super();\n\n    this.state = {\n      name: \"\",\n      addPrice: \"\",\n      format: \"\",\n      pricing: \"\",\n      category: [],\n      uniqueSellingProposition: \"\",\n      errorType: \"\",\n      errorText: \"\",\n      resourceImage: \"\",\n      plusBit: false,\n      pros: [],\n      cons: [],\n      details: [],\n      pace: \"\",\n      websiteLink: \"\",\n      resourceData: {},\n      loadiing: false,\n    };\n  }\n  componentDidMount() {\n    const resource_id = this.props && this.props.match.params.id;\n\n    if (resource_id) {\n      this.setState({\n        loadiing: true,\n      });\n      this.props.fetchOneResource(`resource?id=${resource_id}`, (value) => {\n        const {\n          title,\n          resource_format,\n          price,\n          category,\n          pace,\n          website,\n          unique_selling_proposition,\n          pros,\n          cons,\n          info,\n          profile_pic,\n        } = value.data.resource;\n        const detailsData = info.map((el) => {\n          return { value: el };\n        });\n        const prosData = pros.map((el) => {\n          return { value: el };\n        });\n        const consData = cons.map((el) => {\n          return { value: el };\n        });\n        this.setState({\n          loadiing: false,\n          resourceData: value.data.resource,\n          name: title,\n          format: resource_format,\n          pricing: price,\n          category,\n          pace,\n          websiteLink: website,\n          uniqueSellingProposition: unique_selling_proposition,\n          pros: prosData,\n          cons: consData,\n          details: detailsData,\n          resourceImage: profile_pic,\n        });\n      });\n    }\n  }\n  uploadImage = (event) => {\n    this.clearError();\n\n    if (event.target.files && event.target.files[0]) {\n      var reader = new FileReader();\n\n      reader.onloadend = function () {\n        this.callApiAddImage((reader && reader.result) || \"\");\n      }.bind(this);\n      this.props.setImage(reader.result);\n      reader.readAsDataURL(event.target.files[0]);\n    }\n  };\n  errorShow = (type) => {\n    const { errorType, errorText } = this.state;\n    return errorType === type ? <p>{errorText}</p> : null;\n  };\n  clearError = () => {\n    this.setState({\n      errorType: \"\",\n      errorText: \"\",\n    });\n  };\n  inputHandler = (e) => {\n    this.clearError();\n    this.setState({ [e.target.name]: e.target.value });\n  };\n  inputProsCons = (e, index, type) => {\n    if (type === \"prosAdd\") {\n      let prosToUpdate = this.state.pros[index];\n      const newArray = [...this.state.pros];\n      prosToUpdate = {\n        ...prosToUpdate,\n        value: e.target.value,\n      };\n\n      newArray[index] = prosToUpdate;\n\n      this.clearError();\n      this.setState({ [e.target.name]: e.target.value, pros: newArray });\n    }\n    if (type === \"consAdd\") {\n      let consToUpdate = this.state.cons[index];\n      const newArray = [...this.state.cons];\n      consToUpdate = {\n        ...consToUpdate,\n        value: e.target.value,\n      };\n\n      newArray[index] = consToUpdate;\n\n      this.clearError();\n      this.setState({ [e.target.name]: e.target.value, cons: newArray });\n    }\n    if (type === \"detailsAdd\") {\n      let detailsToUpdate = this.state.details[index];\n      const newArray = [...this.state.details];\n      detailsToUpdate = {\n        ...detailsToUpdate,\n        value: e.target.value,\n      };\n\n      newArray[index] = detailsToUpdate;\n\n      this.clearError();\n      this.setState({ [e.target.name]: e.target.value, details: newArray });\n    }\n  };\n  onSubmit = (e) => {\n    const resource_id = this.props && this.props.match.params.id;\n\n    const {\n      name,\n      format,\n      pricing,\n      details,\n      uniqueSellingProposition,\n      pros,\n      cons,\n      category,\n      pace,\n      websiteLink,\n      addPrice,\n    } = this.state;\n\n    if (name === \"\") {\n      this.setState({\n        errorType: \"name\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Name should not be empty</b>\n          </span>\n        ),\n      });\n      return;\n    }\n    if (name !== \"\") {\n      let filter = /^[a-zA-Z0-9]+([-_\\s]{1}[a-zA-Z0-9]+)*$/;\n\n      if (!filter.test(name)) {\n        this.setState({\n          errorType: \"name\",\n          errorText: (\n            <span className=\"text-danger\">\n              <b>\n                {\" \"}\n                Name should be combination of alphanumeric text, underscore,\n                space and hyphen\n              </b>\n            </span>\n          ),\n        });\n        return;\n      }\n    }\n\n    if (format === \"\") {\n      this.setState({\n        errorType: \"format\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Select any format</b>\n          </span>\n        ),\n      });\n      return;\n    }\n    if (pricing === \"\") {\n      this.setState({\n        errorType: \"pricing\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Please enter type of pricing</b>\n          </span>\n        ),\n      });\n      return;\n    }\n    if (pricing === \"Others\" && addPrice === \"\") {\n      this.setState({\n        errorType: \"addPrice\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Please enter price</b>\n          </span>\n        ),\n      });\n      return;\n    }\n    if (category.length === 0) {\n      this.setState({\n        errorType: \"category\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Please enter category</b>\n          </span>\n        ),\n      });\n      return;\n    }\n    if (pace === \"\") {\n      this.setState({\n        errorType: \"pace\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Please enter pace</b>\n          </span>\n        ),\n      });\n      return;\n    }\n    if (websiteLink === \"\") {\n      this.setState({\n        errorType: \"websiteLink\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Please enter website link</b>\n          </span>\n        ),\n      });\n      return;\n    }\n\n    if (websiteLink !== \"\") {\n      let filter = /(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)/g;\n\n      if (!filter.test(websiteLink)) {\n        this.setState({\n          errorType: \"websiteLink\",\n          errorText: (\n            <span className=\"text-danger\">\n              <b> Please enter valid website link</b>\n            </span>\n          ),\n        });\n        return;\n      }\n    }\n\n    if (pros.length === 0) {\n      this.setState({\n        errorType: \"pros\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Please add some pros</b>\n          </span>\n        ),\n      });\n      return;\n    }\n    if (pros.length === 1 && pros[0].value === \"\") {\n      this.setState({\n        errorType: \"pros\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Please add some pros</b>\n          </span>\n        ),\n      });\n      return;\n    }\n    if (cons.length === 0) {\n      this.setState({\n        errorType: \"cons\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Please add some cons</b>\n          </span>\n        ),\n      });\n      return;\n    }\n    if (cons.length === 1 && cons[0].value === \"\") {\n      this.setState({\n        errorType: \"cons\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Please add some cons</b>\n          </span>\n        ),\n      });\n      return;\n    }\n    if (details.length === 0) {\n      this.setState({\n        errorType: \"details\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Please add some details</b>\n          </span>\n        ),\n      });\n      return;\n    }\n    if (details.length === 1 && details[0].value === \"\") {\n      this.setState({\n        errorType: \"details\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Please add some details</b>\n          </span>\n        ),\n      });\n      return;\n    }\n\n    if (uniqueSellingProposition === \"\") {\n      this.setState({\n        errorType: \"uniqueSellingProposition\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Please enter some information</b>\n          </span>\n        ),\n      });\n      return;\n    }\n\n    if (!resource_id) {\n      this.callApiAddResource();\n    } else {\n      this.callApiEditResource();\n    }\n  };\n  callApiAddImage = (base64) => {\n    this.setState({\n      loadiing: true,\n    });\n\n    let obj = {\n      base64,\n    };\n    this.props.addImage(\"common/upload-image\", obj, (value) => {\n      if (value.status === 200) {\n        this.setState({\n          resourceImage: value.data.url,\n          loadiing: false,\n        });\n        setImage(value.data.url);\n      }\n    });\n  };\n  callApiEditResource = () => {\n    const resource_id = this.props && this.props.match.params.id;\n    const {\n      name,\n      format,\n      pricing,\n      websiteLink,\n      category,\n      details,\n      pros,\n      cons,\n      uniqueSellingProposition,\n      pace,\n      addPrice,\n      resourceImage,\n    } = this.state;\n    let infodata = details.map((el) => {\n      return el.value;\n    });\n    let prosdata = pros.map((el) => {\n      return el.value;\n    });\n    let consdata = cons.map((el) => {\n      return el.value;\n    });\n    let obj = {\n      id: resource_id,\n      title: name,\n      format,\n      price: pricing === \"Others\" ? addPrice : pricing,\n      website: websiteLink,\n      category,\n      pros: prosdata,\n      cons: consdata,\n      info: infodata,\n      unique_selling_proposition: uniqueSellingProposition,\n      pace,\n    };\n    if (resourceImage) {\n      obj.profile_pic = resourceImage;\n    }\n\n    this.setState({\n      loadiing: true,\n    });\n    this.props.editResource(\"resource/update\", obj, (value) => {\n      if (value.status === 200) {\n        NotificationManager.success(\"Resource edit successfully\", \"\", 1000);\n        this.props.history.push(\"/resources\");\n        this.setState({\n          loadiing: false,\n        });\n      }\n    });\n  };\n  callApiAddResource = () => {\n    const {\n      name,\n      format,\n      pricing,\n      websiteLink,\n      category,\n      details,\n      pros,\n      cons,\n      uniqueSellingProposition,\n      pace,\n      addPrice,\n      resourceImage,\n    } = this.state;\n    let infodata = details.map((el) => {\n      return el.value;\n    });\n    let prosdata = pros.map((el) => {\n      return el.value;\n    });\n    let consdata = cons.map((el) => {\n      return el.value;\n    });\n    let obj = {\n      title: name,\n      format,\n      price: pricing === \"Others\" ? addPrice : pricing,\n      website: websiteLink,\n      category,\n      pros: prosdata,\n      cons: consdata,\n      info: infodata,\n      unique_selling_proposition: uniqueSellingProposition,\n      pace,\n    };\n    if (resourceImage) {\n      obj.profile_pic = resourceImage;\n    }\n\n    this.setState({\n      loadiing: true,\n    });\n    this.props.addResource(\"resource/create\", obj, (value) => {\n      if (value.status === 200) {\n        NotificationManager.success(\"Resource added successfully\", \"\", 1000);\n        this.props.history.push(\"/resources\");\n        this.setState({\n          loadiing: false,\n        });\n      }\n    });\n  };\n  resetState = (e) => {\n    e.preventDefault();\n    this.setState({\n      name: \"\",\n      format: \"\",\n      pricing: \"\",\n      category: [],\n      details: [],\n      pros: [],\n      cons: [],\n      resourceImage: \"\",\n      uniqueSellingProposition: \"\",\n      errorType: \"\",\n      errorText: \"\",\n      pace: \"\",\n      websiteLink: \"\",\n    });\n  };\n  handleBack = (e) => {\n    e.preventDefault();\n    this.props.history.push(\"/resources\");\n  };\n  handlePlusButton = (e, type) => {\n    if (type === \"prosAdd\") {\n      const { pros } = this.state;\n      const newArr = [...pros];\n      e.preventDefault();\n      e.stopPropagation();\n      let newPros = {\n        value: \"\",\n      };\n      newArr.push(newPros);\n      this.setState({\n        pros: newArr,\n      });\n    }\n    if (type === \"consAdd\") {\n      const { cons } = this.state;\n      const newArr = [...cons];\n      e.preventDefault();\n      e.stopPropagation();\n      let newCons = {\n        value: \"\",\n      };\n      newArr.push(newCons);\n      this.setState({\n        cons: newArr,\n      });\n    }\n    if (type === \"detailsAdd\") {\n      const { details } = this.state;\n      const newArr = [...details];\n      e.preventDefault();\n      e.stopPropagation();\n      let newDetails = {\n        value: \"\",\n      };\n      newArr.push(newDetails);\n      this.setState({\n        details: newArr,\n      });\n    }\n  };\n  handleCancel = (e, index, type) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (type === \"prosAdd\") {\n      const { pros } = this.state;\n\n      const newArr = [...pros];\n      newArr.splice(index, 1);\n      this.setState({\n        pros: newArr,\n      });\n    }\n    if (type === \"consAdd\") {\n      const { cons } = this.state;\n\n      const newArr = [...cons];\n      newArr.splice(index, 1);\n      this.setState({\n        cons: newArr,\n      });\n    }\n    if (type === \"detailsAdd\") {\n      const { details } = this.state;\n\n      const newArr = [...details];\n      newArr.splice(index, 1);\n      this.setState({\n        details: newArr,\n      });\n    }\n  };\n\n  handleSelect = (data, type) => {\n    this.clearError();\n    if (type === \"format\") {\n      this.setState({\n        format: data.value,\n      });\n    }\n    if (type === \"pricing\") {\n      this.setState({\n        pricing: data.value,\n      });\n    }\n    if (type === \"category\") {\n      let arr;\n      if (data.length <= 3) {\n        arr = data.map((el) => {\n          return el.value;\n        });\n        this.setState({\n          category: arr,\n        });\n      } else {\n        NotificationManager.info(\"You can select upto 3 only\", \"\", 1000);\n      }\n    }\n    if (type === \"pace\") {\n      this.setState({\n        pace: data.value,\n      });\n    }\n  };\n\n  render() {\n    const {\n      name,\n      format,\n      pricing,\n      uniqueSellingProposition,\n      category,\n      resourceImage,\n\n      pros,\n      cons,\n      details,\n      pace,\n      websiteLink,\n      addPrice,\n\n      loadiing,\n    } = this.state;\n\n    let categoryVal = optionsCategory.filter((item) => {\n      return category.includes(item.label);\n    });\n\n    return (\n      <CRow>\n        <CCol xs=\"12\" sm=\"12\">\n          <CCard className=\"expert-card\">\n            {loadiing && <Loader />}\n            <CCardHeader>\n              <CButton onClick={this.handleBack} className=\"backBtn\">\n                <img src={BackArrow} className=\"mr-2\" /> Back\n              </CButton>\n            </CCardHeader>\n            <CCardBody>\n              <CForm\n                action=\"\"\n                method=\"post\"\n                encType=\"multipart/form-data\"\n                className=\"form-horizontal\"\n              >\n                <CFormGroup row></CFormGroup>\n                <CFormGroup row>\n                  <CCol md=\"3\">\n                    <CLabel htmlFor=\"name\">Name</CLabel>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"9\">\n                    <CInput\n                      id=\"name\"\n                      name=\"name\"\n                      placeholder=\"Name\"\n                      onChange={this.inputHandler}\n                      value={name}\n                    />\n                    {this.errorShow(\"name\")}\n                  </CCol>\n                </CFormGroup>\n                <CFormGroup row>\n                  <CLabel col md=\"3\" htmlFor=\"file-input\">\n                    Image\n                  </CLabel>\n                  <CCol xs=\"12\" md=\"9\">\n                    <div className=\"d-flex image-file\">\n                      <CInputFile\n                        type=\"file\"\n                        accept=\"image/*\"\n                        id=\"file-input\"\n                        name=\"file-input\"\n                        onChange={this.uploadImage}\n                      />\n                      {resourceImage && (\n                        <img\n                          style={{ width: \"80px\", height: \"80px\" }}\n                          src={resourceImage}\n                        />\n                      )}\n                      {this.errorShow(\"file-input\")}\n                    </div>\n                  </CCol>\n                </CFormGroup>\n                <CFormGroup row>\n                  <CCol md=\"3\">\n                    <CLabel htmlFor=\"format\">Format</CLabel>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"9\">\n                    <Select\n                      custom\n                      name=\"format\"\n                      placeholder=\"Select Format\"\n                      id=\"format\"\n                      value={format ? { value: format, label: format } : null}\n                      options={optionsFormat}\n                      onChange={(data) => this.handleSelect(data, \"format\")}\n                    ></Select>\n                    {this.errorShow(\"format\")}\n                  </CCol>\n                </CFormGroup>\n                <CFormGroup row>\n                  <CCol md=\"3\">\n                    <CLabel htmlFor=\"pricing\">Price</CLabel>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"9\">\n                    <Select\n                      custom\n                      name=\"pricing\"\n                      placeholder=\"Select Price\"\n                      id=\"pricing\"\n                      value={\n                        pricing ? { value: pricing, label: pricing } : null\n                      }\n                      options={optionsPricing}\n                      onChange={(data) => this.handleSelect(data, \"pricing\")}\n                    ></Select>\n                    {this.errorShow(\"pricing\")}\n                  </CCol>\n                </CFormGroup>\n\n                {pricing === \"Others\" && (\n                  <CFormGroup row>\n                    <CCol md=\"3\">\n                      <CLabel htmlFor=\"addPrice\">Add Price</CLabel>\n                    </CCol>\n                    <CCol xs=\"12\" md=\"9\">\n                      <CInput\n                        type=\"number\"\n                        id=\"addPrice\"\n                        name=\"addPrice\"\n                        placeholder=\"Add Price\"\n                        onChange={this.inputHandler}\n                        value={addPrice}\n                      />\n                      {this.errorShow(\"addPrice\")}\n                    </CCol>\n                  </CFormGroup>\n                )}\n\n                <CFormGroup row>\n                  <CCol md=\"3\">\n                    <CLabel htmlFor=\"category\">Category</CLabel>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"9\">\n                    <Select\n                      isMulti\n                      custom\n                      name=\"category\"\n                      placeholder=\"Select Category\"\n                      id=\"category\"\n                      value={categoryVal}\n                      options={optionsCategory}\n                      onChange={(data) => this.handleSelect(data, \"category\")}\n                    ></Select>\n                    {this.errorShow(\"category\")}\n                  </CCol>\n                </CFormGroup>\n\n                <CFormGroup row>\n                  <CCol md=\"3\">\n                    <CLabel htmlFor=\"pace\">Pace</CLabel>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"9\">\n                    <Select\n                      custom\n                      name=\"pace\"\n                      placeholder=\"Select Pace\"\n                      id=\"pace\"\n                      value={pace ? { value: pace, label: pace } : null}\n                      options={optionsPace}\n                      onChange={(data) => this.handleSelect(data, \"pace\")}\n                    ></Select>\n                    {this.errorShow(\"pace\")}\n                  </CCol>\n                </CFormGroup>\n\n                <CFormGroup row>\n                  <CCol md=\"3\">\n                    <CLabel htmlFor=\"websiteLink\">Website Link</CLabel>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"9\">\n                    <CInput\n                      id=\"websiteLink\"\n                      name=\"websiteLink\"\n                      placeholder=\"Website Link\"\n                      onChange={this.inputHandler}\n                      value={websiteLink}\n                    />\n                    {this.errorShow(\"websiteLink\")}\n                  </CCol>\n                </CFormGroup>\n\n                <CFormGroup row>\n                  <CCol md=\"3\">\n                    <CLabel htmlFor=\"prosCons\">Pros & Cons</CLabel>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"9\">\n                    <div\n                      onClick={(e) => this.handlePlusButton(e, \"prosAdd\")}\n                      class=\"d-flex justify-content-between add-list\"\n                    >\n                      <CLabel htmlFor=\"pros\">Add Pros</CLabel>\n                      <button className=\"icon\">\n                        <img src={ADD} className=\"ml-3\" />\n                      </button>\n                    </div>\n                    {this.errorShow(\"pros\")}\n                    {pros &&\n                      pros.length > 0 &&\n                      pros.map((el, index) => {\n                        return (\n                          <div className=\"d-flex align-items-center mb-2 \">\n                            <CInput\n                              type=\"text\"\n                              id={`pros${index}`}\n                              name={`pros${index}`}\n                              placeholder={`${index + 1}.`}\n                              autoComplete={`pros${index}`}\n                              onChange={(e) => {\n                                this.inputProsCons(e, index, \"prosAdd\");\n                              }}\n                              value={el.value}\n                            />\n                            <button\n                              className=\"icon\"\n                              onClick={(e) =>\n                                this.handleCancel(e, index, \"prosAdd\")\n                              }\n                            >\n                              <img src={CANCEL} className=\"ml-3\" />\n                            </button>\n                          </div>\n                        );\n                      })}\n\n                    <div\n                      onClick={(e) => this.handlePlusButton(e, \"consAdd\")}\n                      class=\"d-flex justify-content-between add-list\"\n                    >\n                      <CLabel htmlFor=\"cons\">Add Cons</CLabel>\n                      <button className=\"icon\">\n                        <img src={ADD} className=\"ml-3\" />\n                      </button>\n                    </div>\n                    {this.errorShow(\"cons\")}\n                    {cons &&\n                      cons.length > 0 &&\n                      cons.map((el, index) => {\n                        return (\n                          <div className=\"d-flex align-items-center mb-2\">\n                            <CInput\n                              type=\"text\"\n                              id={`cons${index}`}\n                              name={`cons${index}`}\n                              placeholder={`${index + 1}.`}\n                              autoComplete={`cons${index}`}\n                              onChange={(e) => {\n                                this.inputProsCons(e, index, \"consAdd\");\n                              }}\n                              value={el.value}\n                            />\n                            <button\n                              className=\"icon\"\n                              onClick={(e) =>\n                                this.handleCancel(e, index, \"consAdd\")\n                              }\n                            >\n                              <img src={CANCEL} className=\"ml-3\" />\n                            </button>\n                          </div>\n                        );\n                      })}\n                  </CCol>\n                </CFormGroup>\n\n                <CFormGroup row>\n                  <CCol md=\"3\">\n                    <CLabel htmlFor=\"details\">Details</CLabel>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"9\">\n                    <div\n                      class=\"d-flex justify-content-between add-list\"\n                      onClick={(e) => this.handlePlusButton(e, \"detailsAdd\")}\n                    >\n                      <CLabel htmlFor=\"addDetails\">Add Details</CLabel>\n                      <button className=\"icon\">\n                        <img src={ADD} className=\"ml-3\" />\n                      </button>\n                    </div>\n                    {this.errorShow(\"details\")}\n                    {details &&\n                      details.length > 0 &&\n                      details.map((el, index) => {\n                        return (\n                          <div className=\"d-flex align-items-center mb-2\">\n                            <CInput\n                              type=\"text\"\n                              id={`details${index}`}\n                              name={`details${index}`}\n                              placeholder={`${index + 1}.`}\n                              autoComplete={`details${index}`}\n                              onChange={(e) => {\n                                this.inputProsCons(e, index, \"detailsAdd\");\n                              }}\n                              value={el.value}\n                            />\n\n                            <button\n                              className=\"icon\"\n                              onClick={(e) =>\n                                this.handleCancel(e, index, \"detailsAdd\")\n                              }\n                            >\n                              <img src={CANCEL} className=\"ml-3\" />\n                            </button>\n                          </div>\n                        );\n                      })}\n                  </CCol>\n                </CFormGroup>\n\n                <CFormGroup row>\n                  <CCol md=\"3\">\n                    <CLabel htmlFor=\"uniqueSellingProposition\">\n                      Unique Selling Proposition\n                    </CLabel>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"9\">\n                    <CTextarea\n                      name=\"uniqueSellingProposition\"\n                      id=\"uniqueSellingProposition\"\n                      rows=\"9\"\n                      onChange={this.inputHandler}\n                      placeholder=\"Content...\"\n                      value={uniqueSellingProposition}\n                    />\n                    {this.errorShow(\"uniqueSellingProposition\")}\n                  </CCol>\n                </CFormGroup>\n              </CForm>\n            </CCardBody>\n            <CCardFooter>\n              <div className=\"text-right\">\n                <CButton\n                  type=\"submit\"\n                  size=\"sm\"\n                  color=\"primary\"\n                  onClick={this.onSubmit}\n                >\n                  <CIcon name=\"cil-scrubber\" /> Submit\n                </CButton>\n                <CButton\n                  type=\"reset\"\n                  size=\"sm\"\n                  color=\"danger\"\n                  onClick={this.resetState}\n                  className=\"ml-2\"\n                >\n                  <CIcon name=\"cil-ban\" /> Reset\n                </CButton>\n              </div>\n            </CCardFooter>\n          </CCard>\n        </CCol>\n      </CRow>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    saveResourceData: state.LoginAndNavigationReducer.saveResourceData,\n    saveImage: state.LoginAndNavigationReducer.saveImage,\n  };\n};\nconst mapDispatchToProps = (dispatch) => {\n  return bindActionCreators(\n    {\n      addResource,\n      addImage,\n      fetchOneResource,\n      setImage,\n      editResource,\n    },\n    dispatch\n  );\n};\nexport default withRouter(\n  connect(mapStateToProps, mapDispatchToProps)(AddResource)\n);\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/index.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/views/experts/ExpertsFieldsData.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/views/resources/ResourcesFieldsData.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/views/store/action.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/TheContent.js",["244"],"import React, { Suspense } from \"react\";\nimport { Redirect, Route, Switch } from \"react-router-dom\";\nimport { CContainer, CFade } from \"@coreui/react\";\n\n// routes config\nimport routes from \"../routes\";\n\nconst loading = (\n  <div className=\"pt-3 text-center\">\n    <div className=\"sk-spinner sk-spinner-pulse\"></div>\n  </div>\n);\n\nconst PrivateRoutes = ({ component: Component, ...rest }) => {\n  return (\n    <Route\n      {...rest}\n      render={(props) =>\n        rest.isAuthenticated ? (\n          <Component {...props} />\n        ) : (\n          <Redirect\n            to={{\n              pathname: \"/login\",\n            }}\n          />\n        )\n      }\n    />\n  );\n};\n\nconst TheContent = () => {\n  const isLoggedIn = localStorage.getItem(\"isLoggedIn\");\n\n  return (\n    <main className=\"c-main pt-4\">\n      <CContainer fluid>\n        <Suspense fallback={loading}>\n          <Switch>\n            {routes.map((route, idx) => {\n              return (\n                <PrivateRoutes\n                  key={idx}\n                  exact\n                  path={route.path}\n                  component={route.component}\n                  isAuthenticated={isLoggedIn}\n                />\n                // route.component && (\n                //   <Route\n                //     key={idx}\n                //     path={route.path}\n                //     exact={route.exact}\n                //     name={route.name}\n                //     render={(props) => (\n                //       <CFade>\n                //         <route.component {...props} />\n                //       </CFade>\n                //     )}\n                //   />\n                // )\n              );\n            })}\n            <Redirect to=\"/login\" />\n          </Switch>\n        </Suspense>\n      </CContainer>\n    </main>\n  );\n};\n\nexport default React.memo(TheContent);\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/TheHeaderDropdown.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/TheHeader.js",["245","246"],"import React, { useState } from \"react\";\n\nimport { withRouter } from \"react-router-dom\";\nimport {\n  CHeader,\n  CHeaderNav,\n  CSubheader,\n  CBreadcrumbRouter,\n  CToggler,\n} from \"@coreui/react\";\n\nimport routes from \"../routes\";\nimport { TheHeaderDropdown, TheSidebar } from \"./index\";\n\nconst TheHeader = (props) => {\n  const toggleSidebar = () => {\n    props.toggleSideBar();\n  };\n  const toggleSidebarMobile = () => {\n    props.toggleSideBar();\n  };\n  return (\n    <CHeader withSubheader>\n      <CToggler\n        inHeader\n        className=\"ml-md-3 d-lg-none\"\n        onClick={toggleSidebarMobile}\n      />\n      <CToggler\n        inHeader\n        className=\"ml-3 d-md-down-none\"\n        onClick={toggleSidebar}\n      />\n      <CHeaderNav className=\"d-md-down-none mr-auto\"></CHeaderNav>\n\n      <CHeaderNav className=\"px-3\">\n        <TheHeaderDropdown history={props.history} />\n      </CHeaderNav>\n      <CSubheader className=\"px-3 justify-content-between\">\n        <CBreadcrumbRouter\n          className=\"border-0 c-subheader-nav m-0 px-0 px-md-3\"\n          routes={routes}\n        />\n      </CSubheader>\n    </CHeader>\n  );\n};\n\nexport default withRouter(TheHeader);\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/TheSidebar.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/loader/index.js",["247","248"],"import React from \"react\";\nconst dots = [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}];\nexport default () => (\n  <>\n    <div className=\"loader-backdrop\" />\n    <div className=\"content-loader\">\n      <div className=\"dot-loader\">\n        {dots.map(({}, index) => (\n          <div key={index} />\n        ))}\n      </div>\n    </div>\n  </>\n);\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/store/types.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/routes.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/logo.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/_nav.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/views/resources/Resource.js",["249"],"import React, { useState, useEffect } from \"react\";\nimport { CCard, CCardBody, CCardHeader, CCol, CRow } from \"@coreui/react\";\n\nimport { fetchOneResource } from \"../store/action\";\n\nimport { connect } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { withRouter } from \"react-router-dom\";\n\nimport Loader from \"../../loader\";\nconst Resource = (props) => {\n  const [resource, setResource] = useState({});\n  const [loading, setLoading] = useState(false);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    setLoading(true);\n\n    const resource_id = props && props.match.params.id;\n    dispatch(\n      fetchOneResource(`resource?id=${resource_id}`, (value) => {\n        setResource(value.data.resource);\n        setLoading(false);\n      })\n    );\n  }, []);\n\n  let category =\n    resource &&\n    resource.category &&\n    resource.category.length > 0 &&\n    resource.category.join(\", \");\n\n  let pros =\n    resource &&\n    resource.pros &&\n    resource.pros.length > 0 &&\n    resource.pros.join(\", \");\n  let cons =\n    resource &&\n    resource.cons &&\n    resource.cons.length > 0 &&\n    resource.cons.join(\", \");\n  let details =\n    resource &&\n    resource.info &&\n    resource.info.length > 0 &&\n    resource.info.join(\", \");\n  return (\n    <CRow>\n      <CCol lg={12}>\n        <CCard>\n          {loading && <Loader />}\n          <CCardHeader>Resource Details</CCardHeader>\n\n          <CCardBody>\n            {resource && (\n              <table className=\"table\">\n                <tbody>\n                  {!loading && (\n                    <tr>\n                      <td>RID</td>\n                      <td>\n                        <strong>{resource._id}</strong>\n                      </td>\n                    </tr>\n                  )}\n\n                  {resource.title && (\n                    <tr>\n                      <td>Name</td>\n                      <td>\n                        <strong>{resource.title}</strong>\n                      </td>\n                    </tr>\n                  )}\n                  {resource.profile_pic && (\n                    <tr>\n                      <td>Image</td>\n                      <td>\n                        <img\n                          style={{\n                            width: \"100px\",\n                            height: \"100px\",\n                            borderRadius: \"4px\",\n                          }}\n                          src={resource.profile_pic}\n                          alt=\"profile\"\n                        />\n                      </td>\n                    </tr>\n                  )}\n                  {resource.resource_format && (\n                    <tr>\n                      <td>Format</td>\n                      <td>\n                        <strong>{resource.resource_format}</strong>\n                      </td>\n                    </tr>\n                  )}\n                  {resource.price && (\n                    <tr>\n                      <td>Price</td>\n                      <td>\n                        <strong>{resource.price}</strong>\n                      </td>\n                    </tr>\n                  )}\n\n                  {resource.category && (\n                    <tr>\n                      <td>Category</td>\n                      <td>\n                        <strong>{category}</strong>\n                      </td>\n                    </tr>\n                  )}\n                  {resource.pace && (\n                    <tr>\n                      <td>Pace</td>\n                      <td>\n                        <strong>{resource.pace}</strong>\n                      </td>\n                    </tr>\n                  )}\n                  {resource.website && (\n                    <tr>\n                      <td>Website Link</td>\n                      <td>\n                        <strong>{resource.website}</strong>\n                      </td>\n                    </tr>\n                  )}\n                  {resource.unique_selling_proposition && (\n                    <tr>\n                      <td>Unique Selling Proposition</td>\n                      <td>\n                        <strong>{resource.unique_selling_proposition}</strong>\n                      </td>\n                    </tr>\n                  )}\n                  {resource.pros && resource.pros.length > 0 && (\n                    <tr>\n                      <td>Pros</td>\n                      <td>\n                        <strong>{pros}</strong>\n                      </td>\n                    </tr>\n                  )}\n                  {resource.cons && resource.cons.length > 0 && (\n                    <tr>\n                      <td>Cons</td>\n                      <td>\n                        <strong>{cons}</strong>\n                      </td>\n                    </tr>\n                  )}\n                  {resource.info && (\n                    <tr>\n                      <td>Details</td>\n                      <td>\n                        <strong>{details}</strong>\n                      </td>\n                    </tr>\n                  )}\n                </tbody>\n              </table>\n            )}\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    saveImage: state.LoginAndNavigationReducer.saveImage,\n  };\n};\nconst mapDispatchToProps = (dispatch) => {\n  return bindActionCreators(\n    {\n      fetchOneResource,\n    },\n    dispatch\n  );\n};\nexport default withRouter(\n  connect(mapStateToProps, mapDispatchToProps)(Resource)\n);\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/experts/Experts.js",["250","251","252","253","254"],"import React, { useState, useEffect } from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { withRouter } from \"react-router-dom\";\n\nimport Pagination from \"react-js-pagination\";\nimport moment from \"moment-timezone\";\nimport { CCard, CCardBody, CCol, CRow, CButton } from \"@coreui/react\";\n\nimport { fetchExperts, deleteExpert, userStatus } from \"../store/action\";\nimport { connect } from \"react-redux\";\nimport { NotificationManager } from \"react-notifications\";\nimport { bindActionCreators } from \"redux\";\nimport Loader from \"../../loader\";\nimport CommonModal from \"../../common/commonModal\";\nimport Tooltip from \"../../common/toolTip\";\nimport EDIT from \"../../assets/icons/edit.svg\";\nimport DELETE from \"../../assets/icons/delete.svg\";\n\nimport ACTIVATE from \"../../assets/icons/activate.svg\";\nimport DEACTIVATE from \"../../assets/icons/deactivate.svg\";\nimport { Table } from \"reactstrap\";\n\nconst offsetLimit = 10;\n\nconst Experts = (props) => {\n  const history = useHistory();\n  const queryPage = useLocation().search.match(/page=([0-9]+)/, \"\");\n  const currentPage = Number(queryPage && queryPage[1] ? queryPage[1] : 1);\n  const [page, setPage] = useState(currentPage);\n  const [search, setSearch] = useState(\"\");\n  const [idExpert, setIdExpert] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [expertsDetails, setExpertsDetails] = useState([]);\n  const [modalOpen, setModalOpen] = useState(false);\n  const [count, setCount] = useState(0);\n  const [type, setType] = useState(\"\");\n  const pageChange = (newPage) => {\n    currentPage !== newPage && history.push(`/experts?page=${newPage}`);\n    setLoading(true);\n    props.fetchExperts(\n      `expert/all?offset=${\n        (expertsDetails &&\n          expertsDetails.length &&\n          expertsDetails[expertsDetails.length - 1]._id) ||\n        \"\"\n      }&limit=${offsetLimit}&search=${search}`,\n      (value) => {\n        setLoading(false);\n        setExpertsDetails(value.data.experts);\n        setCount(value.data.count);\n\n        setPage(newPage);\n      }\n    );\n  };\n  useEffect(() => {\n    currentPage !== page && setPage(currentPage);\n  }, [currentPage, page]);\n  const addExpert = () => {\n    props.history.push(\"/addExpert\");\n  };\n  const handleSearch = (e) => {\n    setSearch(e.target.value);\n    setPage(1);\n  };\n\n  const editExpert = (e, item) => {\n    setIdExpert(item.id);\n    e.preventDefault();\n    e.stopPropagation();\n    props.history.push(`/editExpert/${item._id}`);\n  };\n\n  const onDelete = (e, type, id) => {\n    setIdExpert(id);\n    setType(type);\n    e.preventDefault();\n    e.stopPropagation();\n    setModalOpen(!modalOpen);\n  };\n\n  const deleteExpert = (id) => {\n    if (type === \"deleteExpert\") {\n      if (idExpert === id) setModalOpen(false);\n      setLoading(true);\n      props.deleteExpert(`expert/delete?id=${id}`, (value) => {\n        if (value.status === 200) {\n          NotificationManager.success(\"Expert deleted successfully\", \"\", 1000);\n          setLoading(false);\n\n          callApiToFetchAllExperts();\n        }\n      });\n    } else {\n      if (idExpert === id) setModalOpen(false);\n      setLoading(true);\n      let obj = {\n        type: type,\n        id: id,\n        user_type: \"expert\",\n      };\n\n      props.userStatus(\"common/change-status\", obj, (value) => {\n        if (value.status === 200) {\n          NotificationManager.success(value.message, \"\", 1000);\n\n          callApiToFetchAllExperts();\n        }\n      });\n    }\n  };\n  useEffect(() => {\n    callApiToFetchAllExperts();\n  }, [search]);\n  const callApiToFetchAllExperts = () => {\n    setLoading(true);\n\n    props.fetchExperts(\n      `expert/all?offset=${\n        (expertsDetails &&\n          expertsDetails.length &&\n          expertsDetails[expertsDetails.length - 1]._id) ||\n        \"\"\n      }&limit=${offsetLimit}&search=${search}`,\n      (value) => {\n        if (value.status === 200) {\n          setLoading(false);\n          setExpertsDetails(value.data.experts);\n          setCount(value.data.count);\n        }\n      }\n    );\n  };\n  const onBlock = (e, type, item) => {\n    setIdExpert(item._id);\n    setType(type);\n    e.preventDefault();\n    e.stopPropagation();\n    setModalOpen(!modalOpen);\n  };\n\n  return (\n    <CRow>\n      <CCol xl={12}>\n        <form className=\"position-relative\">\n          <div className=\"text-center search-input\">\n            <input\n              type=\"search\"\n              className=\"form-control\"\n              placeholder=\"Search\"\n              required\n              onChange={handleSearch}\n            />\n          </div>\n          <div className=\"text-right resource-btn\">\n            <CButton block color=\"info\" onClick={addExpert}>\n              Add Expert\n            </CButton>\n          </div>\n        </form>\n        <CCard>\n          {loading && <Loader />}\n          <CCardBody>\n            <Table responsive>\n              <thead>\n                <tr>\n                  <th className=\"text-nowrap \">Name</th>\n\n                  <th>Email</th>\n\n                  <th>Designation</th>\n\n                  <th>Country</th>\n                  <th>Role</th>\n                  <th>Created At</th>\n                  <th>Action</th>\n                </tr>\n              </thead>\n              <tbody>\n                {expertsDetails && expertsDetails.length === 0 && !loading && (\n                  <h3 className=\"text-center no-user-found\">\n                    No Experts Found!\n                  </h3>\n                )}\n                {expertsDetails &&\n                  expertsDetails.length > 0 &&\n                  expertsDetails.map((item, index) => {\n                    let istDate = new Date(item.createdAt);\n\n                    let createdAt = moment(istDate).format(\n                      \"DD-MM-YYYY, hh:mm a\"\n                    );\n                    return (\n                      <tr\n                        style={{ cursor: \"pointer\" }}\n                        onClick={() =>\n                          history.push({\n                            pathname: `/experts/${item._id}`,\n                          })\n                        }\n                      >\n                        <td>\n                          {\" \"}\n                          {item.first_name && item.last_name\n                            ? item.first_name + \" \" + item.last_name\n                            : \"-\"}\n                        </td>\n                        <td>{item.email ? item.email : \"-\"}</td>\n                        <td>{item.designation}</td>\n                        <td>{item.country}</td>\n                        <td>{item.current_role}</td>\n                        <td>\n                          {\" \"}\n                          {createdAt !== \"Invalid date\" ? createdAt : \"-\"}\n                        </td>\n                        <td>\n                          <div className=\"d-flex align-items-center\">\n                            <button\n                              id={`edit-${index}`}\n                              className=\"icon\"\n                              onClick={(e) => editExpert(e, item)}\n                            >\n                              <img src={EDIT} className=\"ml-3\" />\n                            </button>\n                            <Tooltip placement=\"top\" target={`edit-${index}`}>\n                              Edit\n                            </Tooltip>\n                            <button\n                              className=\"icon\"\n                              onClick={(e) =>\n                                onDelete(e, \"deleteExpert\", item._id)\n                              }\n                              id={`delete-${index}`}\n                            >\n                              <img src={DELETE} className=\"ml-3\" />\n                            </button>\n                            <Tooltip placement=\"top\" target={`delete-${index}`}>\n                              Delete\n                            </Tooltip>\n                            {item.expert_status !== \"deactivated\" && (\n                              <>\n                                <button\n                                  onClick={(e) =>\n                                    onBlock(e, \"deactivate\", item)\n                                  }\n                                  className=\"icon\"\n                                  id={`deactivate-${index}`}\n                                >\n                                  <img src={DEACTIVATE} className=\"ml-3\" />\n                                </button>\n                                <Tooltip\n                                  placement=\"top\"\n                                  target={`deactivate-${index}`}\n                                >\n                                  Deactivate\n                                </Tooltip>\n                              </>\n                            )}\n\n                            {item.expert_status === \"deactivated\" && (\n                              <>\n                                <button\n                                  onClick={(e) => onBlock(e, \"activate\", item)}\n                                  className=\"icon\"\n                                  id={`activate-${index}`}\n                                >\n                                  <img src={ACTIVATE} className=\"ml-3\" />\n                                </button>\n                                <Tooltip\n                                  placement=\"top\"\n                                  target={`activate-${index}`}\n                                >\n                                  Activate\n                                </Tooltip>\n                              </>\n                            )}\n                          </div>\n                        </td>\n                      </tr>\n                    );\n                  })}\n              </tbody>\n            </Table>\n\n            <div className=\"text-center pagination-input\">\n              {count > offsetLimit && !loading && (\n                <Pagination\n                  className=\"mt-3 mx-auto w-fit-content\"\n                  itemClass=\"page-item\"\n                  linkClass=\"page-link\"\n                  activeClass=\"active\"\n                  activePage={page}\n                  itemsCountPerPage={offsetLimit}\n                  totalItemsCount={count}\n                  pageRangeDisplayed={5}\n                  onChange={pageChange}\n                />\n              )}\n            </div>\n            <div>\n              {modalOpen && (\n                <CommonModal\n                  isOpen={modalOpen}\n                  toggle={(e) => onDelete(e)}\n                  block_delete={(e) => deleteExpert(e, idExpert)}\n                  id={idExpert}\n                  type={type}\n                />\n              )}\n            </div>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {};\n};\nconst mapDispatchToProps = (dispatch) => {\n  return bindActionCreators(\n    {\n      fetchExperts,\n      deleteExpert,\n      userStatus,\n    },\n    dispatch\n  );\n};\nexport default withRouter(\n  connect(mapStateToProps, mapDispatchToProps)(Experts)\n);\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/experts/Expert.js",["255","256"],"import React, { useState, useEffect } from \"react\";\nimport {\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CNavLink,\n  CNav,\n  CTabContent,\n  CTabPane,\n  CTabs,\n  CNavItem,\n  CBadge,\n} from \"@coreui/react\";\nimport moment from \"moment\";\n\nimport Loader from \"../../loader\";\n\nimport { connect } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { withRouter } from \"react-router-dom\";\nimport { fetchOneExpert } from \"../store/action\";\nconst Expert = (props) => {\n  const [expert, setExpert] = useState({});\n  const [loading, setLoading] = useState(false);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    setLoading(true);\n\n    const expert_id = props && props.match.params.id;\n    dispatch(\n      fetchOneExpert(`expert?id=${expert_id}`, (value) => {\n        setExpert(value.data.expert);\n        setLoading(false);\n      })\n    );\n  }, []);\n\n  let istDate = new Date(expert.createdAt);\n\n  let createdAt = moment(istDate).format(\"DD-MM-YYYY, hh:mm a\");\n  let fields =\n    expert && expert.expert_fields && expert.expert_fields.join(\", \");\n\n  let info = expert && expert.info && expert.info.join(\"\\r\\n\");\n\n  let skills =\n    expert.skills &&\n    expert.skills[0] &&\n    expert.skills[0].values &&\n    expert.skills[0].values.join(\", \");\n\n  const getBadge = (status) => {\n    switch (status) {\n      case \"Deactivated\":\n        return \"danger\";\n\n      case \"Activated\":\n        return \"success\";\n\n      default:\n        return \"primary\";\n    }\n  };\n\n  const { rates } = expert;\n  let serviceName =\n    rates &&\n    rates.map((item) => {\n      return `${item.serviceName} and ${item.value} ${item.unit}, \\n`;\n    });\n\n  return (\n    <CRow>\n      <CCol lg={12}>\n        <CCard>\n          {loading && <Loader />}\n\n          <CCardBody>\n            <CTabs>\n              <CNav variant=\"tabs\">\n                <CNavItem>\n                  <CNavLink>Expert Details</CNavLink>\n                </CNavItem>\n                <CNavItem>\n                  <CNavLink>\n                    List of Users that the expert has had calls with\n                  </CNavLink>\n                </CNavItem>\n              </CNav>\n              <CTabContent>\n                <CTabPane>\n                  {expert && (\n                    <table className=\"table\">\n                      <tbody>\n                        {createdAt !== \"Invalid date\" && (\n                          <tr>\n                            <td>Created At</td>\n                            <td>\n                              <strong> {createdAt}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {!loading && (\n                          <tr>\n                            <td>Status</td>\n\n                            <td>\n                              <CBadge\n                                color={getBadge(\n                                  expert.expert_status === \"deactivated\"\n                                    ? \"Deactivated\"\n                                    : \"Activated\"\n                                )}\n                              >\n                                {expert.expert_status === \"deactivated\"\n                                  ? \"Deactivated\"\n                                  : \"Activated\"}\n                              </CBadge>\n                            </td>\n                          </tr>\n                        )}\n                        {!loading && (\n                          <tr>\n                            <td>EID</td>\n                            <td>\n                              <strong>{expert._id}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {expert.profile_pic && (\n                          <tr>\n                            <td>Picture</td>\n                            <td>\n                              <img\n                                style={{\n                                  width: \"100px\",\n                                  height: \"100px\",\n                                  borderRadius: \"4px\",\n                                }}\n                                src={expert.profile_pic}\n                                alt=\"profile\"\n                              />\n                            </td>\n                          </tr>\n                        )}\n                        {expert.first_name && (\n                          <tr>\n                            <td>First name</td>\n                            <td>\n                              <strong>{expert.first_name}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {expert.last_name && (\n                          <tr>\n                            <td>Last name</td>\n                            <td>\n                              <strong>{expert.last_name}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {expert.email && (\n                          <tr>\n                            <td>Email</td>\n                            <td>\n                              <strong>{expert.email}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {expert.contact_no && (\n                          <tr>\n                            <td>Contact</td>\n                            <td>\n                              <strong>{expert.contact_no}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {expert.gender && (\n                          <tr>\n                            <td>Gender</td>\n                            <td>\n                              <strong>{expert.gender}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {expert.country && (\n                          <tr>\n                            <td>Country</td>\n                            <td>\n                              <strong>{expert.country}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {info && (\n                          <tr>\n                            <td>About</td>\n                            <td>\n                              <strong>{info}</strong>\n                            </td>\n                          </tr>\n                        )}\n\n                        {expert.current_role && (\n                          <tr>\n                            <td>Current Role</td>\n                            <td>\n                              <strong>{expert.current_role}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {expert.industry && (\n                          <tr>\n                            <td>Current Industry</td>\n                            <td>\n                              <strong>{expert.industry}</strong>\n                            </td>\n                          </tr>\n                        )}\n\n                        {expert.designation && (\n                          <tr>\n                            <td>Designation</td>\n                            <td>\n                              <strong>{expert.designation}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {expert.linkedIn && (\n                          <tr>\n                            <td>LinkedIn Link</td>\n                            <td>\n                              <strong>{expert.linkedIn}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {expert.calendar_id && (\n                          <tr>\n                            <td>Calendar Id</td>\n                            <td>\n                              <strong>{expert.calendar_id}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {serviceName && (\n                          <tr>\n                            <td>Service and its Rate</td>\n                            <td>\n                              <strong>{serviceName}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {expert.service && (\n                          <tr>\n                            <td>Service</td>\n                            <td>\n                              <strong>{expert.service}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {fields && (\n                          <tr>\n                            <td>Fields</td>\n                            <td>\n                              <strong>{fields}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {skills && (\n                          <tr>\n                            <td>Skills</td>\n                            <td>\n                              <strong>{skills}</strong>\n                            </td>\n                          </tr>\n                        )}\n                      </tbody>\n                    </table>\n                  )}\n                </CTabPane>\n                <CTabPane>\n                  <table className=\"table\">\n                    <tbody>\n                      <tr>\n                        <td>Users List</td>\n                      </tr>\n                    </tbody>\n                  </table>\n                </CTabPane>\n              </CTabContent>\n            </CTabs>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {};\n};\nconst mapDispatchToProps = (dispatch) => {\n  return bindActionCreators(\n    {\n      fetchOneExpert,\n    },\n    dispatch\n  );\n};\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Expert));\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/resources/Resources.js",["257","258","259"],"import React, { useState, useEffect } from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { withRouter } from \"react-router-dom\";\nimport Pagination from \"react-js-pagination\";\nimport Tooltip from \"../../common/toolTip\";\nimport CommonModal from \"../../common/commonModal\";\nimport { Table } from \"reactstrap\";\nimport { connect } from \"react-redux\";\nimport { NotificationManager } from \"react-notifications\";\nimport { bindActionCreators } from \"redux\";\nimport Loader from \"../../loader\";\nimport { CCard, CCardBody, CCol, CRow, CButton } from \"@coreui/react\";\n\nimport EDIT from \"../../assets/icons/edit.svg\";\nimport DELETE from \"../../assets/icons/delete.svg\";\nimport {\n  fetchResources,\n  deleteResource,\n  editResource,\n  setResourceData,\n} from \"../store/action\";\nconst offsetLimit = 10;\nconst Resources = (props) => {\n  const history = useHistory();\n  const queryPage = useLocation().search.match(/page=([0-9]+)/, \"\");\n  const currentPage = Number(queryPage && queryPage[1] ? queryPage[1] : 1);\n  const [page, setPage] = useState(currentPage);\n  const [search, setSearch] = useState(\"\");\n  const [modalOpen, setModalOpen] = useState(false);\n  const [resourcesDetails, setResourcesDetails] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [idResource, setIdResource] = useState(\"\");\n  const [count, setCount] = useState(0);\n  const pageChange = (newPage) => {\n    currentPage !== newPage && history.push(`/resources?page=${newPage}`);\n\n    setLoading(true);\n    props.fetchResources(\n      `resource/all?offset=${\n        (resourcesDetails &&\n          resourcesDetails.length &&\n          resourcesDetails[resourcesDetails.length - 1]._id) ||\n        \"\"\n      }&limit=${offsetLimit}&search=${search}`,\n      (value) => {\n        setLoading(false);\n        setResourcesDetails(value.data.resources);\n        setCount(value.data.count);\n\n        setPage(newPage);\n      }\n    );\n  };\n  useEffect(() => {\n    currentPage !== page && setPage(currentPage);\n  }, [currentPage, page]);\n  const addResource = () => {\n    props.history.push(\"/addResource\");\n  };\n  const editResource = (e, item) => {\n    setIdResource(item._id);\n    e.preventDefault();\n    e.stopPropagation();\n\n    props.setResourceData(item);\n\n    props.history.push({\n      state: item,\n      pathname: `/editResource/${item._id}`,\n    });\n  };\n  const onDelete = (e, id) => {\n    setIdResource(id);\n    e.preventDefault();\n    e.stopPropagation();\n    setModalOpen(!modalOpen);\n  };\n  const deleteResource = (id) => {\n    if (idResource === id) setModalOpen(false);\n    setLoading(true);\n    props.deleteResource(`resource/delete?id=${id}`, (value) => {\n      if (value.status === 200) {\n        NotificationManager.success(\"Resource deleted successfully\", \"\", 1000);\n        setLoading(false);\n        callApiToFetchAllResources();\n      }\n    });\n  };\n  const handleSearch = (e) => {\n    setSearch(e.target.value);\n    setPage(1);\n  };\n  useEffect(() => {\n    callApiToFetchAllResources();\n  }, [search]);\n  const callApiToFetchAllResources = () => {\n    setLoading(true);\n\n    props.fetchResources(\n      `resource/all?offset=${\n        (resourcesDetails &&\n          resourcesDetails.length &&\n          resourcesDetails[resourcesDetails.length - 1]._id) ||\n        \"\"\n      }&limit=${offsetLimit}&search=${search}`,\n      (value) => {\n        if (value.status === 200) {\n          setLoading(false);\n          setResourcesDetails(value.data.resources);\n          setCount(value.data.count);\n        }\n      }\n    );\n  };\n\n  return (\n    <CRow>\n      <CCol xl={12}>\n        <form className=\"position-relative\">\n          <div className=\"text-center search-input\">\n            <input\n              type=\"search\"\n              className=\"form-control\"\n              placeholder=\"Search\"\n              required\n              onChange={handleSearch}\n            />\n          </div>\n          <div className=\"text-right resource-btn\">\n            <CButton block color=\"info\" onClick={addResource} id=\"addResource\">\n              Add Resource\n            </CButton>\n          </div>\n        </form>\n      </CCol>\n      <CCol xl={12}></CCol>\n\n      <CCol xl={12}>\n        <CCard>\n          {loading && <Loader />}\n          <CCardBody>\n            <Table responsive>\n              <thead>\n                <tr>\n                  <th className=\"text-nowrap \">Name</th>\n\n                  <th>Format</th>\n                  <th>Price</th>\n                  <th>Category</th>\n                  <th>Action</th>\n                </tr>\n              </thead>\n              <tbody>\n                {resourcesDetails &&\n                  resourcesDetails.length === 0 &&\n                  !loading && (\n                    <h3 className=\"text-center no-user-found\">\n                      No Resources Found!\n                    </h3>\n                  )}\n                {resourcesDetails &&\n                  resourcesDetails.length > 0 &&\n                  resourcesDetails.map((item, index) => {\n                    let category =\n                      item &&\n                      item.category &&\n                      item.category.length > 0 &&\n                      item.category.join(\", \");\n                    return (\n                      <tr\n                        style={{ cursor: \"pointer\" }}\n                        onClick={() =>\n                          history.push({\n                            pathname: `/resources/${item._id}`,\n                          })\n                        }\n                      >\n                        <td>{item.title}</td>\n                        <td>{item.resource_format}</td>\n                        <td>{item.price}</td>\n                        <td>{category}</td>\n                        <td>\n                          <div className=\"d-flex align-items-center\">\n                            <button\n                              id={`edit-${index}`}\n                              className=\"icon\"\n                              onClick={(e) => editResource(e, item)}\n                            >\n                              <img src={EDIT} className=\"ml-3\" />\n                            </button>\n                            <Tooltip placement=\"top\" target={`edit-${index}`}>\n                              Edit\n                            </Tooltip>\n                            <button\n                              className=\"icon\"\n                              onClick={(e) => onDelete(e, item._id)}\n                              id={`delete-${index}`}\n                            >\n                              <img src={DELETE} className=\"ml-3\" />\n                            </button>\n                            <Tooltip placement=\"top\" target={`delete-${index}`}>\n                              Delete\n                            </Tooltip>\n                          </div>\n                        </td>\n                      </tr>\n                    );\n                  })}\n              </tbody>\n            </Table>\n\n            <div className=\"text-center pagination-input\">\n              {count > offsetLimit && !loading && (\n                <Pagination\n                  className=\"mt-3 mx-auto w-fit-content\"\n                  itemClass=\"page-item\"\n                  linkClass=\"page-link\"\n                  activeClass=\"active\"\n                  activePage={page}\n                  itemsCountPerPage={offsetLimit}\n                  totalItemsCount={count}\n                  pageRangeDisplayed={5}\n                  onChange={pageChange}\n                />\n              )}\n            </div>\n\n            <div>\n              {modalOpen && (\n                <CommonModal\n                  isOpen={modalOpen}\n                  toggle={(e) => onDelete(e)}\n                  block_delete={(e) => deleteResource(e, idResource)}\n                  id={idResource}\n                  type=\"deleteResource\"\n                />\n              )}\n            </div>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {};\n};\nconst mapDispatchToProps = (dispatch) => {\n  return bindActionCreators(\n    {\n      fetchResources,\n      deleteResource,\n      editResource,\n      setResourceData,\n    },\n    dispatch\n  );\n};\nexport default withRouter(\n  connect(mapStateToProps, mapDispatchToProps)(Resources)\n);\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/icons.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/Users.js",["260"],"import React, { useState, useEffect } from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport moment from \"moment\";\nimport Pagination from \"react-js-pagination\";\nimport CommonModal from \"../../common/commonModal\";\nimport { NotificationManager } from \"react-notifications\";\nimport { Table } from \"reactstrap\";\nimport { CBadge, CButton, CCard, CCardBody, CCol, CRow } from \"@coreui/react\";\nimport Loader from \"../../loader\";\nimport { connect } from \"react-redux\";\n\nimport { bindActionCreators } from \"redux\";\nimport { withRouter } from \"react-router-dom\";\n\nimport { fetchUsers, userStatus } from \"../store/action\";\nconst offsetLimit = 10;\nconst Users = (props) => {\n  const history = useHistory();\n  const queryPage = useLocation().search.match(/page=([0-9]+)/, \"\");\n  const currentPage = Number(queryPage && queryPage[1] ? queryPage[1] : 1);\n  const [page, setPage] = useState(currentPage);\n  const [search, setSearch] = useState(\"\");\n  const [modalOpen, setModalOpen] = useState(false);\n  const [type, setType] = useState(\"\");\n\n  const [idUser, setIdUser] = useState(\"\");\n  const [usersDetails, setUsersDetails] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [count, setCount] = useState(0);\n  const pageChange = (newPage) => {\n    currentPage !== newPage && history.push(`/users?page=${newPage}`);\n    setLoading(true);\n\n    props.fetchUsers(\n      `user/all?offset=${\n        (usersDetails &&\n          usersDetails.length &&\n          usersDetails[usersDetails.length - 1]._id) ||\n        \"\"\n      }&limit=${offsetLimit}&search=${search}`,\n      (value) => {\n        setLoading(false);\n        setUsersDetails(value.data.users);\n        setCount(value.data.count);\n\n        setPage(newPage);\n      }\n    );\n  };\n  const handleSearch = (e) => {\n    setSearch(e.target.value);\n    setPage(1);\n  };\n\n  useEffect(() => {\n    callApiToFetchAllUsers();\n  }, [search]);\n\n  const callApiToFetchAllUsers = () => {\n    setLoading(true);\n\n    props.fetchUsers(\n      `user/all?offset=${\n        (usersDetails &&\n          usersDetails.length &&\n          usersDetails[usersDetails.length - 1]._id) ||\n        \"\"\n      }&limit=${offsetLimit}&search=${search}`,\n      (value) => {\n        setLoading(false);\n        setUsersDetails(value.data.users);\n        setCount(value.data.count);\n      }\n    );\n  };\n\n  const getBadge = (status) => {\n    switch (status) {\n      case \"Verified\":\n        return \"success\";\n\n      case \"Not Verified\":\n        return \"danger\";\n      default:\n        return \"primary\";\n    }\n  };\n\n  const onBlock = (e, type, item) => {\n    setIdUser(item._id);\n    setType(type);\n    e.preventDefault();\n    e.stopPropagation();\n    setModalOpen(!modalOpen);\n  };\n  const blockUser = (id) => {\n    if (idUser === id) {\n      setModalOpen(false);\n\n      callApi(type, id);\n    }\n  };\n\n  const callApi = (type, id) => {\n    let obj = {\n      type: type,\n      id: id,\n      user_type: \"user\",\n    };\n\n    props.userStatus(\"common/change-status\", obj, (value) => {\n      if (value.status === 200) {\n        NotificationManager.success(value.message, \"\", 1000);\n        callApiToFetchAllUsers();\n      }\n    });\n  };\n\n  return (\n    <CRow>\n      <CCol xl={12}>\n        <form>\n          <div className=\"text-center search-input\">\n            <input\n              type=\"search\"\n              className=\"form-control\"\n              placeholder=\"Search\"\n              required\n              onChange={handleSearch}\n            />\n          </div>\n        </form>\n      </CCol>\n\n      <CCol xl={12}>\n        <CCard className=\"position-relative\">\n          {loading && <Loader />}\n\n          <CCardBody>\n            <Table\n              responsive\n              className={`table ${\n                usersDetails.length === 0 ? \"tableHeight\" : \"\"\n              }`}\n            >\n              <thead>\n                <tr>\n                  <th className=\"text-nowrap \">Name</th>\n\n                  <th>Email</th>\n                  <th>Status</th>\n\n                  <th>Country</th>\n                  <th>Created At</th>\n                  <th>Action</th>\n                </tr>\n              </thead>\n              <tbody>\n                {usersDetails && usersDetails.length === 0 && !loading && (\n                  <h3 className=\"text-center no-user-found\">No Users Found!</h3>\n                )}\n                {usersDetails &&\n                  usersDetails.length > 0 &&\n                  usersDetails.map((item, index) => {\n                    let istDate = new Date(item.createdAt);\n\n                    let createdAt = moment(istDate).format(\n                      \"DD-MM-YYYY, hh:mm a\"\n                    );\n\n                    return (\n                      <tr\n                        style={{ cursor: \"pointer\" }}\n                        onClick={() =>\n                          history.push({\n                            pathname: `/users/${item._id}`,\n                            state: usersDetails,\n                          })\n                        }\n                      >\n                        <td>\n                          {\" \"}\n                          {item.first_name && item.last_name\n                            ? item.first_name + \" \" + item.last_name\n                            : \"-\"}\n                        </td>\n                        <td>{item.email ? item.email : \"-\"}</td>\n                        <td>\n                          <CBadge\n                            color={getBadge(\n                              !item.is_verified ? \"Not Verified\" : \"Verified\"\n                            )}\n                          >\n                            {!item.is_verified ? \"Not Verified\" : \"Verified\"}\n                          </CBadge>\n                        </td>\n                        <td>{item.country ? item.country : \"-\"}</td>\n                        <td>\n                          {createdAt !== \"Invalid date\" ? createdAt : \"-\"}\n                        </td>\n                        <td>\n                          {item.user_status === \"blocked\" ? (\n                            <CButton\n                              onClick={(e) => onBlock(e, \"unblock\", item)}\n                              className=\"Unblock-btn block-btn\"\n                            >\n                              UnBlock\n                            </CButton>\n                          ) : item.user_status === \"activated\" ? (\n                            <div>\n                              <CButton\n                                onClick={(e) => onBlock(e, \"block\", item)}\n                                className=\"block-btn block-btn\"\n                              >\n                                Block\n                              </CButton>{\" \"}\n                            </div>\n                          ) : item.user_status === \"deactivated\" ? (\n                            <div>\n                              <CButton\n                                onClick={(e) => onBlock(e, \"block\", item)}\n                                className=\"block-btn block-btn\"\n                              >\n                                Block\n                              </CButton>\n                            </div>\n                          ) : (\n                            <CButton\n                              onClick={(e) => onBlock(e, \"block\", item)}\n                              className=\"block-btn block-btn\"\n                            >\n                              Block\n                            </CButton>\n                          )}\n                        </td>\n                      </tr>\n                    );\n                  })}\n              </tbody>\n            </Table>\n\n            <div className=\"text-center pagination-input\">\n              {count > offsetLimit && !loading && (\n                <Pagination\n                  className=\"mt-3 mx-auto w-fit-content\"\n                  itemClass=\"page-item\"\n                  linkClass=\"page-link\"\n                  activeClass=\"active\"\n                  activePage={page}\n                  itemsCountPerPage={offsetLimit}\n                  totalItemsCount={count}\n                  pageRangeDisplayed={5}\n                  onChange={pageChange}\n                />\n              )}\n            </div>\n            <div>\n              {modalOpen && (\n                <CommonModal\n                  isOpen={modalOpen}\n                  toggle={(e) => onBlock(e, type, idUser)}\n                  block_delete={(e) => blockUser(e, idUser)}\n                  id={idUser}\n                  type={type}\n                />\n              )}\n            </div>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {};\n};\nconst mapDispatchToProps = (dispatch) => {\n  return bindActionCreators(\n    {\n      fetchUsers,\n      userStatus,\n    },\n    dispatch\n  );\n};\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Users));\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/User.js",["261","262","263"],"import React, { useState, useEffect, Fragment } from \"react\";\nimport moment from \"moment\";\nimport UserPlanner from \"../users/UserPlanner\";\nimport {\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CBadge,\n  CTabs,\n  CNavItem,\n  CNavLink,\n  CNav,\n  CTabContent,\n  CTabPane,\n} from \"@coreui/react\";\nimport Loader from \"../../loader\";\n\nimport { connect } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { withRouter } from \"react-router-dom\";\n\nimport { fetchOneUser } from \"../store/action\";\nconst User = (props) => {\n  const [user, setUser] = useState({});\n  const [loading, setLoading] = useState(false);\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    setLoading(true);\n\n    const user_id = props && props.match.params.id;\n    dispatch(\n      fetchOneUser(`user?id=${user_id}`, (value) => {\n        setUser(value.data.user);\n        setLoading(false);\n      })\n    );\n  }, []);\n\n  const getBadge = (status) => {\n    switch (status) {\n      case \"Verified\":\n        return \"success\";\n\n      case \"Not Verified\":\n        return \"danger\";\n      case \"Activated\":\n        return \"success\";\n\n      case \"Blocked\":\n        return \"danger\";\n      default:\n        return \"primary\";\n    }\n  };\n\n  let reasonForCareerChange =\n    user &&\n    user.reason_for_career_change &&\n    user.reason_for_career_change.join(\", \");\n\n  let istDate = new Date(user.createdAt);\n\n  let createdAt = moment(istDate).format(\"DD-MM-YYYY, hh:mm a\");\n\n  return (\n    <CRow>\n      <CCol lg={12}>\n        <CCard className=\"position-relative\">\n          {loading && <Loader />}\n          {/* <CCardHeader>Account Details</CCardHeader> */}\n          <CCardBody>\n            <CTabs>\n              <CNav variant=\"tabs\">\n                <CNavItem>\n                  <CNavLink>Account Details</CNavLink>\n                </CNavItem>\n                <CNavItem>\n                  <CNavLink>Usage of expert and resource features</CNavLink>\n                </CNavItem>\n                <CNavItem>\n                  <CNavLink>Planner Activity</CNavLink>\n                </CNavItem>\n              </CNav>\n              <CTabContent>\n                <CTabPane>\n                  {user && (\n                    <table className=\"table\">\n                      <tbody>\n                        {createdAt !== \"Invalid date\" && (\n                          <tr>\n                            <td>Created At</td>\n                            <td>\n                              <strong> {createdAt}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {!loading && (\n                          <tr>\n                            <td>Status</td>\n\n                            <td>\n                              <CBadge\n                                color={getBadge(\n                                  user.user_status === \"blocked\"\n                                    ? \"Blocked\"\n                                    : \"Activated\"\n                                )}\n                              >\n                                {user.user_status === \"blocked\"\n                                  ? \"Blocked\"\n                                  : \"Activated\"}\n                              </CBadge>\n                            </td>\n                          </tr>\n                        )}\n                        {!loading && (\n                          <tr>\n                            <td>UID</td>\n                            <td>\n                              <strong>{user._id}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {!loading && (\n                          <tr>\n                            <td>Email Verification</td>\n\n                            <td>\n                              <CBadge\n                                color={getBadge(\n                                  !user.is_verified\n                                    ? \"Not Verified\"\n                                    : \"Verified\"\n                                )}\n                              >\n                                {!user.is_verified\n                                  ? \"Not Verified\"\n                                  : \"Verified\"}\n                              </CBadge>\n                            </td>\n                          </tr>\n                        )}\n                        {user.first_name && (\n                          <tr>\n                            <td>First name</td>\n                            <td>\n                              <strong>{user.first_name}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {user.last_name && (\n                          <tr>\n                            <td>Last name</td>\n                            <td>\n                              <strong>{user.last_name}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {user.contact_no && (\n                          <tr>\n                            <td>Contact</td>\n                            <td>\n                              <strong>\n                                {user.contact_no.value || user.contact_no}\n                              </strong>\n                            </td>\n                          </tr>\n                        )}\n                        {user.email && (\n                          <tr>\n                            <td>Email</td>\n                            <td>\n                              <strong>{user.email}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {user.gender && (\n                          <tr>\n                            <td>Gender</td>\n                            <td>\n                              <strong>{user.gender}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {user.role && (\n                          <tr>\n                            <td>Role</td>\n                            <td>\n                              <strong>{user.role}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {user.country && (\n                          <tr>\n                            <td>Country</td>\n                            <td>\n                              <strong>{user.country}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {user.industry && (\n                          <tr>\n                            <td>Industry</td>\n                            <td>\n                              <strong>{user.industry}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {user.full_time_work_experience && (\n                          <tr>\n                            <td>Work Experience</td>\n                            <td>\n                              <strong>{user.full_time_work_experience}</strong>\n                            </td>\n                          </tr>\n                        )}\n\n                        {reasonForCareerChange && (\n                          <tr>\n                            <td>Career Change Reason</td>\n                            <td>\n                              <strong>{reasonForCareerChange}</strong>\n                            </td>\n                          </tr>\n                        )}\n                      </tbody>\n                    </table>\n                  )}\n                </CTabPane>\n                <CTabPane>\n                  <table className=\"table\">\n                    <tbody>\n                      <tr>\n                        <td>Experts List</td>\n                      </tr>\n                      <tr>\n                        <td>Resources List</td>\n                      </tr>\n                    </tbody>\n                  </table>\n                </CTabPane>\n                <CTabPane>\n                  <UserPlanner />\n                </CTabPane>\n              </CTabContent>\n            </CTabs>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {};\n};\nconst mapDispatchToProps = (dispatch) => {\n  return bindActionCreators(\n    {\n      fetchOneUser,\n    },\n    dispatch\n  );\n};\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(User));\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/planner/Planner.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/UserPlanner.js",["264"],"import React from \"react\";\nimport Loader from \"../../loader\";\nimport {\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CTabs,\n  CNavItem,\n  CNavLink,\n  CNav,\n  CTabContent,\n  CTabPane,\n} from \"@coreui/react\";\n\nimport Network from \"./planner/Network\";\nimport Explore from \"./planner/Explore\";\nimport Learn from \"./planner/Learn\";\nimport Prepare from \"./planner/Prepare\";\nimport Apply from \"./planner/Apply\";\nconst UserPlanner = () => {\n  return (\n    <CRow>\n      <CCol lg={12}>\n        <CCard className=\"position-relative\">\n          <CCardHeader>\n            Click on a module below to see the information\n          </CCardHeader>\n          <CCardBody>\n            <CTabs>\n              <CNav variant=\"tabs\">\n                <CNavItem>\n                  <CNavLink>Explore</CNavLink>\n                </CNavItem>\n                <CNavItem>\n                  <CNavLink>Network</CNavLink>\n                </CNavItem>\n                <CNavItem>\n                  <CNavLink>Learn</CNavLink>\n                </CNavItem>\n                <CNavItem>\n                  <CNavLink>Prepare</CNavLink>\n                </CNavItem>\n                <CNavItem>\n                  <CNavLink>Apply</CNavLink>\n                </CNavItem>\n              </CNav>\n              <CTabContent>\n                <CTabPane>\n                  <Explore />\n                </CTabPane>\n                <CTabPane>\n                  <Network />\n                </CTabPane>\n                <CTabPane>\n                  <Learn />\n                </CTabPane>\n                <CTabPane>\n                  <Prepare />\n                </CTabPane>\n                <CTabPane>\n                  <Apply />\n                </CTabPane>\n              </CTabContent>\n            </CTabs>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  );\n};\nexport default UserPlanner;\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/common/toolTip.js",["265"],"import React, { useState } from \"react\";\nimport { Tooltip } from \"reactstrap\";\n\nexport default ({ placement = \"left\", target, children }) => {\n  const [tooltipOpen, setTooltipOpen] = useState(false);\n\n  const toggle = () => setTooltipOpen(!tooltipOpen);\n\n  return (\n    <Tooltip\n      placement={placement}\n      isOpen={tooltipOpen}\n      target={target}\n      toggle={toggle}\n    >\n      {children}\n    </Tooltip>\n  );\n};\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/common/commonModal.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/planner/Network.js",["266","267","268","269","270","271","272","273","274"],"import React, { useState } from \"react\";\nimport Loader from \"../../../loader\";\nimport {\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CBadge,\n  CTabs,\n  CNavItem,\n  CNavLink,\n  CNav,\n  CTabContent,\n  CTabPane,\n  CButton,\n  CCollapse,\n} from \"@coreui/react\";\nimport { Table } from \"reactstrap\";\nconst Network = (props) => {\n  const [accordion, setAccordion] = useState(1);\n  const getBadge = (status) => {\n    switch (status) {\n      case \"Done\":\n        return \"success\";\n\n      // case \"Not Verified\":\n      //   return \"danger\";\n      // case \"Activated\":\n      //   return \"success\";\n\n      // case \"Blocked\":\n      //   return \"danger\";\n      default:\n        return \"primary\";\n    }\n  };\n  return (\n    <div id=\"accordion\">\n      <CCard className=\"mb-0\">\n        <CCardHeader id=\"headingOne\">\n          <CButton\n            block\n            color=\"link\"\n            className=\"text-left m-0 p-0\"\n            onClick={() => setAccordion(accordion === 0 ? null : 0)}\n          >\n            <h5 className=\"m-0 p-0\">Existing Connections</h5>\n          </CButton>\n        </CCardHeader>\n        <CCollapse show={accordion === 0}>\n          <CCardBody>\n            <CCardHeader>\n              <table className=\"table\">\n                <tbody>\n                  <tr>\n                    <td>Status</td>\n                    <td>\n                      {\" \"}\n                      <CBadge color={getBadge(\"Done\")}>Done</CBadge>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n              <form>\n                <div className=\"text-center search-input\">\n                  <input\n                    type=\"search\"\n                    className=\"form-control\"\n                    placeholder=\"Search\"\n                    required\n                  />\n                </div>\n              </form>\n            </CCardHeader>\n            <Table responsive>\n              <thead>\n                <th className=\"text-nowrap \">Career Options</th>\n\n                <th>Family / Relatives</th>\n                <th>Friends</th>\n\n                <th>Professional Network</th>\n                <th>Other</th>\n              </thead>\n            </Table>\n          </CCardBody>\n        </CCollapse>\n      </CCard>\n      <CCard className=\"mb-0\">\n        <CCardHeader id=\"headingTwo\">\n          <CButton\n            block\n            color=\"link\"\n            className=\"text-left m-0 p-0\"\n            onClick={() => setAccordion(accordion === 1 ? null : 1)}\n          >\n            <h5 className=\"m-0 p-0\">New Connections</h5>\n          </CButton>\n        </CCardHeader>\n        <CCollapse show={accordion === 1}>\n          <CCardBody>\n            <CCardHeader>\n              <table className=\"table\">\n                <tbody>\n                  <tr>\n                    <td>Status</td>\n                    <td>\n                      {\" \"}\n                      <CBadge color={getBadge(\"Done\")}>Done</CBadge>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n              <form>\n                <div className=\"text-center search-input\">\n                  <input\n                    type=\"search\"\n                    className=\"form-control\"\n                    placeholder=\"Search\"\n                    required\n                  />\n                </div>\n              </form>\n            </CCardHeader>\n            <Table responsive>\n              {/* <thead>\n                <th className=\"text-nowrap \">My Interests,Skills and Values</th>\n\n                <th>World Needs</th>\n                <th>World Pays For</th>\n              </thead> */}\n            </Table>\n          </CCardBody>\n        </CCollapse>\n      </CCard>\n      <CCard className=\"mb-0\">\n        <CCardHeader id=\"headingThree\">\n          <CButton\n            block\n            color=\"link\"\n            className=\"text-left m-0 p-0\"\n            onClick={() => setAccordion(accordion === 2 ? null : 2)}\n          >\n            <h5 className=\"m-0 p-0\">Cold Messages</h5>\n          </CButton>\n        </CCardHeader>\n        <CCollapse show={accordion === 2}>\n          <CCardBody>\n            <CCardHeader>\n              <table className=\"table\">\n                <tbody>\n                  <tr>\n                    <td>Status</td>\n                    <td>\n                      {\" \"}\n                      <CBadge color={getBadge(\"Done\")}>Done</CBadge>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n              <form>\n                <div className=\"text-center search-input\">\n                  <input\n                    type=\"search\"\n                    className=\"form-control\"\n                    placeholder=\"Search\"\n                    required\n                  />\n                </div>\n              </form>\n            </CCardHeader>\n            <Table responsive>\n              <thead>\n                <th className=\"text-nowrap \">Title</th>\n\n                <th>Cold Message</th>\n              </thead>\n            </Table>\n          </CCardBody>\n        </CCollapse>\n      </CCard>\n\n      <CCard className=\"mb-0\">\n        <CCardHeader id=\"headingThree\">\n          <CButton\n            block\n            color=\"link\"\n            className=\"text-left m-0 p-0\"\n            onClick={() => setAccordion(accordion === 3 ? null : 3)}\n          >\n            <h5 className=\"m-0 p-0\">Key Takeaways</h5>\n          </CButton>\n        </CCardHeader>\n        <CCollapse show={accordion === 3}>\n          <CCardBody>\n            <CCardHeader>\n              <table className=\"table\">\n                <tbody>\n                  <tr>\n                    <td>Status</td>\n                    <td>\n                      {\" \"}\n                      <CBadge color={getBadge(\"Done\")}>Done</CBadge>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n              <form>\n                <div className=\"text-center search-input\">\n                  <input\n                    type=\"search\"\n                    className=\"form-control\"\n                    placeholder=\"Search\"\n                    required\n                  />\n                </div>\n              </form>\n            </CCardHeader>\n            <Table responsive>\n              <thead>\n                <th className=\"text-nowrap \">Name</th>\n\n                <th>Organization</th>\n                <th>Current Role</th>\n                <th>Relationship</th>\n                <th>Role & Industry Insights</th>\n                <th>Company Insights</th>\n                <th>Relevant Connections</th>\n                <th>Relevant Groups</th>\n                <th>Learning & Development</th>\n                <th>Job Search</th>\n                <th>Job Referral</th>\n                <th>Other</th>\n              </thead>\n            </Table>\n          </CCardBody>\n        </CCollapse>\n      </CCard>\n    </div>\n  );\n};\nexport default Network;\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/planner/Explore.js",["275","276","277","278","279","280","281","282","283"],"import React, { useState } from \"react\";\nimport Loader from \"../../../loader\";\nimport {\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CBadge,\n  CTabs,\n  CNavItem,\n  CNavLink,\n  CNav,\n  CTabContent,\n  CTabPane,\n  CButton,\n  CCollapse,\n} from \"@coreui/react\";\nimport { Table } from \"reactstrap\";\nconst Explore = (props) => {\n  const [accordion, setAccordion] = useState(1);\n  const getBadge = (status) => {\n    switch (status) {\n      case \"Done\":\n        return \"success\";\n\n      // case \"Not Verified\":\n      //   return \"danger\";\n      // case \"Activated\":\n      //   return \"success\";\n\n      // case \"Blocked\":\n      //   return \"danger\";\n      default:\n        return \"primary\";\n    }\n  };\n\n  return (\n    <div id=\"accordion\">\n      <CCard className=\"mb-0\">\n        <CCardHeader id=\"headingOne\">\n          <CButton\n            block\n            color=\"link\"\n            className=\"text-left m-0 p-0 d-flex justify-content-between\"\n            onClick={() => setAccordion(accordion === 0 ? null : 0)}\n          >\n            <h5 className=\"m-0 p-0\">Introspection</h5>\n            {/* <span className=\"done-txt\">Done</span> */}\n          </CButton>\n        </CCardHeader>\n        <CCollapse show={accordion === 0}>\n          <CCardBody>\n            <CCardHeader>\n              <table className=\"table\">\n                <tbody>\n                  <tr>\n                    <td>Status</td>\n                    <td>\n                      {\" \"}\n                      <CBadge color={getBadge(\"Done\")}>Done</CBadge>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n              <form>\n                <div className=\"text-center search-input\">\n                  <input\n                    type=\"search\"\n                    className=\"form-control\"\n                    placeholder=\"Search\"\n                    required\n                  />\n                </div>\n              </form>\n            </CCardHeader>\n            <Table responsive>\n              <thead>\n                <th className=\"text-nowrap \">Priority Level</th>\n\n                <th>My Interests</th>\n                <th>My Skills</th>\n\n                <th>My Values</th>\n              </thead>\n            </Table>\n          </CCardBody>\n        </CCollapse>\n      </CCard>\n      <CCard className=\"mb-0\">\n        <CCardHeader id=\"headingTwo\">\n          <CButton\n            block\n            color=\"link\"\n            className=\"text-left m-0 p-0\"\n            onClick={() => setAccordion(accordion === 1 ? null : 1)}\n          >\n            <h5 className=\"m-0 p-0\">Extrospection</h5>\n          </CButton>\n        </CCardHeader>\n        <CCollapse show={accordion === 1}>\n          <CCardBody>\n            <CCardHeader>\n              <table className=\"table\">\n                <tbody>\n                  <tr>\n                    <td>Status</td>\n                    <td>\n                      {\" \"}\n                      <CBadge color={getBadge(\"Done\")}>Done</CBadge>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n              <form>\n                <div className=\"text-center search-input\">\n                  <input\n                    type=\"search\"\n                    className=\"form-control\"\n                    placeholder=\"Search\"\n                    required\n                  />\n                </div>\n              </form>\n            </CCardHeader>\n            <Table responsive>\n              <thead>\n                <th className=\"text-nowrap \">My Interests,Skills and Values</th>\n\n                <th>World Needs</th>\n                <th>World Pays For</th>\n              </thead>\n            </Table>\n          </CCardBody>\n        </CCollapse>\n      </CCard>\n      <CCard className=\"mb-0\">\n        <CCardHeader id=\"headingThree\">\n          <CButton\n            block\n            color=\"link\"\n            className=\"text-left m-0 p-0\"\n            onClick={() => setAccordion(accordion === 2 ? null : 2)}\n          >\n            <h5 className=\"m-0 p-0\">Personality Assessment</h5>\n          </CButton>\n        </CCardHeader>\n        <CCollapse show={accordion === 2}>\n          <CCardHeader>\n            <table className=\"table\">\n              <tbody>\n                <tr>\n                  <td>Status</td>\n                  <td>\n                    {\" \"}\n                    <CBadge color={getBadge(\"Done\")}>Done</CBadge>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n            <form>\n              <div className=\"text-center search-input\">\n                <input\n                  type=\"search\"\n                  className=\"form-control\"\n                  placeholder=\"Search\"\n                  required\n                />\n              </div>\n            </form>\n          </CCardHeader>\n          <CCardBody>\n            <thead>\n              <th className=\"text-nowrap \">Career Option</th>\n            </thead>\n          </CCardBody>\n        </CCollapse>\n      </CCard>\n\n      <CCard className=\"mb-0\">\n        <CCardHeader id=\"headingThree\">\n          <CButton\n            block\n            color=\"link\"\n            className=\"text-left m-0 p-0\"\n            onClick={() => setAccordion(accordion === 3 ? null : 3)}\n          >\n            <h5 className=\"m-0 p-0\">Practical Understanding</h5>\n          </CButton>\n        </CCardHeader>\n        <CCollapse show={accordion === 3}>\n          <CCardBody>\n            <CCardHeader>\n              <table className=\"table\">\n                <tbody>\n                  <tr>\n                    <td>Status</td>\n                    <td>\n                      {\" \"}\n                      <CBadge color={getBadge(\"Done\")}>Done</CBadge>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n              <form>\n                <div className=\"text-center search-input\">\n                  <input\n                    type=\"search\"\n                    className=\"form-control\"\n                    placeholder=\"Search\"\n                    required\n                  />\n                </div>\n              </form>\n            </CCardHeader>\n            <Table responsive>\n              <thead>\n                <th className=\"text-nowrap \">Career Option</th>\n\n                <th>Practical Understanding Via</th>\n                <th>Contact Person</th>\n                <th>Contact Email</th>\n                <th>Notes On</th>\n              </thead>\n            </Table>\n          </CCardBody>\n        </CCollapse>\n      </CCard>\n\n      <CCard className=\"mb-0\">\n        <CCardHeader id=\"headingThree\">\n          <CButton\n            block\n            color=\"link\"\n            className=\"text-left m-0 p-0\"\n            onClick={() => setAccordion(accordion === 4 ? null : 4)}\n          >\n            <h5 className=\"m-0 p-0\">Career Options</h5>\n          </CButton>\n        </CCardHeader>\n        <CCollapse show={accordion === 4}>\n          <CCardBody>\n            <CCardHeader>\n              <table className=\"table\">\n                <tbody>\n                  <tr>\n                    <td>Status</td>\n                    <td>\n                      {\" \"}\n                      <CBadge color={getBadge(\"Done\")}>Done</CBadge>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n              <form>\n                <div className=\"text-center search-input\">\n                  <input\n                    type=\"search\"\n                    className=\"form-control\"\n                    placeholder=\"Search\"\n                    required\n                  />\n                </div>\n              </form>\n            </CCardHeader>\n            <Table responsive>\n              <thead>\n                <th className=\"text-nowrap \">Career Option</th>\n\n                <th>Pros</th>\n                <th>Cons</th>\n                <th>Net Score</th>\n                <th>Decision</th>\n              </thead>\n            </Table>\n          </CCardBody>\n        </CCollapse>\n      </CCard>\n    </div>\n  );\n};\nexport default Explore;\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/planner/Prepare.js",["284","285","286","287","288","289","290","291","292"],"import React, { useState } from \"react\";\nimport Loader from \"../../../loader\";\nimport {\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CBadge,\n  CTabs,\n  CNavItem,\n  CNavLink,\n  CNav,\n  CTabContent,\n  CTabPane,\n  CButton,\n  CCollapse,\n} from \"@coreui/react\";\nimport { Table } from \"reactstrap\";\nconst Prepare = (props) => {\n  const [accordion, setAccordion] = useState(1);\n  const getBadge = (status) => {\n    switch (status) {\n      case \"Done\":\n        return \"success\";\n\n      // case \"Not Verified\":\n      //   return \"danger\";\n      // case \"Activated\":\n      //   return \"success\";\n\n      // case \"Blocked\":\n      //   return \"danger\";\n      default:\n        return \"primary\";\n    }\n  };\n  return (\n    <div id=\"accordion\">\n      <CCard className=\"mb-0\">\n        <CCardHeader id=\"headingOne\">\n          <CButton\n            block\n            color=\"link\"\n            className=\"text-left m-0 p-0\"\n            onClick={() => setAccordion(accordion === 0 ? null : 0)}\n          >\n            <h5 className=\"m-0 p-0\">Job Application Prep</h5>\n          </CButton>\n        </CCardHeader>\n        <CCollapse show={accordion === 0}>\n          <CCardBody>\n            <CCardHeader>\n              <table className=\"table\">\n                <tbody>\n                  <tr>\n                    <td>Status</td>\n                    <td>\n                      {\" \"}\n                      <CBadge color={getBadge(\"Done\")}>Done</CBadge>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n              <form>\n                <div className=\"text-center search-input\">\n                  <input\n                    type=\"search\"\n                    className=\"form-control\"\n                    placeholder=\"Search\"\n                    required\n                  />\n                </div>\n              </form>\n            </CCardHeader>\n            <table className=\"table\">\n              <tbody>\n                <tr>\n                  <td>Resume</td>\n                </tr>\n                <tr>\n                  <td>Cover Letter Template</td>\n                </tr>\n                <tr>\n                  <td>Portfolio / Work Sample</td>\n                </tr>\n                <tr>\n                  <td>Video Profile</td>\n                </tr>\n                <tr>\n                  <td>LinkedIn Profile</td>\n                </tr>\n              </tbody>\n            </table>\n          </CCardBody>\n        </CCollapse>\n      </CCard>\n      <CCard className=\"mb-0\">\n        <CCardHeader id=\"headingTwo\">\n          <CButton\n            block\n            color=\"link\"\n            className=\"text-left m-0 p-0\"\n            onClick={() => setAccordion(accordion === 1 ? null : 1)}\n          >\n            <h5 className=\"m-0 p-0\">Interview Prep</h5>\n          </CButton>\n        </CCardHeader>\n        <CCollapse show={accordion === 1}>\n          <CCardBody>\n            <CCardHeader>\n              <table className=\"table\">\n                <tbody>\n                  <tr>\n                    <td>Status</td>\n                    <td>\n                      {\" \"}\n                      <CBadge color={getBadge(\"Done\")}>Done</CBadge>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n              <form>\n                <div className=\"text-center search-input\">\n                  <input\n                    type=\"search\"\n                    className=\"form-control\"\n                    placeholder=\"Search\"\n                    required\n                  />\n                </div>\n              </form>\n            </CCardHeader>\n            <Table responsive>\n              <thead>\n                <th className=\"text-nowrap \">Topic</th>\n\n                <th>Description</th>\n                <th>Sample Question</th>\n                <th>Talking Points</th>\n              </thead>\n            </Table>\n          </CCardBody>\n        </CCollapse>\n      </CCard>\n    </div>\n  );\n};\nexport default Prepare;\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/planner/Apply.js",["293","294","295","296","297","298","299","300","301"],"import React, { useState } from \"react\";\nimport Loader from \"../../../loader\";\nimport {\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CBadge,\n  CTabs,\n  CNavItem,\n  CNavLink,\n  CNav,\n  CTabContent,\n  CTabPane,\n  CButton,\n  CCollapse,\n} from \"@coreui/react\";\nimport { Table } from \"reactstrap\";\nconst Apply = (props) => {\n  const [accordion, setAccordion] = useState(1);\n  const getBadge = (status) => {\n    switch (status) {\n      case \"Done\":\n        return \"success\";\n\n      // case \"Not Verified\":\n      //   return \"danger\";\n      // case \"Activated\":\n      //   return \"success\";\n\n      // case \"Blocked\":\n      //   return \"danger\";\n      default:\n        return \"primary\";\n    }\n  };\n  return (\n    <div id=\"accordion\">\n      <CCard className=\"mb-0\">\n        <CCardHeader id=\"headingOne\">\n          <CButton\n            block\n            color=\"link\"\n            className=\"text-left m-0 p-0\"\n            onClick={() => setAccordion(accordion === 0 ? null : 0)}\n          >\n            <h5 className=\"m-0 p-0\">Job Application Tracker</h5>\n          </CButton>\n        </CCardHeader>\n        <CCollapse show={accordion === 0}>\n          <CCardBody>\n            <CCardHeader>\n              <table className=\"table\">\n                <tbody>\n                  <tr>\n                    <td>Status</td>\n                    <td>\n                      {\" \"}\n                      <CBadge color={getBadge(\"Done\")}>Done</CBadge>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n              <form>\n                <div className=\"text-center search-input\">\n                  <input\n                    type=\"search\"\n                    className=\"form-control\"\n                    placeholder=\"Search\"\n                    required\n                  />\n                </div>\n              </form>\n            </CCardHeader>\n            <Table responsive>\n              <thead>\n                <th className=\"text-nowrap \">Company</th>\n\n                <th>Position</th>\n                <th>Location</th>\n\n                <th>Application Deadline</th>\n                <th>Date Applied</th>\n                <th>Job Post URL</th>\n              </thead>\n            </Table>\n          </CCardBody>\n        </CCollapse>\n      </CCard>\n    </div>\n  );\n};\nexport default Apply;\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/planner/Learn.js",["302","303","304","305","306","307","308","309","310"],"import React, { useState } from \"react\";\nimport Loader from \"../../../loader\";\nimport {\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CBadge,\n  CTabs,\n  CNavItem,\n  CNavLink,\n  CNav,\n  CTabContent,\n  CTabPane,\n  CButton,\n  CCollapse,\n} from \"@coreui/react\";\nimport { Table } from \"reactstrap\";\nconst Learn = (props) => {\n  const [accordion, setAccordion] = useState(1);\n  const getBadge = (status) => {\n    switch (status) {\n      case \"Done\":\n        return \"success\";\n\n      // case \"Not Verified\":\n      //   return \"danger\";\n      // case \"Activated\":\n      //   return \"success\";\n\n      // case \"Blocked\":\n      //   return \"danger\";\n      default:\n        return \"primary\";\n    }\n  };\n  return (\n    <div id=\"accordion\">\n      <CCard className=\"mb-0\">\n        <CCardHeader id=\"headingOne\">\n          <CButton\n            block\n            color=\"link\"\n            className=\"text-left m-0 p-0\"\n            onClick={() => setAccordion(accordion === 0 ? null : 0)}\n          >\n            <h5 className=\"m-0 p-0\">Skills</h5>\n          </CButton>\n        </CCardHeader>\n        <CCollapse show={accordion === 0}>\n          <CCardBody>\n            <CCardHeader>\n              <table className=\"table\">\n                <tbody>\n                  <tr>\n                    <td>Status</td>\n                    <td>\n                      {\" \"}\n                      <CBadge color={getBadge(\"Done\")}>Done</CBadge>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n              <form>\n                <div className=\"text-center search-input\">\n                  <input\n                    type=\"search\"\n                    className=\"form-control\"\n                    placeholder=\"Search\"\n                    required\n                  />\n                </div>\n              </form>\n            </CCardHeader>\n            <Table responsive>\n              <thead>\n                <th className=\"text-nowrap \">My Hard Skills</th>\n\n                <th>My Soft Skills</th>\n                <th>Required Hard Skills</th>\n\n                <th>Required Soft Skills</th>\n              </thead>\n            </Table>\n          </CCardBody>\n        </CCollapse>\n      </CCard>\n      <CCard className=\"mb-0\">\n        <CCardHeader id=\"headingTwo\">\n          <CButton\n            block\n            color=\"link\"\n            className=\"text-left m-0 p-0\"\n            onClick={() => setAccordion(accordion === 1 ? null : 1)}\n          >\n            <h5 className=\"m-0 p-0\">Learning Platforms</h5>\n          </CButton>\n        </CCardHeader>\n        <CCollapse show={accordion === 1}>\n          <CCardBody>\n            <CCardHeader>\n              <table className=\"table\">\n                <tbody>\n                  <tr>\n                    <td>Status</td>\n                    <td>\n                      {\" \"}\n                      <CBadge color={getBadge(\"Done\")}>Done</CBadge>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n              <form>\n                <div className=\"text-center search-input\">\n                  <input\n                    type=\"search\"\n                    className=\"form-control\"\n                    placeholder=\"Search\"\n                    required\n                  />\n                </div>\n              </form>\n            </CCardHeader>\n            <Table responsive>\n              <thead>\n                <th className=\"text-nowrap \">Skills</th>\n\n                <th>Platform Name</th>\n                <th>Course Topic</th>\n                <th>Course Type</th>\n              </thead>\n            </Table>\n          </CCardBody>\n        </CCollapse>\n      </CCard>\n      <CCard className=\"mb-0\">\n        <CCardHeader id=\"headingThree\">\n          <CButton\n            block\n            color=\"link\"\n            className=\"text-left m-0 p-0\"\n            onClick={() => setAccordion(accordion === 2 ? null : 2)}\n          >\n            <h5 className=\"m-0 p-0\">Experimental Learning</h5>\n          </CButton>\n        </CCardHeader>\n        <CCollapse show={accordion === 2}>\n          <CCardBody>\n            <CCardHeader>\n              <table className=\"table\">\n                <tbody>\n                  <tr>\n                    <td>Status</td>\n                    <td>\n                      {\" \"}\n                      <CBadge color={getBadge(\"Done\")}>Done</CBadge>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n              <form>\n                <div className=\"text-center search-input\">\n                  <input\n                    type=\"search\"\n                    className=\"form-control\"\n                    placeholder=\"Search\"\n                    required\n                  />\n                </div>\n              </form>\n            </CCardHeader>\n            <Table responsive>\n              <thead>\n                <th className=\"text-nowrap \">Skills</th>\n\n                <th>Organization</th>\n                <th>Role</th>\n                <th>Role Type</th>\n              </thead>\n            </Table>\n          </CCardBody>\n        </CCollapse>\n      </CCard>\n    </div>\n  );\n};\nexport default Learn;\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/store/index.js",["311"],"import { applyMiddleware, createStore, compose } from \"redux\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport createSagaMiddleware from \"redux-saga\";\n\nimport { rootReducer } from \"./reducers/index\";\nimport rootSaga from \"./sagas/index\";\nimport logger from \"redux-logger\";\n\nconst persistConfig = {\n  debug: false,\n  key: \"root\",\n  keyPrefix: \"v.1\",\n  storage,\n};\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nexport const store = createStore(\n  persistedReducer,\n  compose(applyMiddleware(sagaMiddleware, logger))\n);\nexport const persistor = persistStore(store);\n\nsagaMiddleware.run(rootSaga);\nexport default { store, persistor };\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/serviceWorker.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/store/sagas/index.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/store/reducers/index.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/polyfill.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/assets/icons/index.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/views/store/reducer.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/views/store/sagas.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/common/axios.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/config.js",[],{"ruleId":"312","replacedBy":"313"},{"ruleId":"314","replacedBy":"315"},{"ruleId":"316","severity":1,"message":"317","line":170,"column":29,"nodeType":"318","endLine":170,"endColumn":50},{"ruleId":"319","severity":1,"message":"320","line":36,"column":17,"nodeType":"321","messageId":"322","endLine":36,"endColumn":20},{"ruleId":"319","severity":1,"message":"323","line":36,"column":22,"nodeType":"321","messageId":"322","endLine":36,"endColumn":25},{"ruleId":"319","severity":1,"message":"324","line":145,"column":9,"nodeType":"321","messageId":"322","endLine":145,"endColumn":14},{"ruleId":"319","severity":1,"message":"325","line":175,"column":21,"nodeType":"321","messageId":"322","endLine":175,"endColumn":32},{"ruleId":"319","severity":1,"message":"326","line":231,"column":13,"nodeType":"321","messageId":"322","endLine":231,"endColumn":17},{"ruleId":"327","severity":1,"message":"328","line":552,"column":62,"nodeType":"329","messageId":"330","endLine":552,"endColumn":63,"suggestions":"331"},{"ruleId":"327","severity":1,"message":"328","line":552,"column":105,"nodeType":"329","messageId":"330","endLine":552,"endColumn":106,"suggestions":"332"},{"ruleId":"333","severity":1,"message":"334","line":578,"column":72,"nodeType":"335","messageId":"336","endLine":578,"endColumn":74},{"ruleId":"333","severity":1,"message":"334","line":589,"column":71,"nodeType":"335","messageId":"336","endLine":589,"endColumn":73},{"ruleId":"319","severity":1,"message":"337","line":925,"column":7,"nodeType":"321","messageId":"322","endLine":925,"endColumn":19},{"ruleId":"319","severity":1,"message":"326","line":931,"column":7,"nodeType":"321","messageId":"322","endLine":931,"endColumn":11},{"ruleId":"338","severity":1,"message":"339","line":948,"column":17,"nodeType":"340","endLine":948,"endColumn":57},{"ruleId":"316","severity":1,"message":"317","line":1064,"column":25,"nodeType":"318","endLine":1064,"endColumn":39},{"ruleId":"316","severity":1,"message":"317","line":1172,"column":25,"nodeType":"318","endLine":1172,"endColumn":48},{"ruleId":"338","severity":1,"message":"339","line":1287,"column":27,"nodeType":"340","endLine":1287,"endColumn":61},{"ruleId":"338","severity":1,"message":"339","line":1313,"column":33,"nodeType":"340","endLine":1313,"endColumn":70},{"ruleId":"327","severity":1,"message":"328","line":299,"column":62,"nodeType":"329","messageId":"330","endLine":299,"endColumn":63,"suggestions":"341"},{"ruleId":"327","severity":1,"message":"328","line":299,"column":105,"nodeType":"329","messageId":"330","endLine":299,"endColumn":106,"suggestions":"342"},{"ruleId":"338","severity":1,"message":"339","line":682,"column":17,"nodeType":"340","endLine":682,"endColumn":57},{"ruleId":"338","severity":1,"message":"339","line":722,"column":25,"nodeType":"340","endLine":725,"endColumn":27},{"ruleId":"338","severity":1,"message":"339","line":851,"column":25,"nodeType":"340","endLine":851,"endColumn":59},{"ruleId":"338","severity":1,"message":"339","line":877,"column":31,"nodeType":"340","endLine":877,"endColumn":68},{"ruleId":"338","severity":1,"message":"339","line":889,"column":25,"nodeType":"340","endLine":889,"endColumn":59},{"ruleId":"338","severity":1,"message":"339","line":915,"column":31,"nodeType":"340","endLine":915,"endColumn":68},{"ruleId":"338","severity":1,"message":"339","line":934,"column":25,"nodeType":"340","endLine":934,"endColumn":59},{"ruleId":"338","severity":1,"message":"339","line":961,"column":31,"nodeType":"340","endLine":961,"endColumn":68},{"ruleId":"319","severity":1,"message":"343","line":3,"column":22,"nodeType":"321","messageId":"322","endLine":3,"endColumn":27},{"ruleId":"319","severity":1,"message":"344","line":1,"column":17,"nodeType":"321","messageId":"322","endLine":1,"endColumn":25},{"ruleId":"319","severity":1,"message":"345","line":13,"column":29,"nodeType":"321","messageId":"322","endLine":13,"endColumn":39},{"ruleId":"346","severity":1,"message":"347","line":3,"column":1,"nodeType":"348","endLine":14,"endColumn":3},{"ruleId":"349","severity":1,"message":"350","line":8,"column":20,"nodeType":"351","messageId":"336","endLine":8,"endColumn":22},{"ruleId":"352","severity":1,"message":"353","line":26,"column":6,"nodeType":"354","endLine":26,"endColumn":8,"suggestions":"355"},{"ruleId":"352","severity":1,"message":"356","line":114,"column":6,"nodeType":"354","endLine":114,"endColumn":14,"suggestions":"357"},{"ruleId":"338","severity":1,"message":"339","line":223,"column":31,"nodeType":"340","endLine":223,"endColumn":66},{"ruleId":"338","severity":1,"message":"339","line":235,"column":31,"nodeType":"340","endLine":235,"endColumn":68},{"ruleId":"338","severity":1,"message":"339","line":249,"column":35,"nodeType":"340","endLine":249,"endColumn":76},{"ruleId":"338","severity":1,"message":"339","line":267,"column":35,"nodeType":"340","endLine":267,"endColumn":74},{"ruleId":"319","severity":1,"message":"358","line":5,"column":3,"nodeType":"321","messageId":"322","endLine":5,"endColumn":14},{"ruleId":"352","severity":1,"message":"353","line":39,"column":6,"nodeType":"354","endLine":39,"endColumn":8,"suggestions":"359"},{"ruleId":"352","severity":1,"message":"360","line":95,"column":6,"nodeType":"354","endLine":95,"endColumn":14,"suggestions":"361"},{"ruleId":"338","severity":1,"message":"339","line":189,"column":31,"nodeType":"340","endLine":189,"endColumn":66},{"ruleId":"338","severity":1,"message":"339","line":199,"column":31,"nodeType":"340","endLine":199,"endColumn":68},{"ruleId":"352","severity":1,"message":"362","line":57,"column":6,"nodeType":"354","endLine":57,"endColumn":14,"suggestions":"363"},{"ruleId":"319","severity":1,"message":"364","line":1,"column":38,"nodeType":"321","messageId":"322","endLine":1,"endColumn":46},{"ruleId":"319","severity":1,"message":"358","line":7,"column":3,"nodeType":"321","messageId":"322","endLine":7,"endColumn":14},{"ruleId":"352","severity":1,"message":"353","line":41,"column":6,"nodeType":"354","endLine":41,"endColumn":8,"suggestions":"365"},{"ruleId":"319","severity":1,"message":"366","line":2,"column":8,"nodeType":"321","messageId":"322","endLine":2,"endColumn":14},{"ruleId":"346","severity":1,"message":"347","line":4,"column":1,"nodeType":"348","endLine":19,"endColumn":3},{"ruleId":"319","severity":1,"message":"366","line":2,"column":8,"nodeType":"321","messageId":"322","endLine":2,"endColumn":14},{"ruleId":"319","severity":1,"message":"367","line":7,"column":3,"nodeType":"321","messageId":"322","endLine":7,"endColumn":7},{"ruleId":"319","severity":1,"message":"368","line":8,"column":3,"nodeType":"321","messageId":"322","endLine":8,"endColumn":7},{"ruleId":"319","severity":1,"message":"369","line":10,"column":3,"nodeType":"321","messageId":"322","endLine":10,"endColumn":8},{"ruleId":"319","severity":1,"message":"370","line":11,"column":3,"nodeType":"321","messageId":"322","endLine":11,"endColumn":11},{"ruleId":"319","severity":1,"message":"371","line":12,"column":3,"nodeType":"321","messageId":"322","endLine":12,"endColumn":11},{"ruleId":"319","severity":1,"message":"372","line":13,"column":3,"nodeType":"321","messageId":"322","endLine":13,"endColumn":7},{"ruleId":"319","severity":1,"message":"373","line":14,"column":3,"nodeType":"321","messageId":"322","endLine":14,"endColumn":14},{"ruleId":"319","severity":1,"message":"374","line":15,"column":3,"nodeType":"321","messageId":"322","endLine":15,"endColumn":11},{"ruleId":"319","severity":1,"message":"366","line":2,"column":8,"nodeType":"321","messageId":"322","endLine":2,"endColumn":14},{"ruleId":"319","severity":1,"message":"367","line":7,"column":3,"nodeType":"321","messageId":"322","endLine":7,"endColumn":7},{"ruleId":"319","severity":1,"message":"368","line":8,"column":3,"nodeType":"321","messageId":"322","endLine":8,"endColumn":7},{"ruleId":"319","severity":1,"message":"369","line":10,"column":3,"nodeType":"321","messageId":"322","endLine":10,"endColumn":8},{"ruleId":"319","severity":1,"message":"370","line":11,"column":3,"nodeType":"321","messageId":"322","endLine":11,"endColumn":11},{"ruleId":"319","severity":1,"message":"371","line":12,"column":3,"nodeType":"321","messageId":"322","endLine":12,"endColumn":11},{"ruleId":"319","severity":1,"message":"372","line":13,"column":3,"nodeType":"321","messageId":"322","endLine":13,"endColumn":7},{"ruleId":"319","severity":1,"message":"373","line":14,"column":3,"nodeType":"321","messageId":"322","endLine":14,"endColumn":14},{"ruleId":"319","severity":1,"message":"374","line":15,"column":3,"nodeType":"321","messageId":"322","endLine":15,"endColumn":11},{"ruleId":"319","severity":1,"message":"366","line":2,"column":8,"nodeType":"321","messageId":"322","endLine":2,"endColumn":14},{"ruleId":"319","severity":1,"message":"367","line":7,"column":3,"nodeType":"321","messageId":"322","endLine":7,"endColumn":7},{"ruleId":"319","severity":1,"message":"368","line":8,"column":3,"nodeType":"321","messageId":"322","endLine":8,"endColumn":7},{"ruleId":"319","severity":1,"message":"369","line":10,"column":3,"nodeType":"321","messageId":"322","endLine":10,"endColumn":8},{"ruleId":"319","severity":1,"message":"370","line":11,"column":3,"nodeType":"321","messageId":"322","endLine":11,"endColumn":11},{"ruleId":"319","severity":1,"message":"371","line":12,"column":3,"nodeType":"321","messageId":"322","endLine":12,"endColumn":11},{"ruleId":"319","severity":1,"message":"372","line":13,"column":3,"nodeType":"321","messageId":"322","endLine":13,"endColumn":7},{"ruleId":"319","severity":1,"message":"373","line":14,"column":3,"nodeType":"321","messageId":"322","endLine":14,"endColumn":14},{"ruleId":"319","severity":1,"message":"374","line":15,"column":3,"nodeType":"321","messageId":"322","endLine":15,"endColumn":11},{"ruleId":"319","severity":1,"message":"366","line":2,"column":8,"nodeType":"321","messageId":"322","endLine":2,"endColumn":14},{"ruleId":"319","severity":1,"message":"367","line":7,"column":3,"nodeType":"321","messageId":"322","endLine":7,"endColumn":7},{"ruleId":"319","severity":1,"message":"368","line":8,"column":3,"nodeType":"321","messageId":"322","endLine":8,"endColumn":7},{"ruleId":"319","severity":1,"message":"369","line":10,"column":3,"nodeType":"321","messageId":"322","endLine":10,"endColumn":8},{"ruleId":"319","severity":1,"message":"370","line":11,"column":3,"nodeType":"321","messageId":"322","endLine":11,"endColumn":11},{"ruleId":"319","severity":1,"message":"371","line":12,"column":3,"nodeType":"321","messageId":"322","endLine":12,"endColumn":11},{"ruleId":"319","severity":1,"message":"372","line":13,"column":3,"nodeType":"321","messageId":"322","endLine":13,"endColumn":7},{"ruleId":"319","severity":1,"message":"373","line":14,"column":3,"nodeType":"321","messageId":"322","endLine":14,"endColumn":14},{"ruleId":"319","severity":1,"message":"374","line":15,"column":3,"nodeType":"321","messageId":"322","endLine":15,"endColumn":11},{"ruleId":"319","severity":1,"message":"366","line":2,"column":8,"nodeType":"321","messageId":"322","endLine":2,"endColumn":14},{"ruleId":"319","severity":1,"message":"367","line":7,"column":3,"nodeType":"321","messageId":"322","endLine":7,"endColumn":7},{"ruleId":"319","severity":1,"message":"368","line":8,"column":3,"nodeType":"321","messageId":"322","endLine":8,"endColumn":7},{"ruleId":"319","severity":1,"message":"369","line":10,"column":3,"nodeType":"321","messageId":"322","endLine":10,"endColumn":8},{"ruleId":"319","severity":1,"message":"370","line":11,"column":3,"nodeType":"321","messageId":"322","endLine":11,"endColumn":11},{"ruleId":"319","severity":1,"message":"371","line":12,"column":3,"nodeType":"321","messageId":"322","endLine":12,"endColumn":11},{"ruleId":"319","severity":1,"message":"372","line":13,"column":3,"nodeType":"321","messageId":"322","endLine":13,"endColumn":7},{"ruleId":"319","severity":1,"message":"373","line":14,"column":3,"nodeType":"321","messageId":"322","endLine":14,"endColumn":14},{"ruleId":"319","severity":1,"message":"374","line":15,"column":3,"nodeType":"321","messageId":"322","endLine":15,"endColumn":11},{"ruleId":"346","severity":1,"message":"375","line":28,"column":1,"nodeType":"348","endLine":28,"endColumn":37},"no-native-reassign",["376"],"no-negated-in-lhs",["377"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-unused-vars","'Row' is defined but never used.","Identifier","unusedVar","'Col' is defined but never used.","'price' is assigned a value but never used.","'serviceList' is assigned a value but never used.","'unit' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\+.","Literal","unnecessaryEscape",["378","379"],["380","381"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'selectedDate' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["382","383"],["384","385"],"'CFade' is defined but never used.","'useState' is defined but never used.","'TheSidebar' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'props'. Either include them or remove the dependency array.","ArrayExpression",["386"],"React Hook useEffect has a missing dependency: 'callApiToFetchAllExperts'. Either include it or remove the dependency array.",["387"],"'CCardHeader' is defined but never used.",["388"],"React Hook useEffect has a missing dependency: 'callApiToFetchAllResources'. Either include it or remove the dependency array.",["389"],"React Hook useEffect has a missing dependency: 'callApiToFetchAllUsers'. Either include it or remove the dependency array.",["390"],"'Fragment' is defined but never used.",["391"],"'Loader' is defined but never used.","'CCol' is defined but never used.","'CRow' is defined but never used.","'CTabs' is defined but never used.","'CNavItem' is defined but never used.","'CNavLink' is defined but never used.","'CNav' is defined but never used.","'CTabContent' is defined but never used.","'CTabPane' is defined but never used.","Assign object to a variable before exporting as module default","no-global-assign","no-unsafe-negation",{"messageId":"392","fix":"393","desc":"394"},{"messageId":"395","fix":"396","desc":"397"},{"messageId":"392","fix":"398","desc":"394"},{"messageId":"395","fix":"399","desc":"397"},{"messageId":"392","fix":"400","desc":"394"},{"messageId":"395","fix":"401","desc":"397"},{"messageId":"392","fix":"402","desc":"394"},{"messageId":"395","fix":"403","desc":"397"},{"desc":"404","fix":"405"},{"desc":"406","fix":"407"},{"desc":"404","fix":"408"},{"desc":"409","fix":"410"},{"desc":"411","fix":"412"},{"desc":"404","fix":"413"},"removeEscape",{"range":"414","text":"415"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"416","text":"417"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"418","text":"415"},{"range":"419","text":"417"},{"range":"420","text":"415"},{"range":"421","text":"417"},{"range":"422","text":"415"},{"range":"423","text":"417"},"Update the dependencies array to be: [dispatch, props]",{"range":"424","text":"425"},"Update the dependencies array to be: [callApiToFetchAllExperts, search]",{"range":"426","text":"427"},{"range":"428","text":"425"},"Update the dependencies array to be: [callApiToFetchAllResources, search]",{"range":"429","text":"430"},"Update the dependencies array to be: [callApiToFetchAllUsers, search]",{"range":"431","text":"432"},{"range":"433","text":"425"},[12655,12656],"",[12655,12655],"\\",[12698,12699],[12698,12698],[7058,7059],[7058,7058],[7101,7102],[7101,7101],[820,822],"[dispatch, props]",[3534,3542],"[callApiToFetchAllExperts, search]",[917,919],[3013,3021],"[callApiToFetchAllResources, search]",[1906,1914],"[callApiToFetchAllUsers, search]",[956,958]]