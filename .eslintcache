[{"/Volumes/DATA/Isha Kansal/reactjs/pivot-admin/src/index.js":"1","/Volumes/DATA/Isha Kansal/reactjs/pivot-admin/src/App.js":"2","/Volumes/DATA/Isha Kansal/reactjs/pivot-admin/src/reportWebVitals.js":"3","/Volumes/DATA/Isha Kansal/pivot-admin/src/index.js":"4","/Volumes/DATA/Isha Kansal/pivot-admin/src/App.js":"5","/Volumes/DATA/Isha Kansal/pivot-admin/src/store/index.js":"6","/Volumes/DATA/Isha Kansal/pivot-admin/src/polyfill.js":"7","/Volumes/DATA/Isha Kansal/pivot-admin/src/serviceWorker.js":"8","/Volumes/DATA/Isha Kansal/pivot-admin/src/store/sagas/index.js":"9","/Volumes/DATA/Isha Kansal/pivot-admin/src/store/reducers/index.js":"10","/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/TheLayout.js":"11","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/login/Login.js":"12","/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/index.js":"13","/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/TheSidebar.js":"14","/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/TheHeaderDropdown.js":"15","/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/TheHeader.js":"16","/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/TheContent.js":"17","/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/_nav.js":"18","/Volumes/DATA/Isha Kansal/pivot-admin/src/routes.js":"19","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/resources/Resources.js":"20","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/Users.js":"21","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/planners/Planners.js":"22","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/experts/Experts.js":"23","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/User.js":"24","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/UsersData.js":"25","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/experts/AddExpert.js":"26","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/resources/AddResource.js":"27","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/store/sagas.js":"28","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/store/types.js":"29","/Volumes/DATA/Isha Kansal/pivot-admin/src/common/axios.js":"30","/Volumes/DATA/Isha Kansal/pivot-admin/src/config.js":"31","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/store/reducer.js":"32","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/store/action.js":"33","/Volumes/DATA/Isha Kansal/pivot-admin/src/loader/index.js":"34","/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/icons.js":"35","/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/logo.js":"36","/Volumes/DATA/Isha Kansal/pivot-admin/src/assets/icons/index.js":"37","/Volumes/DATA/Isha Kansal/pivot-admin/src/common/commonModal.js":"38","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/resources/ResourcesData.js":"39","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/resources/EditResource.js":"40","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/resources/Resource.js":"41","/Volumes/DATA/Isha Kansal/pivot-admin/src/common/stringFunction.js":"42","/Volumes/DATA/Isha Kansal/pivot-admin/src/common/toolTip.js":"43"},{"size":500,"mtime":1612329326000,"results":"44","hashOfConfig":"45"},{"size":195,"mtime":1612330254000,"results":"46","hashOfConfig":"45"},{"size":362,"mtime":1612329326000,"results":"47","hashOfConfig":"45"},{"size":933,"mtime":1612777214000,"results":"48","hashOfConfig":"49"},{"size":1984,"mtime":1612953652000,"results":"50","hashOfConfig":"49"},{"size":774,"mtime":1612498790000,"results":"51","hashOfConfig":"49"},{"size":1895,"mtime":1612498790000,"results":"52","hashOfConfig":"49"},{"size":4686,"mtime":1612498790000,"results":"53","hashOfConfig":"49"},{"size":179,"mtime":1612762089000,"results":"54","hashOfConfig":"49"},{"size":186,"mtime":1612844550000,"results":"55","hashOfConfig":"49"},{"size":380,"mtime":1612498790000,"results":"56","hashOfConfig":"49"},{"size":6139,"mtime":1613104863000,"results":"57","hashOfConfig":"49"},{"size":284,"mtime":1612498790000,"results":"58","hashOfConfig":"49"},{"size":1293,"mtime":1612777470000,"results":"59","hashOfConfig":"49"},{"size":464,"mtime":1612498790000,"results":"60","hashOfConfig":"49"},{"size":765,"mtime":1613028365000,"results":"61","hashOfConfig":"49"},{"size":1164,"mtime":1612770427000,"results":"62","hashOfConfig":"49"},{"size":671,"mtime":1612776278000,"results":"63","hashOfConfig":"49"},{"size":1500,"mtime":1612955663000,"results":"64","hashOfConfig":"49"},{"size":5481,"mtime":1613128311000,"results":"65","hashOfConfig":"49"},{"size":8446,"mtime":1613128302000,"results":"66","hashOfConfig":"49"},{"size":709,"mtime":1612776116000,"results":"67","hashOfConfig":"49"},{"size":1604,"mtime":1612778142000,"results":"68","hashOfConfig":"49"},{"size":6137,"mtime":1613128152000,"results":"69","hashOfConfig":"49"},{"size":3214,"mtime":1612503074000,"results":"70","hashOfConfig":"49"},{"size":8772,"mtime":1612778142000,"results":"71","hashOfConfig":"49"},{"size":17881,"mtime":1613103555000,"results":"72","hashOfConfig":"49"},{"size":2652,"mtime":1613115065000,"results":"73","hashOfConfig":"49"},{"size":727,"mtime":1613113137000,"results":"74","hashOfConfig":"49"},{"size":1354,"mtime":1613103555000,"results":"75","hashOfConfig":"49"},{"size":173,"mtime":1612500055000,"results":"76","hashOfConfig":"49"},{"size":1762,"mtime":1613113307000,"results":"77","hashOfConfig":"49"},{"size":690,"mtime":1613115051000,"results":"78","hashOfConfig":"49"},{"size":340,"mtime":1613103961000,"results":"79","hashOfConfig":"49"},{"size":7217,"mtime":1612768792000,"results":"80","hashOfConfig":"49"},{"size":9997,"mtime":1612769714000,"results":"81","hashOfConfig":"49"},{"size":3924,"mtime":1612782108000,"results":"82","hashOfConfig":"49"},{"size":1619,"mtime":1613103555000,"results":"83","hashOfConfig":"49"},{"size":2273,"mtime":1612955858000,"results":"84","hashOfConfig":"49"},{"size":17883,"mtime":1613103555000,"results":"85","hashOfConfig":"49"},{"size":3417,"mtime":1613128311000,"results":"86","hashOfConfig":"49"},{"size":124,"mtime":1613034251000,"results":"87","hashOfConfig":"49"},{"size":424,"mtime":1613107911000,"results":"88","hashOfConfig":"49"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"161ocxv",{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},"z7vibx",{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"97"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"97"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"97"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"97"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"97"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"97"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"97"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"97"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"97"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},"/Volumes/DATA/Isha Kansal/reactjs/pivot-admin/src/index.js",[],"/Volumes/DATA/Isha Kansal/reactjs/pivot-admin/src/App.js",[],"/Volumes/DATA/Isha Kansal/reactjs/pivot-admin/src/reportWebVitals.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/index.js",[],["186","187"],"/Volumes/DATA/Isha Kansal/pivot-admin/src/App.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/store/index.js",["188"],"import { applyMiddleware, createStore, compose } from \"redux\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport createSagaMiddleware from \"redux-saga\";\n\nimport { rootReducer } from \"./reducers/index\";\nimport rootSaga from \"./sagas/index\";\nimport logger from \"redux-logger\";\n\nconst persistConfig = {\n  debug: false,\n  key: \"root\",\n  keyPrefix: \"v.1\",\n  storage,\n};\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nexport const store = createStore(\n  persistedReducer,\n  compose(applyMiddleware(sagaMiddleware, logger))\n);\nexport const persistor = persistStore(store);\n\nsagaMiddleware.run(rootSaga);\nexport default { store, persistor };\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/polyfill.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/serviceWorker.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/store/sagas/index.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/store/reducers/index.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/TheLayout.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/views/login/Login.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/index.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/TheSidebar.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/TheHeaderDropdown.js",["189"],"import React from \"react\";\nimport { Button } from \"reactstrap\";\nimport { Redirect } from \"react-router-dom\";\n\nconst TheHeaderDropdown = (props) => {\n  const handleLogout = (e) => {\n    e.preventDefault();\n    props.history.push(\"/login\");\n  };\n  return (\n    <div>\n      <Button\n        color=\"bordered\"\n        onClick={handleLogout}\n        className=\"logout-btn ml-2\"\n      >\n        Logout\n      </Button>\n    </div>\n  );\n};\n\nexport default TheHeaderDropdown;\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/TheHeader.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/TheContent.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/_nav.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/routes.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/views/resources/Resources.js",["190","191","192","193"],"import React, { useState, useEffect } from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { withRouter } from \"react-router-dom\";\nimport Pagination from \"react-js-pagination\";\nimport Tooltip from \"../../common/toolTip\";\nimport CommonModal from \"../../common/commonModal\";\nimport {\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CButton,\n  CDataTable,\n  CPagination,\n} from \"@coreui/react\";\nimport resourcesData from \"./ResourcesData\";\nimport EDIT from \"../../assets/icons/edit.svg\";\nimport DELETE from \"../../assets/icons/delete.svg\";\nconst Resources = (props) => {\n  const history = useHistory();\n  const queryPage = useLocation().search.match(/page=([0-9]+)/, \"\");\n  const currentPage = Number(queryPage && queryPage[1] ? queryPage[1] : 1);\n  const [page, setPage] = useState(currentPage);\n  const [search, setSearch] = useState(\"\");\n  const [modalOpen, setModalOpen] = useState(false);\n\n  const pageChange = (newPage) => {\n    currentPage !== newPage && history.push(`/resources?page=${newPage}`);\n  };\n  useEffect(() => {\n    currentPage !== page && setPage(currentPage);\n  }, [currentPage, page]);\n  const addResource = () => {\n    props.history.push(\"/addResource\");\n  };\n  const editResource = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    props.history.push(\"/editResource\");\n  };\n  const deleteResource = (e, item) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setModalOpen(!modalOpen);\n    // alert(\"deleted\");\n  };\n  const handleSearch = (e) => {\n    setSearch(e.target.value);\n  };\n  const filterRecords = () => {\n    // const search = search.trim().replace(/ +/g, \" \");\n    if (!search) return resourcesData;\n\n    return (\n      resourcesData &&\n      resourcesData.filter((data) => {\n        let isTrue;\n\n        if (data.name) {\n          isTrue = data.name.toLowerCase().includes(search);\n        }\n\n        return isTrue;\n      })\n    );\n  };\n  const searchRecords = filterRecords();\n  return (\n    <CRow>\n      <CCol xl={12}>\n        <form>\n          <div className=\"text-center search-input\">\n            <input\n              type=\"search\"\n              className=\"form-control\"\n              placeholder=\"Search\"\n              required\n              onChange={handleSearch}\n            />\n          </div>\n        </form>\n      </CCol>\n      <CCol xl={12}>\n        <div>\n          <CButton\n            style={{ width: 150 }}\n            block\n            color=\"info\"\n            onClick={addResource}\n          >\n            Add Resource\n          </CButton>\n        </div>\n      </CCol>\n\n      <CCol xl={12}>\n        <CCard>\n          <CCardBody>\n            <CCardBody>\n              <CDataTable\n                items={searchRecords}\n                fields={[\n                  { key: \"name\", _classes: \"font-weight-bold\" },\n                  \"format\",\n                  \"pricing\",\n                  \"action\",\n                ]}\n                scopedSlots={{\n                  action: (item, index) => (\n                    <td>\n                      <button\n                        id={`edit-${index}`}\n                        className=\"icon\"\n                        onClick={editResource}\n                      >\n                        <img src={EDIT} className=\"ml-3\" />\n                      </button>\n                      <Tooltip placement=\"left\" target={`edit-${index}`}>\n                        Edit\n                      </Tooltip>\n                      <button\n                        className=\"icon\"\n                        onClick={(e) => deleteResource(e, item.id)}\n                        id={`delete-${index}`}\n                      >\n                        <img src={DELETE} className=\"ml-3\" />\n                      </button>\n                      <Tooltip placement=\"right\" target={`delete-${index}`}>\n                        Delete\n                      </Tooltip>\n                    </td>\n                  ),\n                }}\n                itemsPerPage={10}\n                activePage={page}\n                clickableRows\n                onRowClick={(item) => history.push(`/resources/${item.id}`)}\n              />\n              <div className=\"text-center pagination-input\">\n                {resourcesData.length > 10 && (\n                  <Pagination\n                    className=\"mt-3 mx-auto w-fit-content\"\n                    itemClass=\"page-item\"\n                    linkClass=\"page-link\"\n                    activeClass=\"active\"\n                    activePage={page}\n                    itemsCountPerPage={10}\n                    totalItemsCount={resourcesData.length}\n                    pageRangeDisplayed={5}\n                    onChange={pageChange}\n                  />\n                )}\n              </div>\n              {/* <CPagination\n                activePage={page}\n                onActivePageChange={pageChange}\n                pages={5}\n                doubleArrows={false}\n                align=\"center\"\n              /> */}\n              <div>\n                {modalOpen && (\n                  <CommonModal\n                    isOpen={modalOpen}\n                    toggle={(e) => deleteResource(e)}\n                    // blockUser={(e) => blockUser(e, idUser)}\n                    // id={idUser}\n                    // type={type}\n                  />\n                )}\n              </div>\n            </CCardBody>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  );\n};\n\nexport default withRouter(Resources);\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/Users.js",["194","195","196","197","198","199","200","201","202","203","204","205"],"import React, { useState, useEffect } from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport Pagination from \"react-js-pagination\";\nimport CommonModal from \"../../common/commonModal\";\nimport { NotificationManager } from \"react-notifications\";\nimport { Table, Card, CardHeader, Button } from \"reactstrap\";\nimport {\n  CBadge,\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CDataTable,\n  CLabel,\n  CRow,\n} from \"@coreui/react\";\nimport Loader from \"../../loader\";\nimport { connect } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { withRouter } from \"react-router-dom\";\nimport usersData from \"./UsersData\";\nimport { fetchUsers, userStatus } from \"../store/action\";\n\nconst Users = (props) => {\n  const offsetLimit = 10;\n  const history = useHistory();\n  const queryPage = useLocation().search.match(/page=([0-9]+)/, \"\");\n  const currentPage = Number(queryPage && queryPage[1] ? queryPage[1] : 1);\n  const [page, setPage] = useState(currentPage);\n  const [search, setSearch] = useState(\"\");\n  const [modalOpen, setModalOpen] = useState(false);\n  const [type, setType] = useState(\"\");\n  const [unBlock, setUnblock] = useState([]);\n  const [idUser, setIdUser] = useState(\"\");\n  const [usersDetails, setUsersDetails] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [count, setCount] = useState(0);\n  const pageChange = (newPage) => {\n    console.log(\"498568459689458978\", newPage);\n    currentPage !== newPage && history.push(`/users?page=${newPage}`);\n    setLoading(true);\n\n    let limit = 10;\n    props.fetchUsers(\n      `user/all?offset=${newPage}&limit=${limit}&search=${search}`,\n      (value) => {\n        setLoading(false);\n        setUsersDetails(value.data.users);\n        setCount(value.data.count);\n        setPage(newPage);\n      }\n    );\n  };\n  const handleSearch = (e) => {\n    setSearch(e.target.value);\n  };\n  useEffect(() => {\n    currentPage !== page && setPage(currentPage);\n  }, [currentPage, page]);\n\n  useEffect(() => {\n    callApiToFetchAllUsers();\n  }, [search]);\n\n  const callApiToFetchAllUsers = () => {\n    setLoading(true);\n\n    let limit = 10;\n    props.fetchUsers(\n      `user/all?offset=${page}&limit=${limit}&search=${search}`,\n      (value) => {\n        setLoading(false);\n        setUsersDetails(value.data.users);\n        setCount(value.data.count);\n        // setPage(newPage);\n      }\n    );\n  };\n\n  const filterRecords = () => {\n    // const search = search.trim().replace(/ +/g, \" \");\n    if (!search) return usersDetails;\n\n    return (\n      usersDetails &&\n      usersDetails.filter((data) => {\n        let isTrue;\n        if (data.email) {\n          isTrue = data.email.toLowerCase().includes(search);\n        }\n        if (data.country) {\n          isTrue = data.country.toLowerCase().includes(search);\n        }\n        if (data.name) {\n          isTrue = data.name.toLowerCase().includes(search);\n        }\n\n        return isTrue;\n      })\n    );\n  };\n  const getBadge = (status) => {\n    switch (status) {\n      case \"Verified\":\n        return \"success\";\n\n      case \"Not Verified\":\n        return \"danger\";\n      default:\n        return \"primary\";\n    }\n  };\n  // const searchRecords = filterRecords();\n\n  const onBlock = (e, type, item) => {\n    setIdUser(item._id);\n    setType(type);\n    e.preventDefault();\n    e.stopPropagation();\n    setModalOpen(!modalOpen);\n  };\n  const blockUser = (id) => {\n    if (idUser === id) {\n      setModalOpen(false);\n\n      // let arr = unBlock.slice();\n      // arr.push(id);\n      // setUnblock(arr);\n      callApi(type, id);\n    }\n  };\n\n  const callApi = (type, id) => {\n    let obj = {\n      type: type,\n      id: id,\n    };\n\n    props.userStatus(\"user/change-status\", obj, (value) => {\n      if (value.status === 200) {\n        NotificationManager.success(value.message, \"\", 1000);\n        callApiToFetchAllUsers();\n      }\n    });\n  };\n  // if (usersDetails.length === 0) {\n  //   return <h3 className=\"text-center no-user-found\">No Users Found!</h3>;\n  // } else {\n  console.log(\"4958698459867945789\", usersDetails, count);\n  return (\n    <CRow>\n      <CCol xl={12}>\n        <form>\n          <div className=\"text-center search-input\">\n            <input\n              type=\"search\"\n              className=\"form-control\"\n              placeholder=\"Search\"\n              required\n              onChange={handleSearch}\n            />\n          </div>\n        </form>\n      </CCol>\n\n      <CCol xl={12}>\n        <CCard className=\"position-relative\">\n          {loading && <Loader />}\n          <CCardBody>\n            <Table\n              className={`table ${\n                usersDetails.length === 0 ? \"tableHeight\" : \"\"\n              }`}\n            >\n              <thead>\n                <tr>\n                  <th className=\"text-nowrap \">Name</th>\n\n                  <th>Email</th>\n                  <th>Status</th>\n\n                  <th>Country</th>\n                  <th>Action</th>\n                </tr>\n              </thead>\n              <tbody>\n                {usersDetails && usersDetails.length === 0 && (\n                  <h3 className=\"text-center no-user-found\">No Users Found!</h3>\n                )}\n                {usersDetails &&\n                  usersDetails.length > 0 &&\n                  usersDetails.map((item, index) => {\n                    return (\n                      <tr\n                        style={{ cursor: \"pointer\" }}\n                        onClick={() =>\n                          history.push({\n                            pathname: `/users/${item._id}`,\n                            state: usersDetails,\n                          })\n                        }\n                      >\n                        <td>\n                          {\" \"}\n                          {item.first_name && item.last_name\n                            ? item.first_name + \" \" + item.last_name\n                            : \"-\"}\n                        </td>\n                        <td>{item.email ? item.email : \"-\"}</td>\n                        <td>\n                          <CBadge\n                            color={getBadge(\n                              !item.is_verified ? \"Not Verified\" : \"Verified\"\n                            )}\n                          >\n                            {!item.is_verified ? \"Not Verified\" : \"Verified\"}\n                          </CBadge>\n                        </td>\n                        <td>{item.country ? item.country : \"-\"}</td>\n                        <td>\n                          {item.status === \"blocked\" ? (\n                            <CButton\n                              onClick={(e) => onBlock(e, \"unblock\", item)}\n                              className=\"Unblock-btn block-btn\"\n                            >\n                              UnBlock\n                            </CButton>\n                          ) : item.status === \"activated\" ? (\n                            <div>\n                              <CButton\n                                onClick={(e) => onBlock(e, \"block\", item)}\n                                className=\"block-btn block-btn\"\n                              >\n                                Block\n                              </CButton>{\" \"}\n                            </div>\n                          ) : item.status === \"deactivated\" ? (\n                            <div>\n                              <CButton\n                                onClick={(e) => onBlock(e, \"block\", item)}\n                                className=\"block-btn block-btn\"\n                              >\n                                Block\n                              </CButton>\n                            </div>\n                          ) : (\n                            <CButton\n                              onClick={(e) => onBlock(e, \"block\", item)}\n                              className=\"block-btn block-btn\"\n                            >\n                              Block\n                            </CButton>\n                          )}\n                        </td>\n                      </tr>\n                    );\n                  })}\n              </tbody>\n            </Table>\n\n            <div className=\"text-center pagination-input\">\n              {count > 10 && (\n                <Pagination\n                  className=\"mt-3 mx-auto w-fit-content\"\n                  itemClass=\"page-item\"\n                  linkClass=\"page-link\"\n                  activeClass=\"active\"\n                  activePage={page}\n                  itemsCountPerPage={offsetLimit}\n                  totalItemsCount={count}\n                  pageRangeDisplayed={5}\n                  onChange={pageChange}\n                />\n              )}\n            </div>\n            <div>\n              {modalOpen && (\n                <CommonModal\n                  isOpen={modalOpen}\n                  toggle={(e) => onBlock(e, type, idUser)}\n                  blockUser={(e) => blockUser(e, idUser)}\n                  id={idUser}\n                  type={type}\n                />\n              )}\n            </div>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {};\n};\nconst mapDispatchToProps = (dispatch) => {\n  return bindActionCreators(\n    {\n      fetchUsers,\n      userStatus,\n    },\n    dispatch\n  );\n};\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Users));\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/planners/Planners.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/views/experts/Experts.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/User.js",["206","207","208"],"import React, { useState, useEffect, Fragment } from \"react\";\nimport {\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CBadge,\n} from \"@coreui/react\";\nimport Loader from \"../../loader\";\nimport CIcon from \"@coreui/icons-react\";\nimport { connect } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { withRouter } from \"react-router-dom\";\nimport { titleCase } from \"../../common/stringFunction\";\n\nimport { fetchUsers, fetchOneUser } from \"../store/action\";\nconst User = (props) => {\n  const [user, setUser] = useState({});\n  const [loading, setLoading] = useState(false);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    setLoading(true);\n\n    const user_id = props && props.match.params.id;\n    dispatch(\n      fetchOneUser(`user/${user_id}`, (value) => {\n        setUser(value.data.user);\n        setLoading(false);\n      })\n    );\n  }, []);\n\n  const getBadge = (status) => {\n    switch (status) {\n      case \"Verified\":\n        return \"success\";\n\n      case \"Not Verified\":\n        return \"danger\";\n      case \"Activated\":\n        return \"success\";\n\n      case \"Blocked\":\n        return \"danger\";\n      default:\n        return \"primary\";\n    }\n  };\n\n  return (\n    <CRow>\n      <CCol lg={12}>\n        <CCard className=\"position-relative\">\n          {loading && <Loader />}\n          <CCardHeader>Account Details</CCardHeader>\n          <CCardBody>\n            {user && (\n              <table className=\"table\">\n                <tbody>\n                  <tr>\n                    <td>Action</td>\n\n                    <td>\n                      <CBadge\n                        color={getBadge(\n                          user.status === \"blocked\" ? \"Blocked\" : \"Activated\"\n                        )}\n                      >\n                        {user.status === \"blocked\" ? \"Blocked\" : \"Activated\"}\n                      </CBadge>\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>UID</td>\n                    <td>\n                      <strong>{user._id}</strong>\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>Status</td>\n\n                    <td>\n                      <CBadge\n                        color={getBadge(\n                          !user.is_verified ? \"Not Verified\" : \"Verified\"\n                        )}\n                      >\n                        {!user.is_verified ? \"Not Verified\" : \"Verified\"}\n                      </CBadge>\n                    </td>\n                  </tr>\n                  {user.first_name && (\n                    <tr>\n                      <td>First name</td>\n                      <td>\n                        <strong>{user.first_name}</strong>\n                      </td>\n                    </tr>\n                  )}\n                  {user.last_name && (\n                    <tr>\n                      <td>Last name</td>\n                      <td>\n                        <strong>{user.last_name}</strong>\n                      </td>\n                    </tr>\n                  )}\n                  {user.contact_no && (\n                    <tr>\n                      <td>Contact</td>\n                      <td>\n                        <strong>{user.contact_no}</strong>\n                      </td>\n                    </tr>\n                  )}\n                  {user.email && (\n                    <tr>\n                      <td>Email</td>\n                      <td>\n                        <strong>{user.email}</strong>\n                      </td>\n                    </tr>\n                  )}\n                  {user.gender && (\n                    <tr>\n                      <td>Gender</td>\n                      <td>\n                        <strong>{user.gender}</strong>\n                      </td>\n                    </tr>\n                  )}\n                  {user.role && (\n                    <tr>\n                      <td>Role</td>\n                      <td>\n                        <strong>{user.role}</strong>\n                      </td>\n                    </tr>\n                  )}\n                  {user.country && (\n                    <tr>\n                      <td>Country</td>\n                      <td>\n                        <strong>{user.country}</strong>\n                      </td>\n                    </tr>\n                  )}\n                  {user.industry && (\n                    <tr>\n                      <td>Industry</td>\n                      <td>\n                        <strong>{user.industry}</strong>\n                      </td>\n                    </tr>\n                  )}\n                  {user.full_time_work_experience && (\n                    <tr>\n                      <td>Work Experience</td>\n                      <td>\n                        <strong>{user.full_time_work_experience}</strong>\n                      </td>\n                    </tr>\n                  )}\n\n                  {user.reason_for_career_change &&\n                    user.reason_for_career_change.length > 0 &&\n                    user.reason_for_career_change.map((item, key) => {\n                      const length = user.reason_for_career_change.length;\n                      return (\n                        <tr>\n                          <td>Career Change Reason</td>\n                          <td>\n                            <strong>\n                              <Fragment key={key}>\n                                {key === length - 1 ? item : `${item} , `}\n                              </Fragment>\n                            </strong>\n                          </td>\n                        </tr>\n                      );\n                    })}\n                </tbody>\n              </table>\n            )}\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {};\n};\nconst mapDispatchToProps = (dispatch) => {\n  return bindActionCreators(\n    {\n      fetchUsers,\n      fetchOneUser,\n    },\n    dispatch\n  );\n};\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(User));\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/UsersData.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/views/experts/AddExpert.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/views/resources/AddResource.js",["209","210","211","212","213","214","215","216","217","218","219","220","221"],"import React, { Component } from \"react\";\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardFooter,\n  CCardHeader,\n  CCol,\n  CForm,\n  CFormGroup,\n  CTextarea,\n  CInput,\n  CLabel,\n  CRow,\n  CSelect,\n} from \"@coreui/react\";\nimport CameraIcon from \"../../assets/icons/photo-camera.svg\";\nimport ADD from \"../../assets/icons/add.svg\";\nimport CANCEL from \"../../assets/icons/cancel.svg\";\nimport { Input } from \"reactstrap\";\nimport CIcon from \"@coreui/icons-react\";\nimport Avatar from \"../../assets/icons/avatar.png\";\nclass AddResource extends Component {\n  constructor(props) {\n    super();\n    this.state = {\n      name: \"\",\n      format: \"\",\n      pricing: \"\",\n\n      uniqueSellingProposition: \"\",\n      errorType: \"\",\n      errorText: \"\",\n      expertImage: null,\n      plusBit: false,\n      pros: [],\n      cons: [],\n      details: [],\n    };\n  }\n  // uploadImage = (event) => {\n  //   if (event.target.files && event.target.files[0]) {\n  //     var reader = new FileReader();\n  //     reader.onloadend = function () {\n  //       // props.setImage(reader.result);\n  //       this.setState({\n  //         expertImage: reader.result,\n  //       });\n  //     }.bind(this);\n  //     reader.readAsDataURL(event.target.files[0]);\n  //   }\n  // };\n  errorShow = (type) => {\n    console.log(\"485789497894\", type);\n    const { errorType, errorText } = this.state;\n    return errorType === type ? <p>{errorText}</p> : null;\n  };\n  clearError = () => {\n    this.setState({\n      errorType: \"\",\n      errorText: \"\",\n    });\n  };\n  inputHandler = (e) => {\n    this.clearError();\n    this.setState({ [e.target.name]: e.target.value });\n  };\n  inputProsCons = (e, index, type) => {\n    if (type === \"prosAdd\") {\n      let prosToUpdate = this.state.pros[index];\n      const newArray = [...this.state.pros];\n      prosToUpdate = {\n        ...prosToUpdate,\n        value: e.target.value,\n      };\n      newArray[index] = prosToUpdate;\n\n      this.clearError();\n      this.setState({ [e.target.name]: e.target.value, pros: newArray });\n    }\n    if (type === \"consAdd\") {\n      let consToUpdate = this.state.cons[index];\n      const newArray = [...this.state.cons];\n      consToUpdate = {\n        ...consToUpdate,\n        value: e.target.value,\n      };\n      newArray[index] = consToUpdate;\n\n      this.clearError();\n      this.setState({ [e.target.name]: e.target.value, cons: newArray });\n    }\n    if (type === \"detailsAdd\") {\n      let detailsToUpdate = this.state.details[index];\n      const newArray = [...this.state.details];\n      detailsToUpdate = {\n        ...detailsToUpdate,\n        value: e.target.value,\n      };\n      newArray[index] = detailsToUpdate;\n\n      this.clearError();\n      this.setState({ [e.target.name]: e.target.value, details: newArray });\n    }\n  };\n  onSubmit = (e) => {\n    const {\n      name,\n      format,\n      pricing,\n      details,\n      uniqueSellingProposition,\n      pros,\n      cons,\n    } = this.state;\n\n    if (name === \"\") {\n      this.setState({\n        errorType: \"name\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Name should not be empty</b>\n          </span>\n        ),\n      });\n      return;\n    }\n    if (name !== \"\") {\n      let filter = /^[a-zA-Z0-9]+([-_\\s]{1}[a-zA-Z0-9]+)*$/;\n\n      if (!filter.test(name)) {\n        this.setState({\n          errorType: \"name\",\n          errorText: (\n            <span className=\"text-danger\">\n              <b>\n                {\" \"}\n                Name should be combination of alphanumeric text, underscore,\n                space and hyphen\n              </b>\n            </span>\n          ),\n        });\n        return;\n      }\n    }\n    if (format === \"\") {\n      this.setState({\n        errorType: \"format\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Select any format</b>\n          </span>\n        ),\n      });\n      return;\n    }\n    if (pricing === \"\") {\n      this.setState({\n        errorType: \"pricing\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Please enter type of pricing</b>\n          </span>\n        ),\n      });\n      return;\n    }\n    if (pros.length === 0) {\n      this.setState({\n        errorType: \"pros\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Please add some pros</b>\n          </span>\n        ),\n      });\n      return;\n    }\n    if (cons.length === 0) {\n      this.setState({\n        errorType: \"cons\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Please add some cons</b>\n          </span>\n        ),\n      });\n      return;\n    }\n    if (details.length === 0) {\n      this.setState({\n        errorType: \"details\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Please add some details</b>\n          </span>\n        ),\n      });\n      return;\n    }\n\n    if (uniqueSellingProposition === \"\") {\n      this.setState({\n        errorType: \"uniqueSellingProposition\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Please enter some information</b>\n          </span>\n        ),\n      });\n      return;\n    }\n  };\n  resetState = (e) => {\n    const { name, format } = this.state;\n    console.log(\"895849587984597845\", name, format);\n    e.preventDefault();\n    this.setState({\n      name: \"\",\n      format: \"\",\n      pricing: \"\",\n      details: [],\n      pros: [],\n      cons: [],\n      uniqueSellingProposition: \"\",\n      errorType: \"\",\n      errorText: \"\",\n    });\n  };\n  handleBack = (e) => {\n    e.preventDefault();\n    this.props.history.push(\"/resources\");\n  };\n  handlePlusButton = (e, type) => {\n    console.log(\"847984857840\", type);\n    if (type === \"prosAdd\") {\n      const { pros } = this.state;\n      const newArr = [...pros];\n      e.preventDefault();\n      e.stopPropagation();\n      let newPros = {\n        value: \"\",\n      };\n      newArr.push(newPros);\n      this.setState({\n        pros: newArr,\n      });\n    }\n    if (type === \"consAdd\") {\n      const { cons } = this.state;\n      const newArr = [...cons];\n      e.preventDefault();\n      e.stopPropagation();\n      let newCons = {\n        value: \"\",\n      };\n      newArr.push(newCons);\n      this.setState({\n        cons: newArr,\n      });\n    }\n    if (type === \"detailsAdd\") {\n      const { details } = this.state;\n      const newArr = [...details];\n      e.preventDefault();\n      e.stopPropagation();\n      let newDetails = {\n        value: \"\",\n      };\n      newArr.push(newDetails);\n      this.setState({\n        details: newArr,\n      });\n    }\n  };\n  handleCancel = (e, index, type) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (type === \"prosAdd\") {\n      const { pros } = this.state;\n      console.log(\"94586794897894\", pros);\n      const newArr = [...pros];\n      newArr.splice(index, 1);\n      this.setState({\n        pros: newArr,\n      });\n    }\n    if (type === \"consAdd\") {\n      const { cons } = this.state;\n      console.log(\"94586794897894\", cons);\n      const newArr = [...cons];\n      newArr.splice(index, 1);\n      this.setState({\n        cons: newArr,\n      });\n    }\n    if (type === \"detailsAdd\") {\n      const { details } = this.state;\n      console.log(\"94586794897894\", details);\n      const newArr = [...details];\n      newArr.splice(index, 1);\n      this.setState({\n        details: newArr,\n      });\n    }\n  };\n  render() {\n    const {\n      name,\n      format,\n      pricing,\n      uniqueSellingProposition,\n\n      expertImage,\n      plusBit,\n      pros,\n      cons,\n      details,\n    } = this.state;\n\n    return (\n      <CRow>\n        <CCol xs=\"12\" sm=\"12\">\n          <CCard>\n            <CCardHeader>\n              <CButton onClick={this.handleBack} className=\"backBtn\">\n                <i className=\"fas fa-arrow-left\"></i>Back\n              </CButton>\n              {/* <div className=\"update-profile-image\">\n                <img\n                  id=\"output\"\n                  src={expertImage ? expertImage : Avatar}\n                  alt=\"profile\"\n                  className=\"profile negative-margin\"\n                />\n                <div>\n                  <Input\n                    type=\"file\"\n                    accept=\"image/*\"\n                    id=\"f-upload\"\n                    name=\"myImage\"\n                    onChange={this.uploadImage}\n                    className=\"d-none\"\n                  />\n                  <label htmlFor=\"f-upload\" class=\"custom-file-upload\">\n                    <div className=\"camera-btn\" onClick={this.uploadImage}>\n                      <img src={CameraIcon} alt=\"camera\" />\n                    </div>\n                  </label>\n                </div>\n              </div> */}\n            </CCardHeader>\n            <CCardBody>\n              <CForm\n                action=\"\"\n                method=\"post\"\n                encType=\"multipart/form-data\"\n                className=\"form-horizontal\"\n              >\n                <CFormGroup row></CFormGroup>\n                <CFormGroup row>\n                  <CCol md=\"3\">\n                    <CLabel htmlFor=\"name\">Name</CLabel>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"9\">\n                    <CInput\n                      id=\"name\"\n                      name=\"name\"\n                      placeholder=\"Name\"\n                      onChange={this.inputHandler}\n                      value={name}\n                    />\n                    {this.errorShow(\"name\")}\n                  </CCol>\n                </CFormGroup>\n                <CFormGroup row>\n                  <CCol md=\"3\">\n                    <CLabel htmlFor=\"format\">Format</CLabel>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"9\">\n                    <CSelect\n                      custom\n                      name=\"format\"\n                      id=\"format\"\n                      onChange={this.inputHandler}\n                    >\n                      <option value=\"select\">Select</option>\n                      <option value=\"remote\">Remote</option>\n                    </CSelect>\n                    {this.errorShow(\"format\")}\n                  </CCol>\n                </CFormGroup>\n                <CFormGroup row>\n                  <CCol md=\"3\">\n                    <CLabel htmlFor=\"pricing\">Pricing</CLabel>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"9\">\n                    <CSelect\n                      custom\n                      name=\"pricing\"\n                      id=\"pricing\"\n                      onChange={this.inputHandler}\n                    >\n                      <option value=\"select\">Select</option>\n                      <option value=\"economical\">Economical</option>\n                    </CSelect>\n                    {this.errorShow(\"pricing\")}\n                  </CCol>\n                </CFormGroup>\n                <CFormGroup row>\n                  <CCol md=\"3\">\n                    <CLabel htmlFor=\"prosCons\">Pros & Cons</CLabel>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"9\">\n                    <div class=\"d-flex justify-content-between add-list\">\n                      <CLabel htmlFor=\"pros\">Pros</CLabel>\n                      <button\n                        className=\"icon\"\n                        onClick={(e) => this.handlePlusButton(e, \"prosAdd\")}\n                      >\n                        <img src={ADD} className=\"ml-3\" />\n                      </button>\n                    </div>\n                    {this.errorShow(\"pros\")}\n                    {pros &&\n                      pros.length > 0 &&\n                      pros.map((el, index) => {\n                        return (\n                          <div className=\"d-flex align-items-center mb-2 \">\n                            {/* <input value={el.value} /> */}\n                            <CInput\n                              type=\"text\"\n                              id={`pros${index}`}\n                              name={`pros${index}`}\n                              placeholder={`${index + 1}.`}\n                              autoComplete={`pros${index}`}\n                              onChange={(e) => {\n                                this.inputProsCons(e, index, \"prosAdd\");\n                              }}\n                              // value={`pros${index}`}\n                            />\n                            <button\n                              className=\"icon\"\n                              onClick={(e) =>\n                                this.handleCancel(e, index, \"prosAdd\")\n                              }\n                            >\n                              <img src={CANCEL} className=\"ml-3\" />\n                            </button>\n                          </div>\n                        );\n                      })}\n\n                    {/* {this.errorShow(\"fields\")} */}\n                    <div class=\"d-flex justify-content-between add-list\">\n                      <CLabel htmlFor=\"cons\">Cons</CLabel>\n                      <button\n                        className=\"icon\"\n                        onClick={(e) => this.handlePlusButton(e, \"consAdd\")}\n                      >\n                        <img src={ADD} className=\"ml-3\" />\n                      </button>\n                    </div>\n                    {this.errorShow(\"cons\")}\n                    {cons &&\n                      cons.length > 0 &&\n                      cons.map((el, index) => {\n                        return (\n                          <div className=\"d-flex align-items-center mb-2\">\n                            {/* <input value={el.value} /> */}\n                            <CInput\n                              type=\"text\"\n                              id={`cons${index}`}\n                              name={`cons${index}`}\n                              placeholder={`${index + 1}.`}\n                              autoComplete={`cons${index}`}\n                              onChange={(e) => {\n                                this.inputProsCons(e, index, \"consAdd\");\n                              }}\n                              // value={`pros${index}`}\n                            />\n                            <button\n                              className=\"icon\"\n                              onClick={(e) =>\n                                this.handleCancel(e, index, \"consAdd\")\n                              }\n                            >\n                              <img src={CANCEL} className=\"ml-3\" />\n                            </button>\n                          </div>\n                        );\n                      })}\n                  </CCol>\n                </CFormGroup>\n\n                <CFormGroup row>\n                  <CCol md=\"3\">\n                    <CLabel htmlFor=\"details\">Details</CLabel>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"9\">\n                    <div class=\"d-flex justify-content-between add-list\">\n                      <CLabel htmlFor=\"addDetails\">Add</CLabel>\n                      <button\n                        className=\"icon\"\n                        onClick={(e) => this.handlePlusButton(e, \"detailsAdd\")}\n                      >\n                        <img src={ADD} className=\"ml-3\" />\n                      </button>\n                    </div>\n                    {this.errorShow(\"details\")}\n                    {details &&\n                      details.length > 0 &&\n                      details.map((el, index) => {\n                        return (\n                          <div className=\"d-flex align-items-center mb-2\">\n                            {/* <input value={el.value} /> */}\n                            <CInput\n                              type=\"text\"\n                              id={`details${index}`}\n                              name={`details${index}`}\n                              placeholder={`${index + 1}.`}\n                              autoComplete={`details${index}`}\n                              onChange={(e) => {\n                                this.inputProsCons(e, index, \"detailsAdd\");\n                              }}\n                              // value={`pros${index}`}\n                            />\n\n                            <button\n                              className=\"icon\"\n                              onClick={(e) =>\n                                this.handleCancel(e, index, \"detailsAdd\")\n                              }\n                            >\n                              <img src={CANCEL} className=\"ml-3\" />\n                            </button>\n                            {/* {this.errorShow(\"details\")} */}\n                          </div>\n                        );\n                      })}\n                  </CCol>\n                </CFormGroup>\n\n                <CFormGroup row>\n                  <CCol md=\"3\">\n                    <CLabel htmlFor=\"uniqueSellingProposition\">\n                      Unique Selling Proposition\n                    </CLabel>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"9\">\n                    <CTextarea\n                      name=\"uniqueSellingProposition\"\n                      id=\"uniqueSellingProposition\"\n                      rows=\"9\"\n                      onChange={this.inputHandler}\n                      placeholder=\"Content...\"\n                      value={uniqueSellingProposition}\n                    />\n                    {this.errorShow(\"uniqueSellingProposition\")}\n                  </CCol>\n                </CFormGroup>\n              </CForm>\n            </CCardBody>\n            <CCardFooter>\n              <CButton\n                type=\"submit\"\n                size=\"sm\"\n                color=\"primary\"\n                onClick={this.onSubmit}\n              >\n                <CIcon name=\"cil-scrubber\" /> Submit\n              </CButton>\n              <CButton\n                type=\"reset\"\n                size=\"sm\"\n                color=\"danger\"\n                onClick={this.resetState}\n              >\n                <CIcon name=\"cil-ban\" /> Reset\n              </CButton>\n            </CCardFooter>\n          </CCard>\n        </CCol>\n      </CRow>\n    );\n  }\n}\n\nexport default AddResource;\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/store/sagas.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/views/store/types.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/common/axios.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/config.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/views/store/reducer.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/views/store/action.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/loader/index.js",["222","223"],"import React from \"react\";\nconst dots = [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}];\nexport default () => (\n  <>\n    <div className=\"loader-backdrop\" />\n    <div className=\"content-loader\">\n      <div className=\"dot-loader\">\n        {dots.map(({}, index) => (\n          <div key={index} />\n        ))}\n      </div>\n    </div>\n  </>\n);\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/icons.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/logo.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/assets/icons/index.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/common/commonModal.js",["224"],"import React from \"react\";\nimport { Button, Modal, ModalBody, ModalHeader } from \"reactstrap\";\n// import DeleteIcon from \"../assets/images/dashboard/delete-modal-icon.png\";\n// import CloseIcon from \"../assets/images/dashboard/closeIcon.png\";\n\nclass CommonModal extends React.Component {\n  render() {\n    const { isOpen, toggle, loading, blockUser, type, id } = this.props;\n    console.log(\"dhjfgdjh\", this.props);\n    return (\n      <Modal\n        isOpen={isOpen}\n        toggle={toggle}\n        className=\"deleteModal mt-5 modal-dialog-centered\"\n      >\n        <ModalHeader toggle={toggle}>\n          {type === \"block\" ? (\n            <h2>Want to Block</h2>\n          ) : type === \"unblock\" ? (\n            <h2>Want to Unblock</h2>\n          ) : type === \"deactivate\" ? (\n            <h2>Want to Deactivate</h2>\n          ) : (\n            \"\"\n          )}\n        </ModalHeader>\n        <ModalBody className=\"text-center\">\n          <div className=\"text-center mb-3\"></div>\n\n          {type === \"block\" ? (\n            <p>Do you really want to block this user ?</p>\n          ) : type === \"unblock\" ? (\n            <p>Do you really want to unblock this user ?</p>\n          ) : type === \"deactivate\" ? (\n            <p>Do you really want to deactivate this user ?</p>\n          ) : (\n            \"\"\n          )}\n          <div className=\"text-center deleteBtn mt-4\">\n            <Button\n              color=\"success\"\n              onClick={() => blockUser(id)}\n              // disabled={loading}\n            >\n              Yes, Confirmed\n            </Button>\n          </div>\n        </ModalBody>\n      </Modal>\n    );\n  }\n}\n\nexport default CommonModal;\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/resources/ResourcesData.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/views/resources/EditResource.js",["225","226","227","228","229","230","231","232","233","234","235","236","237"],"import React, { Component } from \"react\";\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardFooter,\n  CCardHeader,\n  CCol,\n  CForm,\n  CFormGroup,\n  CTextarea,\n  CInput,\n  CLabel,\n  CRow,\n  CSelect,\n} from \"@coreui/react\";\nimport CameraIcon from \"../../assets/icons/photo-camera.svg\";\nimport ADD from \"../../assets/icons/add.svg\";\nimport CANCEL from \"../../assets/icons/cancel.svg\";\nimport { Input } from \"reactstrap\";\nimport CIcon from \"@coreui/icons-react\";\nimport Avatar from \"../../assets/icons/avatar.png\";\nclass EditResource extends Component {\n  constructor(props) {\n    super();\n    this.state = {\n      name: \"\",\n      format: \"\",\n      pricing: \"\",\n\n      uniqueSellingProposition: \"\",\n      errorType: \"\",\n      errorText: \"\",\n      expertImage: null,\n      plusBit: false,\n      pros: [],\n      cons: [],\n      details: [],\n    };\n  }\n  // uploadImage = (event) => {\n  //   if (event.target.files && event.target.files[0]) {\n  //     var reader = new FileReader();\n  //     reader.onloadend = function () {\n  //       // props.setImage(reader.result);\n  //       this.setState({\n  //         expertImage: reader.result,\n  //       });\n  //     }.bind(this);\n  //     reader.readAsDataURL(event.target.files[0]);\n  //   }\n  // };\n  errorShow = (type) => {\n    console.log(\"485789497894\", type);\n    const { errorType, errorText } = this.state;\n    return errorType === type ? <p>{errorText}</p> : null;\n  };\n  clearError = () => {\n    this.setState({\n      errorType: \"\",\n      errorText: \"\",\n    });\n  };\n  inputHandler = (e) => {\n    this.clearError();\n    this.setState({ [e.target.name]: e.target.value });\n  };\n  inputProsCons = (e, index, type) => {\n    if (type === \"prosAdd\") {\n      let prosToUpdate = this.state.pros[index];\n      const newArray = [...this.state.pros];\n      prosToUpdate = {\n        ...prosToUpdate,\n        value: e.target.value,\n      };\n      newArray[index] = prosToUpdate;\n\n      this.clearError();\n      this.setState({ [e.target.name]: e.target.value, pros: newArray });\n    }\n    if (type === \"consAdd\") {\n      let consToUpdate = this.state.cons[index];\n      const newArray = [...this.state.cons];\n      consToUpdate = {\n        ...consToUpdate,\n        value: e.target.value,\n      };\n      newArray[index] = consToUpdate;\n\n      this.clearError();\n      this.setState({ [e.target.name]: e.target.value, cons: newArray });\n    }\n    if (type === \"detailsAdd\") {\n      let detailsToUpdate = this.state.details[index];\n      const newArray = [...this.state.details];\n      detailsToUpdate = {\n        ...detailsToUpdate,\n        value: e.target.value,\n      };\n      newArray[index] = detailsToUpdate;\n\n      this.clearError();\n      this.setState({ [e.target.name]: e.target.value, details: newArray });\n    }\n  };\n  onSubmit = (e) => {\n    const {\n      name,\n      format,\n      pricing,\n      details,\n      uniqueSellingProposition,\n      pros,\n      cons,\n    } = this.state;\n\n    if (name === \"\") {\n      this.setState({\n        errorType: \"name\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Name should not be empty</b>\n          </span>\n        ),\n      });\n      return;\n    }\n    if (name !== \"\") {\n      let filter = /^[a-zA-Z0-9]+([-_\\s]{1}[a-zA-Z0-9]+)*$/;\n\n      if (!filter.test(name)) {\n        this.setState({\n          errorType: \"name\",\n          errorText: (\n            <span className=\"text-danger\">\n              <b>\n                {\" \"}\n                Name should be combination of alphanumeric text, underscore,\n                space and hyphen\n              </b>\n            </span>\n          ),\n        });\n        return;\n      }\n    }\n    if (format === \"\") {\n      this.setState({\n        errorType: \"format\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Select any format</b>\n          </span>\n        ),\n      });\n      return;\n    }\n    if (pricing === \"\") {\n      this.setState({\n        errorType: \"pricing\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Please enter type of pricing</b>\n          </span>\n        ),\n      });\n      return;\n    }\n    if (pros.length === 0) {\n      this.setState({\n        errorType: \"pros\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Please add some pros</b>\n          </span>\n        ),\n      });\n      return;\n    }\n    if (cons.length === 0) {\n      this.setState({\n        errorType: \"cons\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Please add some cons</b>\n          </span>\n        ),\n      });\n      return;\n    }\n    if (details.length === 0) {\n      this.setState({\n        errorType: \"details\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Please add some details</b>\n          </span>\n        ),\n      });\n      return;\n    }\n\n    if (uniqueSellingProposition === \"\") {\n      this.setState({\n        errorType: \"uniqueSellingProposition\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Please enter some information</b>\n          </span>\n        ),\n      });\n      return;\n    }\n  };\n  resetState = (e) => {\n    const { name, format } = this.state;\n    console.log(\"895849587984597845\", name, format);\n    e.preventDefault();\n    this.setState({\n      name: \"\",\n      format: \"\",\n      pricing: \"\",\n      details: [],\n      pros: [],\n      cons: [],\n      uniqueSellingProposition: \"\",\n      errorType: \"\",\n      errorText: \"\",\n    });\n  };\n  handleBack = (e) => {\n    e.preventDefault();\n    this.props.history.push(\"/resources\");\n  };\n  handlePlusButton = (e, type) => {\n    console.log(\"847984857840\", type);\n    if (type === \"prosAdd\") {\n      const { pros } = this.state;\n      const newArr = [...pros];\n      e.preventDefault();\n      e.stopPropagation();\n      let newPros = {\n        value: \"\",\n      };\n      newArr.push(newPros);\n      this.setState({\n        pros: newArr,\n      });\n    }\n    if (type === \"consAdd\") {\n      const { cons } = this.state;\n      const newArr = [...cons];\n      e.preventDefault();\n      e.stopPropagation();\n      let newCons = {\n        value: \"\",\n      };\n      newArr.push(newCons);\n      this.setState({\n        cons: newArr,\n      });\n    }\n    if (type === \"detailsAdd\") {\n      const { details } = this.state;\n      const newArr = [...details];\n      e.preventDefault();\n      e.stopPropagation();\n      let newDetails = {\n        value: \"\",\n      };\n      newArr.push(newDetails);\n      this.setState({\n        details: newArr,\n      });\n    }\n  };\n  handleCancel = (e, index, type) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (type === \"prosAdd\") {\n      const { pros } = this.state;\n      console.log(\"94586794897894\", pros);\n      const newArr = [...pros];\n      newArr.splice(index, 1);\n      this.setState({\n        pros: newArr,\n      });\n    }\n    if (type === \"consAdd\") {\n      const { cons } = this.state;\n      console.log(\"94586794897894\", cons);\n      const newArr = [...cons];\n      newArr.splice(index, 1);\n      this.setState({\n        cons: newArr,\n      });\n    }\n    if (type === \"detailsAdd\") {\n      const { details } = this.state;\n      console.log(\"94586794897894\", details);\n      const newArr = [...details];\n      newArr.splice(index, 1);\n      this.setState({\n        details: newArr,\n      });\n    }\n  };\n  render() {\n    const {\n      name,\n      format,\n      pricing,\n      uniqueSellingProposition,\n\n      expertImage,\n      plusBit,\n      pros,\n      cons,\n      details,\n    } = this.state;\n\n    return (\n      <CRow>\n        <CCol xs=\"12\" sm=\"12\">\n          <CCard>\n            <CCardHeader>\n              <CButton onClick={this.handleBack} className=\"backBtn\">\n                <i className=\"fas fa-arrow-left\"></i>Back\n              </CButton>\n              {/* <div className=\"update-profile-image\">\n                <img\n                  id=\"output\"\n                  src={expertImage ? expertImage : Avatar}\n                  alt=\"profile\"\n                  className=\"profile negative-margin\"\n                />\n                <div>\n                  <Input\n                    type=\"file\"\n                    accept=\"image/*\"\n                    id=\"f-upload\"\n                    name=\"myImage\"\n                    onChange={this.uploadImage}\n                    className=\"d-none\"\n                  />\n                  <label htmlFor=\"f-upload\" class=\"custom-file-upload\">\n                    <div className=\"camera-btn\" onClick={this.uploadImage}>\n                      <img src={CameraIcon} alt=\"camera\" />\n                    </div>\n                  </label>\n                </div>\n              </div> */}\n            </CCardHeader>\n            <CCardBody>\n              <CForm\n                action=\"\"\n                method=\"post\"\n                encType=\"multipart/form-data\"\n                className=\"form-horizontal\"\n              >\n                <CFormGroup row></CFormGroup>\n                <CFormGroup row>\n                  <CCol md=\"3\">\n                    <CLabel htmlFor=\"name\">Name</CLabel>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"9\">\n                    <CInput\n                      id=\"name\"\n                      name=\"name\"\n                      placeholder=\"Name\"\n                      onChange={this.inputHandler}\n                      value={name}\n                    />\n                    {this.errorShow(\"name\")}\n                  </CCol>\n                </CFormGroup>\n                <CFormGroup row>\n                  <CCol md=\"3\">\n                    <CLabel htmlFor=\"format\">Format</CLabel>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"9\">\n                    <CSelect\n                      custom\n                      name=\"format\"\n                      id=\"format\"\n                      onChange={this.inputHandler}\n                    >\n                      <option value=\"select\">Select</option>\n                      <option value=\"remote\">Remote</option>\n                    </CSelect>\n                    {this.errorShow(\"format\")}\n                  </CCol>\n                </CFormGroup>\n                <CFormGroup row>\n                  <CCol md=\"3\">\n                    <CLabel htmlFor=\"pricing\">Pricing</CLabel>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"9\">\n                    <CSelect\n                      custom\n                      name=\"pricing\"\n                      id=\"pricing\"\n                      onChange={this.inputHandler}\n                    >\n                      <option value=\"select\">Select</option>\n                      <option value=\"economical\">Economical</option>\n                    </CSelect>\n                    {this.errorShow(\"pricing\")}\n                  </CCol>\n                </CFormGroup>\n                <CFormGroup row>\n                  <CCol md=\"3\">\n                    <CLabel htmlFor=\"prosCons\">Pros & Cons</CLabel>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"9\">\n                    <div class=\"d-flex justify-content-between add-list\">\n                      <CLabel htmlFor=\"pros\">Pros</CLabel>\n                      <button\n                        className=\"icon\"\n                        onClick={(e) => this.handlePlusButton(e, \"prosAdd\")}\n                      >\n                        <img src={ADD} className=\"ml-3\" />\n                      </button>\n                    </div>\n                    {this.errorShow(\"pros\")}\n                    {pros &&\n                      pros.length > 0 &&\n                      pros.map((el, index) => {\n                        return (\n                          <div className=\"d-flex align-items-center mb-2 \">\n                            {/* <input value={el.value} /> */}\n                            <CInput\n                              type=\"text\"\n                              id={`pros${index}`}\n                              name={`pros${index}`}\n                              placeholder={`${index + 1}.`}\n                              autoComplete={`pros${index}`}\n                              onChange={(e) => {\n                                this.inputProsCons(e, index, \"prosAdd\");\n                              }}\n                              // value={`pros${index}`}\n                            />\n                            <button\n                              className=\"icon\"\n                              onClick={(e) =>\n                                this.handleCancel(e, index, \"prosAdd\")\n                              }\n                            >\n                              <img src={CANCEL} className=\"ml-3\" />\n                            </button>\n                          </div>\n                        );\n                      })}\n\n                    {/* {this.errorShow(\"fields\")} */}\n                    <div class=\"d-flex justify-content-between add-list\">\n                      <CLabel htmlFor=\"cons\">Cons</CLabel>\n                      <button\n                        className=\"icon\"\n                        onClick={(e) => this.handlePlusButton(e, \"consAdd\")}\n                      >\n                        <img src={ADD} className=\"ml-3\" />\n                      </button>\n                    </div>\n                    {this.errorShow(\"cons\")}\n                    {cons &&\n                      cons.length > 0 &&\n                      cons.map((el, index) => {\n                        return (\n                          <div className=\"d-flex align-items-center mb-2\">\n                            {/* <input value={el.value} /> */}\n                            <CInput\n                              type=\"text\"\n                              id={`cons${index}`}\n                              name={`cons${index}`}\n                              placeholder={`${index + 1}.`}\n                              autoComplete={`cons${index}`}\n                              onChange={(e) => {\n                                this.inputProsCons(e, index, \"consAdd\");\n                              }}\n                              // value={`pros${index}`}\n                            />\n                            <button\n                              className=\"icon\"\n                              onClick={(e) =>\n                                this.handleCancel(e, index, \"consAdd\")\n                              }\n                            >\n                              <img src={CANCEL} className=\"ml-3\" />\n                            </button>\n                          </div>\n                        );\n                      })}\n                  </CCol>\n                </CFormGroup>\n\n                <CFormGroup row>\n                  <CCol md=\"3\">\n                    <CLabel htmlFor=\"details\">Details</CLabel>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"9\">\n                    <div class=\"d-flex justify-content-between add-list\">\n                      <CLabel htmlFor=\"addDetails\">Add</CLabel>\n                      <button\n                        className=\"icon\"\n                        onClick={(e) => this.handlePlusButton(e, \"detailsAdd\")}\n                      >\n                        <img src={ADD} className=\"ml-3\" />\n                      </button>\n                    </div>\n                    {this.errorShow(\"details\")}\n                    {details &&\n                      details.length > 0 &&\n                      details.map((el, index) => {\n                        return (\n                          <div className=\"d-flex align-items-center mb-2\">\n                            {/* <input value={el.value} /> */}\n                            <CInput\n                              type=\"text\"\n                              id={`details${index}`}\n                              name={`details${index}`}\n                              placeholder={`${index + 1}.`}\n                              autoComplete={`details${index}`}\n                              onChange={(e) => {\n                                this.inputProsCons(e, index, \"detailsAdd\");\n                              }}\n                              // value={`pros${index}`}\n                            />\n\n                            <button\n                              className=\"icon\"\n                              onClick={(e) =>\n                                this.handleCancel(e, index, \"detailsAdd\")\n                              }\n                            >\n                              <img src={CANCEL} className=\"ml-3\" />\n                            </button>\n                            {/* {this.errorShow(\"details\")} */}\n                          </div>\n                        );\n                      })}\n                  </CCol>\n                </CFormGroup>\n\n                <CFormGroup row>\n                  <CCol md=\"3\">\n                    <CLabel htmlFor=\"uniqueSellingProposition\">\n                      Unique Selling Proposition\n                    </CLabel>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"9\">\n                    <CTextarea\n                      name=\"uniqueSellingProposition\"\n                      id=\"uniqueSellingProposition\"\n                      rows=\"9\"\n                      onChange={this.inputHandler}\n                      placeholder=\"Content...\"\n                      value={uniqueSellingProposition}\n                    />\n                    {this.errorShow(\"uniqueSellingProposition\")}\n                  </CCol>\n                </CFormGroup>\n              </CForm>\n            </CCardBody>\n            <CCardFooter>\n              <CButton\n                type=\"submit\"\n                size=\"sm\"\n                color=\"primary\"\n                onClick={this.onSubmit}\n              >\n                <CIcon name=\"cil-scrubber\" /> Submit\n              </CButton>\n              <CButton\n                type=\"reset\"\n                size=\"sm\"\n                color=\"danger\"\n                onClick={this.resetState}\n              >\n                <CIcon name=\"cil-ban\" /> Reset\n              </CButton>\n            </CCardFooter>\n          </CCard>\n        </CCol>\n      </CRow>\n    );\n  }\n}\n\nexport default EditResource;\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/resources/Resource.js",["238"],"import React from \"react\";\nimport { CCard, CCardBody, CCardHeader, CCol, CRow } from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\n\nimport resourcesData from \"./ResourcesData\";\n\nconst Resource = ({ match }) => {\n  const resource = resourcesData.find(\n    (resource) => resource.id.toString() === match.params.id\n  );\n\n  // const resourcesDetails = resource\n  //   ? Object.entries(resource)\n  //   : [\n  //       [\n  //         \"id\",\n  //         <span>\n  //           <CIcon className=\"text-muted\" name=\"cui-icon-ban\" /> Not found\n  //         </span>,\n  //       ],\n  //     ];\n\n  return (\n    <CRow>\n      <CCol lg={12}>\n        <CCard>\n          {/* <CCardHeader>Resource id: {match.params.id}</CCardHeader> */}\n          <CCardHeader>Resource Details</CCardHeader>\n          {/* <CCardBody>\n            <table className=\"table\">\n              <tbody>\n                {resourcesDetails.map(([key, value], index) => {\n                  return (\n                    <tr key={index.toString()}>\n                      <td>{`${key}:`}</td>\n                      <td>\n                        <strong>{value}</strong>\n                      </td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </CCardBody> */}\n          <CCardBody>\n            {resource && (\n              <table className=\"table\">\n                <tbody>\n                  <tr>\n                    <td>RID</td>\n                    <td>\n                      <strong>{resource.id}</strong>\n                    </td>\n                  </tr>\n\n                  {resource.name && (\n                    <tr>\n                      <td>Name</td>\n                      <td>\n                        <strong>{resource.name}</strong>\n                      </td>\n                    </tr>\n                  )}\n                  {resource.format && (\n                    <tr>\n                      <td>Format</td>\n                      <td>\n                        <strong>{resource.format}</strong>\n                      </td>\n                    </tr>\n                  )}\n                  {resource.pricing && (\n                    <tr>\n                      <td>Pricing</td>\n                      <td>\n                        <strong>{resource.pricing}</strong>\n                      </td>\n                    </tr>\n                  )}\n                  {resource.unique_selling_proposition && (\n                    <tr>\n                      <td>Unique Selling Proposition</td>\n                      <td>\n                        <strong>{resource.unique_selling_proposition}</strong>\n                      </td>\n                    </tr>\n                  )}\n                  {resource.pros_and_cons && (\n                    <tr>\n                      <td>Pros & Cons</td>\n                      <td>\n                        <strong>{resource.pros_and_cons}</strong>\n                      </td>\n                    </tr>\n                  )}\n                  {resource.details && (\n                    <tr>\n                      <td>Details</td>\n                      <td>\n                        <strong>{resource.details}</strong>\n                      </td>\n                    </tr>\n                  )}\n                </tbody>\n              </table>\n            )}\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  );\n};\n\nexport default Resource;\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/common/stringFunction.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/common/toolTip.js",[],{"ruleId":"239","replacedBy":"240"},{"ruleId":"241","replacedBy":"242"},{"ruleId":"243","severity":1,"message":"244","line":28,"column":1,"nodeType":"245","endLine":28,"endColumn":37},{"ruleId":"246","severity":1,"message":"247","line":3,"column":10,"nodeType":"248","messageId":"249","endLine":3,"endColumn":18},{"ruleId":"246","severity":1,"message":"250","line":10,"column":3,"nodeType":"248","messageId":"249","endLine":10,"endColumn":14},{"ruleId":"246","severity":1,"message":"251","line":15,"column":3,"nodeType":"248","messageId":"249","endLine":15,"endColumn":14},{"ruleId":"252","severity":1,"message":"253","line":118,"column":25,"nodeType":"254","endLine":118,"endColumn":60},{"ruleId":"252","severity":1,"message":"253","line":128,"column":25,"nodeType":"254","endLine":128,"endColumn":62},{"ruleId":"246","severity":1,"message":"255","line":6,"column":17,"nodeType":"248","messageId":"249","endLine":6,"endColumn":21},{"ruleId":"246","severity":1,"message":"256","line":6,"column":23,"nodeType":"248","messageId":"249","endLine":6,"endColumn":33},{"ruleId":"246","severity":1,"message":"257","line":6,"column":35,"nodeType":"248","messageId":"249","endLine":6,"endColumn":41},{"ruleId":"246","severity":1,"message":"250","line":12,"column":3,"nodeType":"248","messageId":"249","endLine":12,"endColumn":14},{"ruleId":"246","severity":1,"message":"258","line":14,"column":3,"nodeType":"248","messageId":"249","endLine":14,"endColumn":13},{"ruleId":"246","severity":1,"message":"259","line":15,"column":3,"nodeType":"248","messageId":"249","endLine":15,"endColumn":9},{"ruleId":"246","severity":1,"message":"260","line":20,"column":10,"nodeType":"248","messageId":"249","endLine":20,"endColumn":21},{"ruleId":"246","severity":1,"message":"261","line":23,"column":8,"nodeType":"248","messageId":"249","endLine":23,"endColumn":17},{"ruleId":"246","severity":1,"message":"262","line":35,"column":10,"nodeType":"248","messageId":"249","endLine":35,"endColumn":17},{"ruleId":"246","severity":1,"message":"263","line":35,"column":19,"nodeType":"248","messageId":"249","endLine":35,"endColumn":29},{"ruleId":"264","severity":1,"message":"265","line":65,"column":6,"nodeType":"266","endLine":65,"endColumn":14,"suggestions":"267"},{"ruleId":"246","severity":1,"message":"268","line":82,"column":9,"nodeType":"248","messageId":"249","endLine":82,"endColumn":22},{"ruleId":"246","severity":1,"message":"269","line":11,"column":8,"nodeType":"248","messageId":"249","endLine":11,"endColumn":13},{"ruleId":"246","severity":1,"message":"270","line":16,"column":10,"nodeType":"248","messageId":"249","endLine":16,"endColumn":19},{"ruleId":"264","severity":1,"message":"271","line":33,"column":6,"nodeType":"266","endLine":33,"endColumn":8,"suggestions":"272"},{"ruleId":"246","severity":1,"message":"273","line":17,"column":8,"nodeType":"248","messageId":"249","endLine":17,"endColumn":18},{"ruleId":"246","severity":1,"message":"274","line":20,"column":10,"nodeType":"248","messageId":"249","endLine":20,"endColumn":15},{"ruleId":"246","severity":1,"message":"275","line":22,"column":8,"nodeType":"248","messageId":"249","endLine":22,"endColumn":14},{"ruleId":"246","severity":1,"message":"276","line":311,"column":7,"nodeType":"248","messageId":"249","endLine":311,"endColumn":13},{"ruleId":"246","severity":1,"message":"277","line":312,"column":7,"nodeType":"248","messageId":"249","endLine":312,"endColumn":14},{"ruleId":"246","severity":1,"message":"278","line":315,"column":7,"nodeType":"248","messageId":"249","endLine":315,"endColumn":18},{"ruleId":"246","severity":1,"message":"279","line":316,"column":7,"nodeType":"248","messageId":"249","endLine":316,"endColumn":14},{"ruleId":"252","severity":1,"message":"253","line":422,"column":25,"nodeType":"254","endLine":422,"endColumn":59},{"ruleId":"252","severity":1,"message":"253","line":449,"column":31,"nodeType":"254","endLine":449,"endColumn":68},{"ruleId":"252","severity":1,"message":"253","line":462,"column":25,"nodeType":"254","endLine":462,"endColumn":59},{"ruleId":"252","severity":1,"message":"253","line":489,"column":31,"nodeType":"254","endLine":489,"endColumn":68},{"ruleId":"252","severity":1,"message":"253","line":508,"column":25,"nodeType":"254","endLine":508,"endColumn":59},{"ruleId":"252","severity":1,"message":"253","line":536,"column":31,"nodeType":"254","endLine":536,"endColumn":68},{"ruleId":"243","severity":1,"message":"280","line":3,"column":1,"nodeType":"245","endLine":14,"endColumn":3},{"ruleId":"281","severity":1,"message":"282","line":8,"column":20,"nodeType":"283","messageId":"284","endLine":8,"endColumn":22},{"ruleId":"246","severity":1,"message":"285","line":8,"column":29,"nodeType":"248","messageId":"249","endLine":8,"endColumn":36},{"ruleId":"246","severity":1,"message":"273","line":17,"column":8,"nodeType":"248","messageId":"249","endLine":17,"endColumn":18},{"ruleId":"246","severity":1,"message":"274","line":20,"column":10,"nodeType":"248","messageId":"249","endLine":20,"endColumn":15},{"ruleId":"246","severity":1,"message":"275","line":22,"column":8,"nodeType":"248","messageId":"249","endLine":22,"endColumn":14},{"ruleId":"246","severity":1,"message":"276","line":311,"column":7,"nodeType":"248","messageId":"249","endLine":311,"endColumn":13},{"ruleId":"246","severity":1,"message":"277","line":312,"column":7,"nodeType":"248","messageId":"249","endLine":312,"endColumn":14},{"ruleId":"246","severity":1,"message":"278","line":315,"column":7,"nodeType":"248","messageId":"249","endLine":315,"endColumn":18},{"ruleId":"246","severity":1,"message":"279","line":316,"column":7,"nodeType":"248","messageId":"249","endLine":316,"endColumn":14},{"ruleId":"252","severity":1,"message":"253","line":422,"column":25,"nodeType":"254","endLine":422,"endColumn":59},{"ruleId":"252","severity":1,"message":"253","line":449,"column":31,"nodeType":"254","endLine":449,"endColumn":68},{"ruleId":"252","severity":1,"message":"253","line":462,"column":25,"nodeType":"254","endLine":462,"endColumn":59},{"ruleId":"252","severity":1,"message":"253","line":489,"column":31,"nodeType":"254","endLine":489,"endColumn":68},{"ruleId":"252","severity":1,"message":"253","line":508,"column":25,"nodeType":"254","endLine":508,"endColumn":59},{"ruleId":"252","severity":1,"message":"253","line":536,"column":31,"nodeType":"254","endLine":536,"endColumn":68},{"ruleId":"246","severity":1,"message":"269","line":3,"column":8,"nodeType":"248","messageId":"249","endLine":3,"endColumn":13},"no-native-reassign",["286"],"no-negated-in-lhs",["287"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'CCardHeader' is defined but never used.","'CPagination' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Card' is defined but never used.","'CardHeader' is defined but never used.","'Button' is defined but never used.","'CDataTable' is defined but never used.","'CLabel' is defined but never used.","'useDispatch' is defined but never used.","'usersData' is defined but never used.","'unBlock' is assigned a value but never used.","'setUnblock' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'callApiToFetchAllUsers'. Either include it or remove the dependency array.","ArrayExpression",["288"],"'filterRecords' is assigned a value but never used.","'CIcon' is defined but never used.","'titleCase' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'props'. Either include them or remove the dependency array.",["289"],"'CameraIcon' is defined but never used.","'Input' is defined but never used.","'Avatar' is defined but never used.","'format' is assigned a value but never used.","'pricing' is assigned a value but never used.","'expertImage' is assigned a value but never used.","'plusBit' is assigned a value but never used.","Assign arrow function to a variable before exporting as module default","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","'loading' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"290","fix":"291"},{"desc":"292","fix":"293"},"Update the dependencies array to be: [callApiToFetchAllUsers, search]",{"range":"294","text":"295"},"Update the dependencies array to be: [dispatch, props]",{"range":"296","text":"297"},[2098,2106],"[callApiToFetchAllUsers, search]",[916,918],"[dispatch, props]"]