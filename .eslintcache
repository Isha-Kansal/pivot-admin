[{"/Volumes/DATA/Isha Kansal/reactjs/pivot-admin/src/index.js":"1","/Volumes/DATA/Isha Kansal/reactjs/pivot-admin/src/App.js":"2","/Volumes/DATA/Isha Kansal/reactjs/pivot-admin/src/reportWebVitals.js":"3","/Volumes/DATA/Isha Kansal/pivot-admin/src/index.js":"4","/Volumes/DATA/Isha Kansal/pivot-admin/src/App.js":"5","/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/TheLayout.js":"6","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/login/Login.js":"7","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/experts/AddExpert.js":"8","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/resources/AddResource.js":"9","/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/index.js":"10","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/experts/ExpertsFieldsData.js":"11","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/resources/ResourcesFieldsData.js":"12","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/store/action.js":"13","/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/TheContent.js":"14","/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/TheHeaderDropdown.js":"15","/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/TheHeader.js":"16","/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/TheSidebar.js":"17","/Volumes/DATA/Isha Kansal/pivot-admin/src/loader/index.js":"18","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/store/types.js":"19","/Volumes/DATA/Isha Kansal/pivot-admin/src/routes.js":"20","/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/logo.js":"21","/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/_nav.js":"22","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/resources/Resource.js":"23","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/experts/Experts.js":"24","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/experts/Expert.js":"25","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/resources/Resources.js":"26","/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/icons.js":"27","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/Users.js":"28","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/User.js":"29","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/planner/Planner.js":"30","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/UserPlanner.js":"31","/Volumes/DATA/Isha Kansal/pivot-admin/src/common/toolTip.js":"32","/Volumes/DATA/Isha Kansal/pivot-admin/src/common/commonModal.js":"33","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/planner/Network.js":"34","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/planner/Explore.js":"35","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/planner/Prepare.js":"36","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/planner/Apply.js":"37","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/planner/Learn.js":"38","/Volumes/DATA/Isha Kansal/pivot-admin/src/store/index.js":"39","/Volumes/DATA/Isha Kansal/pivot-admin/src/serviceWorker.js":"40","/Volumes/DATA/Isha Kansal/pivot-admin/src/store/sagas/index.js":"41","/Volumes/DATA/Isha Kansal/pivot-admin/src/store/reducers/index.js":"42","/Volumes/DATA/Isha Kansal/pivot-admin/src/polyfill.js":"43","/Volumes/DATA/Isha Kansal/pivot-admin/src/assets/icons/index.js":"44","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/store/reducer.js":"45","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/store/sagas.js":"46","/Volumes/DATA/Isha Kansal/pivot-admin/src/common/axios.js":"47","/Volumes/DATA/Isha Kansal/pivot-admin/src/config.js":"48","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/UserExpertUsage.js":"49","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/UserResourceUsage.js":"50","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/experts/ExpertUserUsage.js":"51","/Volumes/DATA/Isha Kansal/pivot-admin/src/common/search.js":"52","/Volumes/DATA/Isha Kansal/pivot-admin/src/common/pagination.js":"53"},{"size":500,"mtime":1612329326000,"results":"54","hashOfConfig":"55"},{"size":195,"mtime":1612330254000,"results":"56","hashOfConfig":"55"},{"size":362,"mtime":1612329326000,"results":"57","hashOfConfig":"55"},{"size":933,"mtime":1614839323000,"results":"58","hashOfConfig":"59"},{"size":2079,"mtime":1615528701000,"results":"60","hashOfConfig":"59"},{"size":837,"mtime":1615959898000,"results":"61","hashOfConfig":"59"},{"size":6027,"mtime":1616063522000,"results":"62","hashOfConfig":"59"},{"size":38894,"mtime":1616063522000,"results":"63","hashOfConfig":"59"},{"size":32652,"mtime":1616063522000,"results":"64","hashOfConfig":"59"},{"size":284,"mtime":1614839323000,"results":"65","hashOfConfig":"59"},{"size":13653,"mtime":1616045807000,"results":"66","hashOfConfig":"59"},{"size":1702,"mtime":1615977932000,"results":"67","hashOfConfig":"59"},{"size":3035,"mtime":1615360780000,"results":"68","hashOfConfig":"59"},{"size":1817,"mtime":1616063522000,"results":"69","hashOfConfig":"59"},{"size":492,"mtime":1615360779000,"results":"70","hashOfConfig":"59"},{"size":1169,"mtime":1615981035000,"results":"71","hashOfConfig":"59"},{"size":1109,"mtime":1614944842000,"results":"72","hashOfConfig":"59"},{"size":340,"mtime":1614839323000,"results":"73","hashOfConfig":"59"},{"size":3761,"mtime":1616067533000,"results":"74","hashOfConfig":"59"},{"size":2547,"mtime":1616050896000,"results":"75","hashOfConfig":"59"},{"size":9997,"mtime":1614839323000,"results":"76","hashOfConfig":"59"},{"size":686,"mtime":1615360779000,"results":"77","hashOfConfig":"59"},{"size":6082,"mtime":1616051153000,"results":"78","hashOfConfig":"59"},{"size":10783,"mtime":1616063372000,"results":"79","hashOfConfig":"59"},{"size":10300,"mtime":1615781623000,"results":"80","hashOfConfig":"59"},{"size":8215,"mtime":1616063372000,"results":"81","hashOfConfig":"59"},{"size":7216,"mtime":1614944842000,"results":"82","hashOfConfig":"59"},{"size":8574,"mtime":1616063372000,"results":"83","hashOfConfig":"59"},{"size":9555,"mtime":1616050367000,"results":"84","hashOfConfig":"59"},{"size":706,"mtime":1614944842000,"results":"85","hashOfConfig":"59"},{"size":1846,"mtime":1614944842000,"results":"86","hashOfConfig":"59"},{"size":424,"mtime":1614839323000,"results":"87","hashOfConfig":"59"},{"size":1918,"mtime":1614944842000,"results":"88","hashOfConfig":"59"},{"size":6358,"mtime":1616063125000,"results":"89","hashOfConfig":"59"},{"size":7357,"mtime":1616063125000,"results":"90","hashOfConfig":"59"},{"size":3822,"mtime":1616063125000,"results":"91","hashOfConfig":"59"},{"size":2372,"mtime":1616063125000,"results":"92","hashOfConfig":"59"},{"size":4814,"mtime":1616063125000,"results":"93","hashOfConfig":"59"},{"size":1042,"mtime":1616051906000,"results":"94","hashOfConfig":"59"},{"size":4686,"mtime":1614839323000,"results":"95","hashOfConfig":"59"},{"size":179,"mtime":1614839323000,"results":"96","hashOfConfig":"59"},{"size":186,"mtime":1614839323000,"results":"97","hashOfConfig":"59"},{"size":1895,"mtime":1614839323000,"results":"98","hashOfConfig":"59"},{"size":3924,"mtime":1614839323000,"results":"99","hashOfConfig":"59"},{"size":7013,"mtime":1615360780000,"results":"100","hashOfConfig":"59"},{"size":10085,"mtime":1615360780000,"results":"101","hashOfConfig":"59"},{"size":1357,"mtime":1615973953000,"results":"102","hashOfConfig":"59"},{"size":172,"mtime":1615890852000,"results":"103","hashOfConfig":"59"},{"size":5628,"mtime":1616063522000,"results":"104","hashOfConfig":"59"},{"size":5334,"mtime":1616063745000,"results":"105","hashOfConfig":"59"},{"size":5616,"mtime":1616063522000,"results":"106","hashOfConfig":"59"},{"size":454,"mtime":1616060841000,"results":"107","hashOfConfig":"59"},{"size":737,"mtime":1616061662000,"results":"108","hashOfConfig":"59"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"161ocxv",{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},"z7vibx",{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"117"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"117"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"117"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"117"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"117"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"117"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"117"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"117"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"117"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"117"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"117"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"117"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"117"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"117"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"117"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"117"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"117"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"117"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"117"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"117"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"117"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"117"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"117"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"117"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"117"},"/Volumes/DATA/Isha Kansal/reactjs/pivot-admin/src/index.js",[],"/Volumes/DATA/Isha Kansal/reactjs/pivot-admin/src/App.js",[],"/Volumes/DATA/Isha Kansal/reactjs/pivot-admin/src/reportWebVitals.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/index.js",[],["241","242"],"/Volumes/DATA/Isha Kansal/pivot-admin/src/App.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/TheLayout.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/views/login/Login.js",["243"],"import React, { Component } from \"react\";\n\nimport { NotificationManager } from \"react-notifications\";\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardGroup,\n  CCol,\n  CContainer,\n  CForm,\n  CInput,\n  CInputGroup,\n  CInputGroupPrepend,\n  CInputGroupText,\n  CRow,\n} from \"@coreui/react\";\nimport Loader from \"../../loader\";\nimport { FormText } from \"reactstrap\";\nimport CIcon from \"@coreui/icons-react\";\nimport { loginByAdmin, setToken } from \"../store/action\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { withRouter } from \"react-router-dom\";\nclass Login extends Component {\n  constructor(props) {\n    super();\n    this.state = {\n      name: \"\",\n      password: \"\",\n      errorText: \"\",\n      errorType: \"\",\n\n      loading: false,\n    };\n  }\n  handleChange = (e, type) => {\n    e.preventDefault();\n    this.setState({\n      [type]: e.target.value,\n      errorText: \"\",\n      errorType: \"\",\n    });\n  };\n  onHandleSubmit = (e) => {\n    e && e.preventDefault();\n\n    const { name, password } = this.state;\n    if (name === \"\") {\n      this.setState({ errorText: \"Name can not be empty\", errorType: \"name\" });\n    } else if (password === \"\") {\n      this.setState({\n        errorText: \"Password can not be empty\",\n        errorType: \"password\",\n      });\n    } else this.authenticateAdmin();\n  };\n  authenticateAdmin = () => {\n    const { name, password } = this.state;\n    this.setState({\n      loading: true,\n    });\n    let formData = {\n      email: name,\n      password: password,\n    };\n\n    this.props.loginByAdmin(\"user/login\", formData, (value) => {\n      this.setState({\n        loading: false,\n      });\n\n      if (value.status === 200) {\n        localStorage.setItem(\"auth_token\", value.data.user.auth_token);\n        NotificationManager.success(\"Login Successfully\", \"\", 1000);\n\n        localStorage.setItem(\"isLoggedIn\", true);\n\n        this.props.history.push(\"/users\");\n      } else {\n        NotificationManager.error(\"Please enter valid credentials\", \"\", 1000);\n        this.setState({\n          name: \"\",\n          password: \"\",\n        });\n      }\n    });\n  };\n  onKeyDown = (e) => {\n    if (e.key === \"Enter\") {\n      e.preventDefault();\n\n      this.onHandleSubmit();\n    }\n  };\n  render() {\n    const { errorText, errorType, loading, name, password } = this.state;\n\n    return (\n      <div className=\"c-app c-default-layout flex-row align-items-center\">\n        <CContainer>\n          <CRow className=\"justify-content-center\">\n            <CCol md=\"8\">\n              <CCardGroup className=\"position-relative\">\n                {loading && <Loader />}\n\n                <CCard className=\"p-4\">\n                  <CCardBody>\n                    <CForm onKeyDown={(e) => this.onKeyDown(e)}>\n                      <h1>Login</h1>\n                      <p className=\"text-muted\">Sign In to your account</p>\n                      <div className=\"mb-3\">\n                        <CInputGroup>\n                          <CInputGroupPrepend>\n                            <CInputGroupText>\n                              <CIcon name=\"cil-user\" />\n                            </CInputGroupText>\n                          </CInputGroupPrepend>\n                          <CInput\n                            type=\"text\"\n                            placeholder=\"Username\"\n                            autoComplete=\"username\"\n                            onChange={(e) => this.handleChange(e, \"name\")}\n                            value={name}\n                          />\n                        </CInputGroup>\n                        <p className=\"mb-0\">\n                          {errorType === \"name\" && (\n                            <FormText color=\"danger\" className=\"error\">\n                              {errorText}\n                            </FormText>\n                          )}\n                        </p>\n                      </div>\n                      <div className=\"mb-4\">\n                        <CInputGroup>\n                          <CInputGroupPrepend>\n                            <CInputGroupText>\n                              <CIcon name=\"cil-lock-locked\" />\n                            </CInputGroupText>\n                          </CInputGroupPrepend>\n                          <CInput\n                            type=\"password\"\n                            placeholder=\"Password\"\n                            autoComplete=\"current-password\"\n                            onChange={(e) => this.handleChange(e, \"password\")}\n                            value={password}\n                          />\n                        </CInputGroup>\n                        <p className=\"mb-0\">\n                          {\" \"}\n                          {errorType === \"password\" && (\n                            <FormText color=\"danger\" className=\"error\">\n                              {errorText}\n                            </FormText>\n                          )}\n                        </p>\n                      </div>\n\n                      <CRow>\n                        <CCol xs=\"6\">\n                          <CButton\n                            color=\"primary\"\n                            className=\"px-4\"\n                            onClick={this.onHandleSubmit}\n                            disabled={loading}\n                            className=\"login-btn\"\n                          >\n                            Login\n                          </CButton>\n                        </CCol>\n                      </CRow>\n                    </CForm>\n                  </CCardBody>\n                </CCard>\n              </CCardGroup>\n            </CCol>\n          </CRow>\n        </CContainer>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    saveToken: state.LoginAndNavigationReducer.saveToken,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return bindActionCreators(\n    {\n      loginByAdmin,\n      setToken,\n    },\n    dispatch\n  );\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Login));\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/experts/AddExpert.js",["244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261"],"import React, { Component } from \"react\";\n\nimport ADD from \"../../assets/icons/add.svg\";\nimport {\n  addExpert,\n  addImage,\n  fetchOneExpert,\n  editExpert,\n  fetchService,\n} from \"../store/action\";\nimport moment from \"moment-timezone\";\nimport { connect } from \"react-redux\";\nimport { NotificationManager } from \"react-notifications\";\nimport { bindActionCreators } from \"redux\";\nimport { withRouter } from \"react-router-dom\";\nimport BackArrow from \"../../assets/icons/left-arrow.svg\";\nimport Loader from \"../../loader\";\nimport CANCEL from \"../../assets/icons/cancel.svg\";\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardFooter,\n  CCardHeader,\n  CCol,\n  CForm,\n  CFormGroup,\n  CTextarea,\n  CInput,\n  CLabel,\n  CRow,\n} from \"@coreui/react\";\n\nimport Select from \"react-select\";\nimport CameraIcon from \"../../assets/icons/photo-camera.svg\";\nimport { Input, Row, Col } from \"reactstrap\";\nimport CIcon from \"@coreui/icons-react\";\nimport Avatar from \"../../assets/icons/avatar.png\";\nimport {\n  optionsFields,\n  optionsGender,\n  optionsCountry,\n  optionsExpertise,\n  optionsRole,\n  optionsIndustry,\n  optionsSkill,\n  optionsUnit,\n} from \"./ExpertsFieldsData\";\n\nclass AddExpert extends Component {\n  constructor(props) {\n    super();\n    this.state = {\n      first_name: \"\",\n      last_name: \"\",\n      email: \"\",\n      contact: \"\",\n      gender: \"\",\n      country: \"\",\n      designation: \"\",\n      expertise: [],\n      loadiing: false,\n      role: \"\",\n      industry: \"\",\n      fields: [],\n      about: [],\n      pricing: [],\n      errorType: \"\",\n      errorText: \"\",\n      selectedCalendar: null,\n      expertImage: null,\n      selectedDate: new Date(),\n      linkedIn: \"\",\n      calendarId: null,\n      calendarOptions: [],\n      serviceList: [],\n      unit: \"\",\n    };\n  }\n\n  getCalenderList = (callback) => {\n    this.props.fetchService(\n      \"expert/services\",\n\n      (value) => {\n        if (value.status === 200) {\n          const calendarOptions = (value.data.services || []).map(\n            (service) => ({\n              value: service.calendar_id,\n              label: service.name,\n            })\n          );\n\n          const serviceList = value.data.services || [];\n          this.setState(\n            {\n              calendarOptions,\n              serviceList,\n              loading: false,\n              // selectedCalendar: {\n              //   value: this.state.calendarId,\n              //   label: this.state.calendarId,\n              // },\n            },\n            () => {\n              if (callback) {\n                callback();\n              }\n            }\n          );\n        }\n      }\n    );\n  };\n  componentDidMount() {\n    const expert_id = this.props && this.props.match.params.id;\n\n    if (expert_id) {\n      this.callApiToFetchExpertDetails();\n    } else {\n      this.getCalenderList();\n    }\n  }\n\n  callApiToFetchExpertDetails = () => {\n    const expert_id = this.props && this.props.match.params.id;\n    this.setState({\n      loadiing: true,\n    });\n    this.props.fetchOneExpert(`expert?id=${expert_id}`, (value) => {\n      const {\n        first_name,\n        last_name,\n        gender,\n        country,\n        designation,\n        expert_fields,\n        current_role,\n        industry,\n        skills,\n        email,\n        contact_no,\n        linkedIn,\n        calendar_id,\n        price,\n        rates,\n        info,\n        profile_pic,\n      } = value.data.expert;\n\n      const infoData = info.map((el) => {\n        return { value: el };\n      });\n\n      this.setState(\n        {\n          loadiing: false,\n          first_name: first_name.trim(),\n          last_name: last_name.trim(),\n          gender,\n          country,\n          designation,\n          fields: expert_fields,\n          role: current_role,\n          industry,\n          email,\n          contact: contact_no,\n          linkedIn,\n          about: infoData,\n          skill: (skills && skills[0] && skills[0].label) || \"\",\n          expertise: skills && skills[0] && skills[0].values,\n          calendarId: calendar_id,\n          expertImage: profile_pic,\n        },\n        () => {\n          this.getCalenderList(() => {\n            const { serviceList, calendarId, calendarOptions } = this.state;\n\n            const selectedCalendar = (calendarOptions || []).find(\n              (service) => service.value === calendarId\n            );\n\n            this.setState({\n              selectedCalendar: selectedCalendar,\n              pricing: rates || [],\n            });\n          });\n        }\n      );\n    });\n  };\n  uploadImage = (event) => {\n    this.clearError();\n    if (event.target.files && event.target.files[0]) {\n      var reader = new FileReader();\n      reader.onloadend = function () {\n        this.callApiAddImage((reader && reader.result) || \"\");\n\n        this.setState({\n          expertImage: reader.result,\n        });\n      }.bind(this);\n      reader.readAsDataURL(event.target.files[0]);\n    }\n  };\n  errorShow = (type) => {\n    const { errorType, errorText } = this.state;\n    return errorType === type ? <p>{errorText}</p> : null;\n  };\n  clearError = () => {\n    this.setState({\n      errorType: \"\",\n      errorText: \"\",\n    });\n  };\n  inputHandler = (e) => {\n    this.clearError();\n    this.setState({ [e.target.name]: e.target.value });\n  };\n  handleUnit = (data, type, index) => {\n    let pricingToUpdate = this.state.pricing[index];\n    const newArray = [...this.state.pricing];\n    pricingToUpdate = {\n      ...pricingToUpdate,\n      unit: data.value,\n    };\n    newArray[index] = pricingToUpdate;\n    this.clearError();\n    this.setState({ pricing: newArray });\n  };\n\n  handleChange = (data, type) => {\n    const { unit } = this.state;\n    this.clearError();\n\n    if (type === \"fields\") {\n      let arr;\n      // if (data.length <= 3) {\n      arr = data.map((el) => {\n        return el.value;\n      });\n      this.setState({\n        fields: arr,\n      });\n      // }\n      // else {\n      //   NotificationManager.info(\"You can select upto 3 only\", \"\", 1000);\n      // }\n    }\n    if (type === \"gender\") {\n      this.setState({\n        gender: data.value,\n      });\n    }\n\n    if (type === \"country\") {\n      this.setState({\n        country: data.value,\n      });\n    }\n    if (type === \"calendarId\") {\n      const { serviceList } = this.state;\n\n      const selectedService = serviceList.find(\n        (item) => item.calendar_id === data.value\n      );\n\n      const pricingVal = (selectedService.services || []).map((data) => ({\n        id: data.id,\n        serviceName: data.name,\n        value: \"\",\n        unit: \"\",\n      }));\n\n      this.setState({\n        selectedCalendar: data,\n        pricing: pricingVal,\n      });\n    }\n    if (type === \"designation\") {\n      this.setState({\n        designation: data.value,\n      });\n    }\n    if (type === \"expertise\") {\n      let arr;\n      // if (data.length <= 3) {\n      arr = data.map((el) => {\n        return el.value;\n      });\n      this.setState({\n        expertise: arr,\n      });\n      // }\n      // else {\n      //   NotificationManager.info(\"You can select upto 3 only\", \"\", 1000);\n      // }\n    }\n    if (type === \"role\") {\n      this.setState({\n        role: data.value,\n      });\n    }\n\n    if (type === \"industry\") {\n      if (data === null) {\n        this.setState({\n          industry: \"\",\n        });\n      } else {\n        this.setState({\n          industry: data.value,\n        });\n      }\n    }\n\n    if (type === \"skill\") {\n      this.setState({\n        skill: data.value,\n      });\n    }\n  };\n  validateEmail = (email) => {\n    var re = /^(([^<>()\\]\\\\.,;:\\s@“]+(\\.[^<>()\\]\\\\.,;:\\s@“]+)*)|(“.+“))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n    return re.test(String(email).toLowerCase());\n  };\n  onSubmit = (e) => {\n    const expert_id = this.props && this.props.match.params.id;\n\n    const {\n      first_name,\n      last_name,\n      email,\n      contact,\n      gender,\n      country,\n      designation,\n      selectedCalendar,\n      role,\n      industry,\n      expertise,\n      fields,\n      about,\n      pricing,\n\n      linkedIn,\n      skill,\n    } = this.state;\n\n    if (first_name === \"\") {\n      this.setState({\n        errorType: \"first_name\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Name should not be empty</b>\n          </span>\n        ),\n      });\n      return;\n    }\n    if (first_name !== \"\") {\n      let filter = /^[a-zA-Z0-9]+([-_\\s]{1}[a-zA-Z0-9]+)*$/;\n\n      if (!filter.test(first_name)) {\n        this.setState({\n          errorType: \"first_name\",\n          errorText: (\n            <span className=\"text-danger\">\n              <b>\n                {\" \"}\n                Name should be combination of alphanumeric text, underscore,\n                space and hyphen\n              </b>\n            </span>\n          ),\n        });\n        return;\n      }\n    }\n\n    if (last_name === \"\") {\n      this.setState({\n        errorType: \"last_name\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Name should not be empty</b>\n          </span>\n        ),\n      });\n      return;\n    }\n    if (last_name !== \"\") {\n      let filter = /^[a-zA-Z0-9]+([-_\\s]{1}[a-zA-Z0-9]+)*$/;\n\n      if (!filter.test(last_name)) {\n        this.setState({\n          errorType: \"last_name\",\n          errorText: (\n            <span className=\"text-danger\">\n              <b>\n                {\" \"}\n                Name should be combination of alphanumeric text, underscore,\n                space and hyphen\n              </b>\n            </span>\n          ),\n        });\n        return;\n      }\n    }\n\n    if (email === \"\") {\n      this.setState({\n        errorType: \"email\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Email Id is empty</b>\n          </span>\n        ),\n      });\n      return;\n    }\n    if (!this.validateEmail(email)) {\n      this.setState({\n        errorType: \"email\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Invalid email</b>\n          </span>\n        ),\n      });\n      return;\n    }\n\n    // if (contact === \"\") {\n    //   this.setState({\n    //     errorType: \"contact\",\n    //     errorText: <span className=\"text-danger\">Mobile number is empty</span>,\n    //     loading: false,\n    //   });\n\n    //   return;\n    // }\n\n    if (contact !== \"\") {\n      if (contact.length < 10 || contact.length > 10) {\n        this.setState({\n          errorType: \"contact\",\n          errorText: (\n            <span className=\"text-danger\">\n              {\" \"}\n              <b>Phone number should be of length 10</b>\n            </span>\n          ),\n          loading: false,\n        });\n\n        return;\n      }\n    }\n\n    if (contact !== \"\") {\n      let filter = /^\\d{10}$/;\n      if (!filter.test(contact)) {\n        this.setState({\n          errorType: \"contact\",\n          errorText: (\n            <span className=\"text-danger\">\n              {\" \"}\n              <b>Please enter valid phone number</b>\n            </span>\n          ),\n          loading: false,\n        });\n\n        return;\n      }\n    }\n\n    if (gender === \"\") {\n      this.setState({\n        errorType: \"gender\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Select your gender</b>\n          </span>\n        ),\n      });\n      return;\n    }\n    if (country === \"\") {\n      this.setState({\n        errorType: \"country\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Select your country</b>\n          </span>\n        ),\n      });\n      return;\n    }\n\n    if (designation === \"\") {\n      this.setState({\n        errorType: \"designation\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Designation should not be empty</b>\n          </span>\n        ),\n      });\n      return;\n    }\n\n    if (fields.length === 0) {\n      this.setState({\n        errorType: \"fields\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Select your fields</b>\n          </span>\n        ),\n      });\n      return;\n    }\n\n    if (role === \"\") {\n      this.setState({\n        errorType: \"role\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Select your current role</b>\n          </span>\n        ),\n      });\n      return;\n    }\n    // if (industry === \"\") {\n    //   this.setState({\n    //     errorType: \"industry\",\n    //     errorText: (\n    //       <span className=\"text-danger\">\n    //         <b>Select your industry</b>\n    //       </span>\n    //     ),\n    //   });\n    //   return;\n    // }\n\n    if (linkedIn === \"\") {\n      this.setState({\n        errorType: \"linkedIn\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Please enter linkedIn link</b>\n          </span>\n        ),\n      });\n      return;\n    }\n    if (linkedIn !== \"\") {\n      let filter = /(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)/g;\n\n      if (!filter.test(linkedIn)) {\n        this.setState({\n          errorType: \"linkedIn\",\n          errorText: (\n            <span className=\"text-danger\">\n              <b> Please enter valid linkedIn link</b>\n            </span>\n          ),\n        });\n        return;\n      }\n    }\n    if (selectedCalendar === null || !selectedCalendar.value) {\n      this.setState({\n        errorType: \"selectedCalendar\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Please select calendar name</b>\n          </span>\n        ),\n      });\n      return;\n    }\n\n    if (pricing && pricing.length !== 0 && pricing.find((i) => i.value == \"\")) {\n      this.setState({\n        errorType: \"pricing\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Please add price and unit</b>\n          </span>\n        ),\n      });\n      return;\n    }\n    if (pricing && pricing.length !== 0 && pricing.find((i) => i.unit == \"\")) {\n      this.setState({\n        errorType: \"pricing\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Please select unit</b>\n          </span>\n        ),\n      });\n      return;\n    }\n\n    if (skill === undefined) {\n      this.setState({\n        errorType: \"skill\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Select your skill</b>\n          </span>\n        ),\n      });\n      return;\n    }\n\n    if (expertise.length === 0) {\n      this.setState({\n        errorType: \"expertise\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Please enter your expert areas</b>\n          </span>\n        ),\n      });\n      return;\n    }\n    if (about.length === 0) {\n      this.setState({\n        errorType: \"about\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Please add some information</b>\n          </span>\n        ),\n      });\n      return;\n    }\n    if (about.length === 1 && about[0].value === \"\") {\n      this.setState({\n        errorType: \"about\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Please add some information</b>\n          </span>\n        ),\n      });\n      return;\n    }\n\n    if (!expert_id) {\n      this.callApiAddExpert();\n    } else {\n      this.callApiEditExpert();\n    }\n  };\n\n  callApiEditExpert = () => {\n    const expert_id = this.props && this.props.match.params.id;\n    const {\n      first_name,\n      last_name,\n      gender,\n      country,\n      designation,\n      fields,\n      role,\n      industry,\n      selectedCalendar,\n      profile_pic,\n      linkedIn,\n      about,\n      pricing,\n      skill,\n      expertise,\n      expertImage,\n      email,\n      contact,\n    } = this.state;\n    let aboutData = about.map((el) => {\n      return el.value;\n    });\n    let skillObj = [{ label: skill, values: expertise }];\n    const timeZone = moment.tz.guess(true);\n\n    let obj = {\n      id: expert_id,\n      first_name,\n      last_name,\n      gender,\n      country,\n      designation,\n      fields,\n      role,\n      industry,\n      skills: skillObj,\n      rates: pricing,\n      email,\n      contact_no: contact ? contact : \"\",\n      linkedIn,\n      calendar_id: selectedCalendar.value,\n      // profile_pic,\n      info: aboutData,\n      time_zone: timeZone,\n    };\n    if (expertImage) {\n      obj.profile_pic = expertImage;\n    }\n\n    this.setState({\n      loadiing: true,\n    });\n\n    this.props.editExpert(\"expert/update-profile\", obj, (value) => {\n      if (value.status === 200) {\n        NotificationManager.success(\"Expert edit successfully\", \"\", 1000);\n        this.props.history.push(\"/experts\");\n        this.setState({\n          loadiing: false,\n        });\n      }\n    });\n  };\n\n  callApiAddExpert = () => {\n    const {\n      first_name,\n      last_name,\n      email,\n      contact,\n      gender,\n      country,\n      designation,\n      fields,\n      role,\n      industry,\n      skill,\n      expertise,\n\n      linkedIn,\n      about,\n      pricing,\n      expertImage,\n      selectedCalendar,\n    } = this.state;\n    let aboutData = about.map((el) => {\n      return el.value;\n    });\n    const timeZone = moment.tz.guess(true);\n    let skillObj = [{ label: skill, values: expertise }];\n\n    let obj = {\n      first_name,\n      last_name,\n      gender,\n      country,\n      role,\n      industry,\n      skills: skillObj,\n      fields,\n      info: aboutData,\n      linkedIn,\n      designation,\n\n      rates: pricing,\n      time_zone: timeZone,\n      email,\n      contact_no: contact ? contact : \"\",\n      calendar_id: selectedCalendar.value,\n    };\n    if (expertImage) {\n      obj.profile_pic = expertImage;\n    }\n\n    this.setState({\n      loadiing: true,\n    });\n    this.props.addExpert(\"expert/create\", obj, (value) => {\n      if (value.status === 200) {\n        NotificationManager.success(\"Expert added successfully\", \"\", 1000);\n        this.props.history.push(\"/experts\");\n        this.setState({\n          loadiing: false,\n        });\n      }\n    });\n  };\n\n  callApiAddImage = (base64) => {\n    this.setState({\n      loadiing: true,\n    });\n\n    let obj = {\n      base64,\n    };\n    this.props.addImage(\"common/upload-image\", obj, (value) => {\n      if (value.status === 200) {\n        this.setState({\n          expertImage: value.data.url,\n          loadiing: false,\n        });\n      }\n    });\n  };\n  resetState = (e) => {\n    e.preventDefault();\n    this.setState({\n      first_name: \"\",\n      last_name: \"\",\n      email: \"\",\n      contact: \"\",\n      gender: \"\",\n      country: \"\",\n      designation: \"\",\n      expertise: [],\n      skill: \"\",\n      role: \"\",\n      industry: \"\",\n      fields: [],\n      about: [],\n      pricing: [],\n      errorType: \"\",\n      errorText: \"\",\n\n      linkedIn: \"\",\n      selectedCalendar: null,\n      calendarId: \"\",\n      selectedDate: new Date(),\n    });\n  };\n  handleBack = (e) => {\n    e.preventDefault();\n    this.props.history.push(\"/experts\");\n  };\n  onChange = (date) => {\n    this.setState({\n      selectedDate: date,\n    });\n  };\n  handlePlusButton = (e, type) => {\n    const { about, pricing } = this.state;\n\n    e.preventDefault();\n    e.stopPropagation();\n    if (type === \"about\") {\n      const newArr = [...about];\n      let newAbout = {\n        value: \"\",\n      };\n      newArr.push(newAbout);\n      this.setState({\n        about: newArr,\n      });\n    }\n    if (type === \"pricing\") {\n      const newArr = [...pricing];\n      let newPricing = {\n        value: \"\",\n      };\n      newArr.push(newPricing);\n      this.setState({\n        pricing: newArr,\n      });\n    }\n  };\n  inputAbout = (e, index) => {\n    let aboutToUpdate = this.state.about[index];\n    const newArray = [...this.state.about];\n    aboutToUpdate = {\n      ...aboutToUpdate,\n      value: e.target.value,\n    };\n\n    newArray[index] = aboutToUpdate;\n\n    this.clearError();\n    this.setState({ [e.target.name]: e.target.value, about: newArray });\n  };\n  inputPricing = (e, index) => {\n    let pricingToUpdate = this.state.pricing[index];\n    const newArray = [...this.state.pricing];\n    pricingToUpdate = {\n      ...pricingToUpdate,\n      value: e.target.value,\n    };\n\n    newArray[index] = pricingToUpdate;\n\n    this.clearError();\n    this.setState({ [e.target.name]: e.target.value, pricing: newArray });\n  };\n  handleCancel = (e, index, type) => {\n    e.preventDefault();\n    e.stopPropagation();\n    const { about, pricing } = this.state;\n    if (type === \"about\") {\n      const newArr = [...about];\n      newArr.splice(index, 1);\n      this.setState({\n        about: newArr,\n      });\n    }\n    if (type === \"pricing\") {\n      const newArr = [...pricing];\n      newArr.splice(index, 1);\n      this.setState({\n        pricing: newArr,\n      });\n    }\n  };\n  render() {\n    const expert_id = this.props && this.props.match.params.id;\n    const {\n      first_name,\n      last_name,\n      loadiing,\n      designation,\n      country,\n      expertise,\n      about,\n      fields,\n      gender,\n      expertImage,\n      role,\n      industry,\n      email,\n      contact,\n\n      selectedDate,\n      linkedIn,\n      selectedCalendar,\n      skill,\n      pricing,\n      calendarOptions,\n      unit,\n    } = this.state;\n\n    let fieldsVal = optionsFields.filter((item) => {\n      return fields.includes(item.label);\n    });\n    let expertiseVal = optionsExpertise.filter((item) => {\n      return expertise.includes(item.label);\n    });\n\n    return (\n      <CRow>\n        <CCol xs=\"12\" sm=\"12\">\n          <CCard className=\"expert-card\">\n            {loadiing && <Loader />}\n            <CCardHeader>\n              <CButton onClick={this.handleBack} className=\"backBtn\">\n                <img src={BackArrow} className=\"mr-2\" /> Back\n              </CButton>\n              <div className=\"update-profile-image\">\n                <img\n                  id=\"output\"\n                  src={expertImage ? expertImage : Avatar}\n                  alt=\"profile\"\n                  className=\"profile negative-margin\"\n                />\n                <div className=\"upload-box\">\n                  <Input\n                    type=\"file\"\n                    accept=\"image/*\"\n                    id=\"f-upload\"\n                    name=\"myImage\"\n                    onChange={this.uploadImage}\n                    className=\"d-none\"\n                  />\n                  <label htmlFor=\"f-upload\" class=\"custom-file-upload\">\n                    <div className=\"camera-btn\" onClick={this.uploadImage}>\n                      <img src={CameraIcon} alt=\"camera\" />\n                    </div>\n                  </label>\n                </div>\n              </div>\n            </CCardHeader>\n            <CCardBody>\n              <CForm\n                action=\"\"\n                method=\"post\"\n                encType=\"multipart/form-data\"\n                className=\"form-horizontal\"\n              >\n                <CFormGroup row className=\"my-0\">\n                  <CCol xs=\"6\">\n                    <CFormGroup>\n                      <CLabel htmlFor=\"first_name\">First Name</CLabel>\n                      <CLabel className=\"text-danger\">*</CLabel>\n                      <CInput\n                        id=\"first_name\"\n                        name=\"first_name\"\n                        placeholder=\"First Name\"\n                        onChange={this.inputHandler}\n                        value={first_name}\n                      />\n                      {this.errorShow(\"first_name\")}\n                    </CFormGroup>\n                  </CCol>\n                  <CCol xs=\"6\">\n                    <CFormGroup>\n                      <CLabel htmlFor=\"last_name\">Last Name</CLabel>\n                      <CLabel className=\"text-danger\">*</CLabel>\n                      <CInput\n                        id=\"last_name\"\n                        name=\"last_name\"\n                        placeholder=\"Last Name\"\n                        onChange={this.inputHandler}\n                        value={last_name}\n                      />\n                      {this.errorShow(\"last_name\")}\n                    </CFormGroup>\n                  </CCol>\n                </CFormGroup>\n\n                <CFormGroup row className=\"my-0\">\n                  <CCol xs=\"6\">\n                    <CFormGroup>\n                      <CLabel htmlFor=\"email\">Email</CLabel>\n                      <CLabel className=\"text-danger\">*</CLabel>\n                      <CInput\n                        type=\"email\"\n                        id=\"email\"\n                        name=\"email\"\n                        placeholder=\"Email\"\n                        onChange={this.inputHandler}\n                        value={email}\n                        disabled={expert_id}\n                      />\n                      {this.errorShow(\"email\")}\n                    </CFormGroup>\n                  </CCol>\n                  <CCol xs=\"6\">\n                    <CFormGroup>\n                      <CLabel htmlFor=\"contact\">Contact</CLabel>\n                      <CInput\n                        id=\"contact\"\n                        name=\"contact\"\n                        placeholder=\"Contact\"\n                        onChange={this.inputHandler}\n                        value={contact}\n                      />\n                      {this.errorShow(\"contact\")}\n                    </CFormGroup>\n                  </CCol>\n                </CFormGroup>\n\n                <CFormGroup row className=\"my-0\">\n                  <CCol xs=\"6\">\n                    <CFormGroup>\n                      <CLabel htmlFor=\"gender\">Gender</CLabel>\n                      <CLabel className=\"text-danger\">*</CLabel>\n                      <Select\n                        custom\n                        placeholder=\"Select gender\"\n                        name=\"gender\"\n                        id=\"gender\"\n                        onChange={(data) => this.handleChange(data, \"gender\")}\n                        value={gender ? { value: gender, label: gender } : null}\n                        options={optionsGender}\n                      ></Select>\n                      {this.errorShow(\"gender\")}\n                    </CFormGroup>\n                  </CCol>\n                  <CCol xs=\"6\">\n                    <CFormGroup>\n                      <CLabel htmlFor=\"country\">Country</CLabel>\n                      <CLabel className=\"text-danger\">*</CLabel>\n                      <Select\n                        custom\n                        name=\"country\"\n                        id=\"country\"\n                        name=\"country\"\n                        placeholder=\"Select Country\"\n                        onChange={(data) => this.handleChange(data, \"country\")}\n                        value={\n                          country ? { value: country, label: country } : null\n                        }\n                        options={optionsCountry}\n                      ></Select>\n                      {this.errorShow(\"country\")}\n                    </CFormGroup>\n                  </CCol>\n                </CFormGroup>\n\n                <CFormGroup row className=\"my-0\">\n                  <CCol xs=\"6\">\n                    <CFormGroup>\n                      <CLabel htmlFor=\"designation\">Designation</CLabel>\n                      <CLabel className=\"text-danger\">*</CLabel>\n\n                      <CInput\n                        id=\"designation\"\n                        name=\"designation\"\n                        placeholder=\"Designation\"\n                        onChange={this.inputHandler}\n                        value={designation}\n                      />\n                      {this.errorShow(\"designation\")}\n                    </CFormGroup>\n                  </CCol>\n\n                  <CCol xs=\"6\">\n                    <CFormGroup>\n                      <CLabel htmlFor=\"fields\">Fields</CLabel>\n                      <CLabel className=\"text-danger\">*</CLabel>\n\n                      <Select\n                        isMulti\n                        custom\n                        placeholder=\"Select Fields\"\n                        id=\"fields\"\n                        name=\"fields\"\n                        onChange={(data) => this.handleChange(data, \"fields\")}\n                        value={fieldsVal}\n                        options={optionsFields}\n                      ></Select>\n                      {this.errorShow(\"fields\")}\n                    </CFormGroup>\n                  </CCol>\n                </CFormGroup>\n\n                <CFormGroup row className=\"my-0\">\n                  <CCol xs=\"6\">\n                    <CFormGroup>\n                      <CLabel htmlFor=\"role\">Current Role</CLabel>\n                      <CLabel className=\"text-danger\">*</CLabel>\n\n                      <Select\n                        custom\n                        id=\"role\"\n                        placeholder=\"Select Role\"\n                        name=\"role\"\n                        onChange={(data) => this.handleChange(data, \"role\")}\n                        value={role ? { value: role, label: role } : null}\n                        options={optionsRole}\n                      ></Select>\n                      {this.errorShow(\"role\")}\n                    </CFormGroup>\n                  </CCol>\n\n                  <CCol xs=\"6\">\n                    <CFormGroup>\n                      <CLabel htmlFor=\"industry\">Current Industry</CLabel>\n\n                      <Select\n                        custom\n                        id=\"industry\"\n                        name=\"industry\"\n                        placeholder=\"Select Industry\"\n                        onChange={(data) => this.handleChange(data, \"industry\")}\n                        value={\n                          industry ? { value: industry, label: industry } : null\n                        }\n                        options={optionsIndustry}\n                        isClearable\n                      ></Select>\n                      {this.errorShow(\"industry\")}\n                    </CFormGroup>\n                  </CCol>\n                </CFormGroup>\n\n                <CFormGroup row className=\"my-0\">\n                  <CCol xs=\"6\">\n                    <CFormGroup>\n                      <CLabel htmlFor=\"linkedIn\">LinkedIn Link</CLabel>\n                      <CLabel className=\"text-danger\">*</CLabel>\n                      <CInput\n                        name=\"linkedIn\"\n                        id=\"linkedIn\"\n                        onChange={this.inputHandler}\n                        placeholder=\"LinkedIn Link\"\n                        value={linkedIn}\n                      />\n                      {this.errorShow(\"linkedIn\")}\n                    </CFormGroup>\n                  </CCol>\n                  <CCol xs=\"6\">\n                    <CFormGroup>\n                      <CLabel htmlFor=\"selectedCalendar\">Calendar Name</CLabel>\n                      <CLabel className=\"text-danger\">*</CLabel>\n                      <Select\n                        custom\n                        name=\"selectedCalendar\"\n                        id=\"selectedCalendar\"\n                        name=\"selectedCalendar\"\n                        placeholder=\"Select Calendar Name\"\n                        onChange={(data) =>\n                          this.handleChange(data, \"calendarId\")\n                        }\n                        value={selectedCalendar}\n                        options={calendarOptions}\n                      ></Select>\n                      {this.errorShow(\"selectedCalendar\")}\n                    </CFormGroup>\n                  </CCol>\n                </CFormGroup>\n\n                <CFormGroup row className=\"my-0\">\n                  {pricing && pricing.length > 0 && (\n                    <CCol xs=\"12\">\n                      <CFormGroup>\n                        <CLabel htmlFor=\"pricing\">Pricing</CLabel>\n                        <CLabel className=\"text-danger\">*</CLabel>\n                        <div class=\"d-flex justify-content-between add-list\">\n                          <CLabel htmlFor=\"pricing\">\n                            Enter Price of each service\n                          </CLabel>\n                        </div>\n\n                        {pricing &&\n                          pricing.length > 0 &&\n                          pricing.map((el, index) => {\n                            return (\n                              <div className=\"d-flex align-items-center mb-2 \">\n                                {el.serviceName}\n                                <div className=\"d-flex w-100\">\n                                  <CInput\n                                    type=\"number\"\n                                    id={`pricing${el.id}`}\n                                    name={`pricing${el.id}`}\n                                    placeholder=\"Price\"\n                                    autoComplete={`pricing${el.id}`}\n                                    onChange={(e) => {\n                                      this.inputPricing(e, index);\n                                    }}\n                                    value={el.value}\n                                    className=\"w-50 mr-4\"\n                                  />\n                                  <Select\n                                    className=\"w-50\"\n                                    custom\n                                    name={`pricing${el.unit}`}\n                                    id={`pricing${el.unit}`}\n                                    placeholder=\"Select Unit\"\n                                    onChange={(data) =>\n                                      this.handleUnit(data, \"unit\", index)\n                                    }\n                                    value={\n                                      el.unit\n                                        ? { value: el.unit, label: el.unit }\n                                        : null\n                                    }\n                                    options={optionsUnit}\n                                  ></Select>\n                                </div>\n                              </div>\n                            );\n                          })}\n                        {this.errorShow(\"pricing\")}\n                      </CFormGroup>\n                    </CCol>\n                  )}\n                </CFormGroup>\n                <CFormGroup row className=\"my-0\">\n                  <CCol xs=\"6\">\n                    <CFormGroup>\n                      <CLabel htmlFor=\"skill\">Skill</CLabel>\n                      <CLabel className=\"text-danger\">*</CLabel>\n                      <Select\n                        custom\n                        id=\"skill\"\n                        placeholder=\"Select Skill\"\n                        name=\"skill\"\n                        onChange={(data) => this.handleChange(data, \"skill\")}\n                        value={skill ? { value: skill, label: skill } : null}\n                        options={optionsSkill}\n                      ></Select>\n                      {this.errorShow(\"skill\")}\n                    </CFormGroup>\n                  </CCol>\n                  <CCol xs=\"6\">\n                    {skill && (\n                      <CFormGroup>\n                        <CLabel htmlFor=\"expertise\">{skill}</CLabel>\n                        <CLabel className=\"text-danger\">*</CLabel>\n                        <Select\n                          isMulti\n                          custom\n                          id=\"expertise\"\n                          placeholder=\"Select areas of your expertise/specialities\"\n                          name=\"expertise\"\n                          value={expertiseVal}\n                          options={optionsExpertise}\n                          onChange={(e) => this.handleChange(e, \"expertise\")}\n                        ></Select>\n                        {this.errorShow(\"expertise\")}\n                      </CFormGroup>\n                    )}\n                  </CCol>\n                </CFormGroup>\n                <CFormGroup row className=\"my-0\">\n                  <CCol xs=\"12\">\n                    <CFormGroup>\n                      <CLabel htmlFor=\"about\">About</CLabel>\n                      <CLabel className=\"text-danger\">*</CLabel>\n                      <div\n                        onClick={(e) => this.handlePlusButton(e, \"about\")}\n                        class=\"d-flex justify-content-between add-list\"\n                      >\n                        <CLabel htmlFor=\"pros\">Add Information</CLabel>\n                        <button className=\"icon\">\n                          <img src={ADD} className=\"ml-3\" />\n                        </button>\n                      </div>\n                      {this.errorShow(\"about\")}\n                      {about &&\n                        about.length > 0 &&\n                        about.map((el, index) => {\n                          return (\n                            <div className=\"d-flex align-items-center mb-2 \">\n                              <CTextarea\n                                rows=\"6\"\n                                id={`about${index}`}\n                                name={`about${index}`}\n                                placeholder={`${index + 1}.`}\n                                autoComplete={`about${index}`}\n                                onChange={(e) => {\n                                  this.inputAbout(e, index);\n                                }}\n                                value={el.value}\n                              />\n                              <button\n                                className=\"icon\"\n                                onClick={(e) =>\n                                  this.handleCancel(e, index, \"about\")\n                                }\n                              >\n                                <img src={CANCEL} className=\"ml-3\" />\n                              </button>\n                            </div>\n                          );\n                        })}\n                    </CFormGroup>\n                  </CCol>\n                </CFormGroup>\n              </CForm>\n            </CCardBody>\n            <CCardFooter>\n              <div className=\"text-right\">\n                <CButton\n                  type=\"submit\"\n                  size=\"sm\"\n                  color=\"primary\"\n                  onClick={this.onSubmit}\n                >\n                  <CIcon name=\"cil-scrubber\" /> Submit\n                </CButton>\n                <CButton\n                  type=\"reset\"\n                  size=\"sm\"\n                  color=\"danger\"\n                  onClick={this.resetState}\n                  className=\"ml-2\"\n                >\n                  <CIcon name=\"cil-ban\" /> Reset\n                </CButton>\n              </div>\n            </CCardFooter>\n          </CCard>\n        </CCol>\n      </CRow>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {};\n};\nconst mapDispatchToProps = (dispatch) => {\n  return bindActionCreators(\n    {\n      addExpert,\n      addImage,\n      fetchOneExpert,\n      editExpert,\n      fetchService,\n    },\n    dispatch\n  );\n};\nexport default withRouter(\n  connect(mapStateToProps, mapDispatchToProps)(AddExpert)\n);\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/resources/AddResource.js",["262","263","264","265","266","267","268","269"],"import React, { Component } from \"react\";\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardFooter,\n  CCardHeader,\n  CCol,\n  CForm,\n  CFormGroup,\n  CTextarea,\n  CInput,\n  CLabel,\n  CRow,\n  CInputFile,\n} from \"@coreui/react\";\nimport { connect } from \"react-redux\";\nimport { NotificationManager } from \"react-notifications\";\nimport { bindActionCreators } from \"redux\";\nimport { withRouter } from \"react-router-dom\";\nimport Select from \"react-select\";\nimport {\n  addResource,\n  addImage,\n  setImage,\n  editResource,\n  fetchOneResource,\n} from \"../store/action\";\nimport Loader from \"../../loader\";\nimport {\n  optionsFormat,\n  optionsPricing,\n  optionsCategory,\n  optionsPace,\n  optionsFeaturedFormat,\n  optionsUnit,\n} from \"./ResourcesFieldsData\";\n\nimport ADD from \"../../assets/icons/add.svg\";\nimport CANCEL from \"../../assets/icons/cancel.svg\";\n\nimport CIcon from \"@coreui/icons-react\";\n\nimport BackArrow from \"../../assets/icons/left-arrow.svg\";\nclass AddResource extends Component {\n  constructor(props) {\n    super();\n\n    this.state = {\n      name: \"\",\n      addPrice: \"\",\n      format: \"\",\n      featuredResource: \"\",\n      pricing: \"\",\n      category: [],\n      uniqueSellingProposition: \"\",\n      errorType: \"\",\n      errorText: \"\",\n      resourceImage: \"\",\n      plusBit: false,\n      pros: [],\n      cons: [],\n      details: [],\n      pace: \"\",\n      websiteLink: \"\",\n      resourceData: {},\n      loadiing: false,\n      unit: \"\",\n    };\n  }\n  componentDidMount() {\n    const resource_id = this.props && this.props.match.params.id;\n\n    if (resource_id) {\n      this.setState({\n        loadiing: true,\n      });\n      this.props.fetchOneResource(`resource?id=${resource_id}`, (value) => {\n        const {\n          title,\n          resource_format,\n          price,\n          category,\n          pace,\n          website,\n          unique_selling_proposition,\n          pros,\n          cons,\n          info,\n          profile_pic,\n          is_featured,\n        } = value.data.resource;\n\n        const detailsData = info.map((el) => {\n          return { value: el };\n        });\n        const prosData = pros.map((el) => {\n          return { value: el };\n        });\n        const consData = cons.map((el) => {\n          return { value: el };\n        });\n        this.setState({\n          loadiing: false,\n          resourceData: value.data.resource,\n          name: title.trim(),\n          format: resource_format,\n          featuredResource: is_featured ? \"True\" : \"False\",\n          pricing:\n            price.value && price.unit\n              ? price.value + \" \" + price.unit\n              : price.value,\n          category,\n          pace,\n          websiteLink: website,\n          uniqueSellingProposition: unique_selling_proposition,\n          pros: prosData,\n          cons: consData,\n          details: detailsData,\n          resourceImage: profile_pic,\n        });\n      });\n    }\n  }\n  uploadImage = (event) => {\n    this.clearError();\n\n    if (event.target.files && event.target.files[0]) {\n      var reader = new FileReader();\n\n      reader.onloadend = function () {\n        this.callApiAddImage((reader && reader.result) || \"\");\n      }.bind(this);\n      this.props.setImage(reader.result);\n      reader.readAsDataURL(event.target.files[0]);\n    }\n  };\n  errorShow = (type) => {\n    const { errorType, errorText } = this.state;\n    return errorType === type ? <p>{errorText}</p> : null;\n  };\n  clearError = () => {\n    this.setState({\n      errorType: \"\",\n      errorText: \"\",\n    });\n  };\n  inputHandler = (e) => {\n    this.clearError();\n    this.setState({ [e.target.name]: e.target.value });\n  };\n  inputProsCons = (e, index, type) => {\n    if (type === \"prosAdd\") {\n      let prosToUpdate = this.state.pros[index];\n      const newArray = [...this.state.pros];\n      prosToUpdate = {\n        ...prosToUpdate,\n        value: e.target.value,\n      };\n\n      newArray[index] = prosToUpdate;\n\n      this.clearError();\n      this.setState({ [e.target.name]: e.target.value, pros: newArray });\n    }\n    if (type === \"consAdd\") {\n      let consToUpdate = this.state.cons[index];\n      const newArray = [...this.state.cons];\n      consToUpdate = {\n        ...consToUpdate,\n        value: e.target.value,\n      };\n\n      newArray[index] = consToUpdate;\n\n      this.clearError();\n      this.setState({ [e.target.name]: e.target.value, cons: newArray });\n    }\n    if (type === \"detailsAdd\") {\n      let detailsToUpdate = this.state.details[index];\n      const newArray = [...this.state.details];\n      detailsToUpdate = {\n        ...detailsToUpdate,\n        value: e.target.value,\n      };\n\n      newArray[index] = detailsToUpdate;\n\n      this.clearError();\n      this.setState({ [e.target.name]: e.target.value, details: newArray });\n    }\n  };\n  onSubmit = (e) => {\n    const resource_id = this.props && this.props.match.params.id;\n\n    const {\n      name,\n      format,\n      featuredResource,\n      pricing,\n      details,\n      uniqueSellingProposition,\n      pros,\n      cons,\n      category,\n      pace,\n      websiteLink,\n      addPrice,\n      unit,\n    } = this.state;\n\n    if (name === \"\") {\n      this.setState({\n        errorType: \"name\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Name should not be empty</b>\n          </span>\n        ),\n      });\n      return;\n    }\n    if (name !== \"\") {\n      let filter = /^[a-zA-Z0-9]+([-_\\s]{1}[a-zA-Z0-9]+)*$/;\n\n      if (!filter.test(name)) {\n        this.setState({\n          errorType: \"name\",\n          errorText: (\n            <span className=\"text-danger\">\n              <b>\n                {\" \"}\n                Name should be combination of alphanumeric text, underscore,\n                space and hyphen\n              </b>\n            </span>\n          ),\n        });\n        return;\n      }\n    }\n\n    if (format === \"\") {\n      this.setState({\n        errorType: \"format\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Select any format</b>\n          </span>\n        ),\n      });\n      return;\n    }\n    if (featuredResource === \"\") {\n      this.setState({\n        errorType: \"featuredResource\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Select Featured Resource</b>\n          </span>\n        ),\n      });\n      return;\n    }\n    if (pricing === \"\") {\n      this.setState({\n        errorType: \"pricing\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Please enter type of pricing</b>\n          </span>\n        ),\n      });\n      return;\n    }\n    if (pricing === \"Others\" && (addPrice === \"\" || unit === \"\")) {\n      this.setState({\n        errorType: \"addPrice\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Please enter price and unit both</b>\n          </span>\n        ),\n      });\n      return;\n    }\n    if (category.length === 0) {\n      this.setState({\n        errorType: \"category\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Please enter category</b>\n          </span>\n        ),\n      });\n      return;\n    }\n    if (pace === \"\") {\n      this.setState({\n        errorType: \"pace\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Please enter pace</b>\n          </span>\n        ),\n      });\n      return;\n    }\n    if (websiteLink === \"\") {\n      this.setState({\n        errorType: \"websiteLink\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Please enter website link</b>\n          </span>\n        ),\n      });\n      return;\n    }\n\n    // if (websiteLink !== \"\") {\n    //   let filter = /(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)/g;\n\n    //   if (!filter.test(websiteLink)) {\n    //     this.setState({\n    //       errorType: \"websiteLink\",\n    //       errorText: (\n    //         <span className=\"text-danger\">\n    //           <b> Please enter valid website link</b>\n    //         </span>\n    //       ),\n    //     });\n    //     return;\n    //   }\n    // }\n\n    if (pros.length === 0) {\n      this.setState({\n        errorType: \"pros\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Please add some pros</b>\n          </span>\n        ),\n      });\n      return;\n    }\n    if (pros.length === 1 && pros[0].value === \"\") {\n      this.setState({\n        errorType: \"pros\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Please add some pros</b>\n          </span>\n        ),\n      });\n      return;\n    }\n    if (cons.length === 0) {\n      this.setState({\n        errorType: \"cons\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Please add some cons</b>\n          </span>\n        ),\n      });\n      return;\n    }\n    if (cons.length === 1 && cons[0].value === \"\") {\n      this.setState({\n        errorType: \"cons\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Please add some cons</b>\n          </span>\n        ),\n      });\n      return;\n    }\n    if (details.length === 0) {\n      this.setState({\n        errorType: \"details\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Please add some details</b>\n          </span>\n        ),\n      });\n      return;\n    }\n    if (details.length === 1 && details[0].value === \"\") {\n      this.setState({\n        errorType: \"details\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Please add some details</b>\n          </span>\n        ),\n      });\n      return;\n    }\n\n    if (uniqueSellingProposition === \"\") {\n      this.setState({\n        errorType: \"uniqueSellingProposition\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Please enter some information</b>\n          </span>\n        ),\n      });\n      return;\n    }\n\n    if (!resource_id) {\n      this.callApiAddResource();\n    } else {\n      this.callApiEditResource();\n    }\n  };\n  callApiAddImage = (base64) => {\n    this.setState({\n      loadiing: true,\n    });\n\n    let obj = {\n      base64,\n    };\n    this.props.addImage(\"common/upload-image\", obj, (value) => {\n      if (value.status === 200) {\n        this.setState({\n          resourceImage: value.data.url,\n          loadiing: false,\n        });\n        setImage(value.data.url);\n      }\n    });\n  };\n  callApiEditResource = () => {\n    const resource_id = this.props && this.props.match.params.id;\n    const {\n      name,\n      format,\n      pricing,\n      unit,\n      websiteLink,\n      category,\n      details,\n      pros,\n      cons,\n      uniqueSellingProposition,\n      pace,\n      addPrice,\n      resourceImage,\n      featuredResource,\n    } = this.state;\n    let infodata = details.map((el) => {\n      return el.value;\n    });\n    let prosdata = pros.map((el) => {\n      return el.value;\n    });\n    let consdata = cons.map((el) => {\n      return el.value;\n    });\n\n    let obj = {\n      id: resource_id,\n      title: name,\n      format,\n      isFeatured: featuredResource === \"True\" ? true : false,\n      // price: pricing === \"Others\" ? addPrice : pricing,\n      price:\n        pricing === \"Others\"\n          ? { value: addPrice, unit, type: \"Others\" }\n          : { value: pricing, type: pricing },\n      website: websiteLink,\n      category,\n      pros: prosdata,\n      cons: consdata,\n      info: infodata,\n      unique_selling_proposition: uniqueSellingProposition,\n      pace,\n    };\n    if (resourceImage) {\n      obj.profile_pic = resourceImage;\n    }\n\n    this.setState({\n      loadiing: true,\n    });\n    this.props.editResource(\"resource/update\", obj, (value) => {\n      if (value.status === 200) {\n        NotificationManager.success(\"Resource edit successfully\", \"\", 1000);\n        this.props.history.push(\"/resources\");\n        this.setState({\n          loadiing: false,\n        });\n      }\n    });\n  };\n  callApiAddResource = () => {\n    const {\n      name,\n      format,\n      featuredResource,\n      pricing,\n      websiteLink,\n      category,\n      details,\n      pros,\n      cons,\n      uniqueSellingProposition,\n      pace,\n      unit,\n      addPrice,\n      resourceImage,\n    } = this.state;\n    let infodata = details.map((el) => {\n      return el.value;\n    });\n    let prosdata = pros.map((el) => {\n      return el.value;\n    });\n    let consdata = cons.map((el) => {\n      return el.value;\n    });\n\n    let obj = {\n      title: name,\n      format,\n      isFeatured: featuredResource === \"True\" ? true : false,\n      // price: pricing === \"Others\" ? addPrice : pricing,\n      // price: pricing === \"Others\" ? { value: addPrice, unit } : pricing,\n      price:\n        pricing === \"Others\"\n          ? { value: addPrice, unit, type: \"Others\" }\n          : { value: pricing, type: pricing },\n      website: websiteLink,\n      category,\n      pros: prosdata,\n      cons: consdata,\n      info: infodata,\n      unique_selling_proposition: uniqueSellingProposition,\n      pace,\n    };\n    if (resourceImage) {\n      obj.profile_pic = resourceImage;\n    }\n\n    this.setState({\n      loadiing: true,\n    });\n    this.props.addResource(\"resource/create\", obj, (value) => {\n      if (value.status === 200) {\n        NotificationManager.success(\"Resource added successfully\", \"\", 1000);\n        this.props.history.push(\"/resources\");\n        this.setState({\n          loadiing: false,\n        });\n      }\n    });\n  };\n  resetState = (e) => {\n    e.preventDefault();\n    this.setState({\n      name: \"\",\n      format: \"\",\n      unit: \"\",\n      featuredResource: \"\",\n      pricing: \"\",\n      category: [],\n      details: [],\n      pros: [],\n      cons: [],\n      resourceImage: \"\",\n      uniqueSellingProposition: \"\",\n      errorType: \"\",\n      errorText: \"\",\n      pace: \"\",\n      websiteLink: \"\",\n    });\n  };\n  handleBack = (e) => {\n    e.preventDefault();\n    this.props.history.push(\"/resources\");\n  };\n  handlePlusButton = (e, type) => {\n    if (type === \"prosAdd\") {\n      const { pros } = this.state;\n      const newArr = [...pros];\n      e.preventDefault();\n      e.stopPropagation();\n      let newPros = {\n        value: \"\",\n      };\n      newArr.push(newPros);\n      this.setState({\n        pros: newArr,\n      });\n    }\n    if (type === \"consAdd\") {\n      const { cons } = this.state;\n      const newArr = [...cons];\n      e.preventDefault();\n      e.stopPropagation();\n      let newCons = {\n        value: \"\",\n      };\n      newArr.push(newCons);\n      this.setState({\n        cons: newArr,\n      });\n    }\n    if (type === \"detailsAdd\") {\n      const { details } = this.state;\n      const newArr = [...details];\n      e.preventDefault();\n      e.stopPropagation();\n      let newDetails = {\n        value: \"\",\n      };\n      newArr.push(newDetails);\n      this.setState({\n        details: newArr,\n      });\n    }\n  };\n  handleCancel = (e, index, type) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (type === \"prosAdd\") {\n      const { pros } = this.state;\n\n      const newArr = [...pros];\n      newArr.splice(index, 1);\n      this.setState({\n        pros: newArr,\n      });\n    }\n    if (type === \"consAdd\") {\n      const { cons } = this.state;\n\n      const newArr = [...cons];\n      newArr.splice(index, 1);\n      this.setState({\n        cons: newArr,\n      });\n    }\n    if (type === \"detailsAdd\") {\n      const { details } = this.state;\n\n      const newArr = [...details];\n      newArr.splice(index, 1);\n      this.setState({\n        details: newArr,\n      });\n    }\n  };\n\n  handleSelect = (data, type) => {\n    this.clearError();\n    if (type === \"format\") {\n      this.setState({\n        format: data.value,\n      });\n    }\n    if (type === \"featuredResource\") {\n      this.setState({\n        featuredResource: data.value,\n      });\n    }\n    if (type === \"pricing\") {\n      this.setState({\n        pricing: data.value,\n      });\n    }\n    if (type === \"addPrice\") {\n      this.setState({\n        unit: data.value,\n      });\n    }\n    if (type === \"category\") {\n      let arr;\n      if (data.length <= 3) {\n        arr = data.map((el) => {\n          return el.value;\n        });\n        this.setState({\n          category: arr,\n        });\n      } else {\n        NotificationManager.info(\"You can select upto 3 only\", \"\", 1000);\n      }\n    }\n    if (type === \"pace\") {\n      this.setState({\n        pace: data.value,\n      });\n    }\n  };\n\n  render() {\n    const {\n      name,\n      format,\n      featuredResource,\n      pricing,\n      uniqueSellingProposition,\n      category,\n      resourceImage,\n      unit,\n      pros,\n      cons,\n      details,\n      pace,\n      websiteLink,\n      addPrice,\n\n      loadiing,\n    } = this.state;\n\n    let categoryVal = optionsCategory.filter((item) => {\n      return category.includes(item.label);\n    });\n\n    return (\n      <CRow>\n        <CCol xs=\"12\" sm=\"12\">\n          <CCard className=\"expert-card\">\n            {loadiing && <Loader />}\n            <CCardHeader>\n              <CButton onClick={this.handleBack} className=\"backBtn\">\n                <img src={BackArrow} className=\"mr-2\" /> Back\n              </CButton>\n            </CCardHeader>\n            <CCardBody>\n              <CForm\n                action=\"\"\n                method=\"post\"\n                encType=\"multipart/form-data\"\n                className=\"form-horizontal\"\n              >\n                <CFormGroup row></CFormGroup>\n                <CFormGroup row>\n                  <CCol md=\"3\">\n                    <CLabel htmlFor=\"name\">Name</CLabel>\n                    <CLabel className=\"text-danger\">*</CLabel>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"9\">\n                    <CInput\n                      id=\"name\"\n                      name=\"name\"\n                      placeholder=\"Name\"\n                      onChange={this.inputHandler}\n                      value={name}\n                    />\n                    {this.errorShow(\"name\")}\n                  </CCol>\n                </CFormGroup>\n                <CFormGroup row>\n                  <CLabel col md=\"3\" htmlFor=\"file-input\">\n                    Image\n                  </CLabel>\n                  <CCol xs=\"12\" md=\"9\">\n                    <div className=\"d-flex image-file\">\n                      <CInputFile\n                        type=\"file\"\n                        accept=\"image/*\"\n                        id=\"file-input\"\n                        name=\"file-input\"\n                        onChange={this.uploadImage}\n                      />\n                      {resourceImage && (\n                        <img\n                          style={{ width: \"80px\", height: \"80px\" }}\n                          src={resourceImage}\n                        />\n                      )}\n                      {this.errorShow(\"file-input\")}\n                    </div>\n                  </CCol>\n                </CFormGroup>\n                <CFormGroup row>\n                  <CCol md=\"3\">\n                    <CLabel htmlFor=\"format\">Format</CLabel>\n                    <CLabel className=\"text-danger\">*</CLabel>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"9\">\n                    <Select\n                      custom\n                      name=\"format\"\n                      placeholder=\"Select Format\"\n                      id=\"format\"\n                      value={format ? { value: format, label: format } : null}\n                      options={optionsFormat}\n                      onChange={(data) => this.handleSelect(data, \"format\")}\n                    ></Select>\n                    {this.errorShow(\"format\")}\n                  </CCol>\n                </CFormGroup>\n\n                <CFormGroup row>\n                  <CCol md=\"3\">\n                    <CLabel htmlFor=\"featuredResource\">\n                      Featured Resource\n                    </CLabel>\n                    <CLabel className=\"text-danger\">*</CLabel>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"9\">\n                    <Select\n                      custom\n                      name=\"featuredResource\"\n                      placeholder=\"Select Featured Resource\"\n                      id=\"featuredResource\"\n                      value={\n                        featuredResource\n                          ? {\n                              value: featuredResource,\n                              label: featuredResource,\n                            }\n                          : null\n                      }\n                      options={optionsFeaturedFormat}\n                      onChange={(data) =>\n                        this.handleSelect(data, \"featuredResource\")\n                      }\n                    ></Select>\n                    {this.errorShow(\"featuredResource\")}\n                  </CCol>\n                </CFormGroup>\n\n                <CFormGroup row>\n                  <CCol md=\"3\">\n                    <CLabel htmlFor=\"pricing\">Price</CLabel>\n                    <CLabel className=\"text-danger\">*</CLabel>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"9\">\n                    <Select\n                      custom\n                      name=\"pricing\"\n                      placeholder=\"Select Price\"\n                      id=\"pricing\"\n                      value={\n                        pricing ? { value: pricing, label: pricing } : null\n                      }\n                      options={optionsPricing}\n                      onChange={(data) => this.handleSelect(data, \"pricing\")}\n                    ></Select>\n                    {this.errorShow(\"pricing\")}\n                  </CCol>\n                </CFormGroup>\n\n                {pricing === \"Others\" && (\n                  <CFormGroup row>\n                    <CCol md=\"3\">\n                      <CLabel htmlFor=\"addPrice\">Add Price</CLabel>\n                      <CLabel className=\"text-danger\">*</CLabel>\n                    </CCol>\n                    <CCol xs=\"6\">\n                      <CInput\n                        type=\"number\"\n                        id=\"addPrice\"\n                        name=\"addPrice\"\n                        placeholder=\"Add Price\"\n                        onChange={this.inputHandler}\n                        value={addPrice}\n                      />\n                      {this.errorShow(\"addPrice\")}\n                    </CCol>\n                    <CCol xs=\"6\" md=\"3\">\n                      <Select\n                        custom\n                        name=\"addPrice\"\n                        placeholder=\"Add Unit\"\n                        id=\"addPrice\"\n                        value={unit ? { value: unit, label: unit } : null}\n                        options={optionsUnit}\n                        onChange={(data) => this.handleSelect(data, \"addPrice\")}\n                      ></Select>\n                      {/* {this.errorShow(\"addPrice\")} */}\n                    </CCol>\n                  </CFormGroup>\n                )}\n\n                <CFormGroup row>\n                  <CCol md=\"3\">\n                    <CLabel htmlFor=\"category\">Category</CLabel>\n                    <CLabel className=\"text-danger\">*</CLabel>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"9\">\n                    <Select\n                      isMulti\n                      custom\n                      name=\"category\"\n                      placeholder=\"Select Category\"\n                      id=\"category\"\n                      value={categoryVal}\n                      options={optionsCategory}\n                      onChange={(data) => this.handleSelect(data, \"category\")}\n                    ></Select>\n                    {this.errorShow(\"category\")}\n                  </CCol>\n                </CFormGroup>\n\n                <CFormGroup row>\n                  <CCol md=\"3\">\n                    <CLabel htmlFor=\"pace\">Pace</CLabel>\n                    <CLabel className=\"text-danger\">*</CLabel>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"9\">\n                    <Select\n                      custom\n                      name=\"pace\"\n                      placeholder=\"Select Pace\"\n                      id=\"pace\"\n                      value={pace ? { value: pace, label: pace } : null}\n                      options={optionsPace}\n                      onChange={(data) => this.handleSelect(data, \"pace\")}\n                    ></Select>\n                    {this.errorShow(\"pace\")}\n                  </CCol>\n                </CFormGroup>\n\n                <CFormGroup row>\n                  <CCol md=\"3\">\n                    <CLabel htmlFor=\"websiteLink\">Website Link</CLabel>\n                    <CLabel className=\"text-danger\">*</CLabel>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"9\">\n                    <CInput\n                      id=\"websiteLink\"\n                      name=\"websiteLink\"\n                      placeholder=\"Website Link\"\n                      onChange={this.inputHandler}\n                      value={websiteLink}\n                    />\n                    {this.errorShow(\"websiteLink\")}\n                  </CCol>\n                </CFormGroup>\n\n                <CFormGroup row>\n                  <CCol md=\"3\">\n                    <CLabel htmlFor=\"prosCons\">Pros & Cons</CLabel>\n                    <CLabel className=\"text-danger\">*</CLabel>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"9\">\n                    <div\n                      onClick={(e) => this.handlePlusButton(e, \"prosAdd\")}\n                      class=\"d-flex justify-content-between add-list\"\n                    >\n                      <CLabel htmlFor=\"pros\">Add Pros</CLabel>\n                      <button className=\"icon\">\n                        <img src={ADD} className=\"ml-3\" />\n                      </button>\n                    </div>\n                    {this.errorShow(\"pros\")}\n                    {pros &&\n                      pros.length > 0 &&\n                      pros.map((el, index) => {\n                        return (\n                          <div className=\"d-flex align-items-center mb-2 \">\n                            <CInput\n                              type=\"text\"\n                              id={`pros${index}`}\n                              name={`pros${index}`}\n                              placeholder={`${index + 1}.`}\n                              autoComplete={`pros${index}`}\n                              onChange={(e) => {\n                                this.inputProsCons(e, index, \"prosAdd\");\n                              }}\n                              value={el.value}\n                            />\n                            <button\n                              className=\"icon\"\n                              onClick={(e) =>\n                                this.handleCancel(e, index, \"prosAdd\")\n                              }\n                            >\n                              <img src={CANCEL} className=\"ml-3\" />\n                            </button>\n                          </div>\n                        );\n                      })}\n\n                    <div\n                      onClick={(e) => this.handlePlusButton(e, \"consAdd\")}\n                      class=\"d-flex justify-content-between add-list\"\n                    >\n                      <CLabel htmlFor=\"cons\">Add Cons</CLabel>\n                      <button className=\"icon\">\n                        <img src={ADD} className=\"ml-3\" />\n                      </button>\n                    </div>\n                    {this.errorShow(\"cons\")}\n                    {cons &&\n                      cons.length > 0 &&\n                      cons.map((el, index) => {\n                        return (\n                          <div className=\"d-flex align-items-center mb-2\">\n                            <CInput\n                              type=\"text\"\n                              id={`cons${index}`}\n                              name={`cons${index}`}\n                              placeholder={`${index + 1}.`}\n                              autoComplete={`cons${index}`}\n                              onChange={(e) => {\n                                this.inputProsCons(e, index, \"consAdd\");\n                              }}\n                              value={el.value}\n                            />\n                            <button\n                              className=\"icon\"\n                              onClick={(e) =>\n                                this.handleCancel(e, index, \"consAdd\")\n                              }\n                            >\n                              <img src={CANCEL} className=\"ml-3\" />\n                            </button>\n                          </div>\n                        );\n                      })}\n                  </CCol>\n                </CFormGroup>\n\n                <CFormGroup row>\n                  <CCol md=\"3\">\n                    <CLabel htmlFor=\"details\">Details</CLabel>\n                    <CLabel className=\"text-danger\">*</CLabel>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"9\">\n                    <div\n                      class=\"d-flex justify-content-between add-list\"\n                      onClick={(e) => this.handlePlusButton(e, \"detailsAdd\")}\n                    >\n                      <CLabel htmlFor=\"addDetails\">Add Details</CLabel>\n                      <button className=\"icon\">\n                        <img src={ADD} className=\"ml-3\" />\n                      </button>\n                    </div>\n                    {this.errorShow(\"details\")}\n                    {details &&\n                      details.length > 0 &&\n                      details.map((el, index) => {\n                        return (\n                          <div className=\"d-flex align-items-center mb-2\">\n                            <CInput\n                              type=\"text\"\n                              id={`details${index}`}\n                              name={`details${index}`}\n                              placeholder={`${index + 1}.`}\n                              autoComplete={`details${index}`}\n                              onChange={(e) => {\n                                this.inputProsCons(e, index, \"detailsAdd\");\n                              }}\n                              value={el.value}\n                            />\n\n                            <button\n                              className=\"icon\"\n                              onClick={(e) =>\n                                this.handleCancel(e, index, \"detailsAdd\")\n                              }\n                            >\n                              <img src={CANCEL} className=\"ml-3\" />\n                            </button>\n                          </div>\n                        );\n                      })}\n                  </CCol>\n                </CFormGroup>\n\n                <CFormGroup row>\n                  <CCol md=\"3\">\n                    <CLabel htmlFor=\"uniqueSellingProposition\">\n                      Unique Selling Proposition\n                      <CLabel className=\"text-danger\">*</CLabel>\n                    </CLabel>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"9\">\n                    <CTextarea\n                      name=\"uniqueSellingProposition\"\n                      id=\"uniqueSellingProposition\"\n                      rows=\"9\"\n                      onChange={this.inputHandler}\n                      placeholder=\"Content...\"\n                      value={uniqueSellingProposition}\n                    />\n                    {this.errorShow(\"uniqueSellingProposition\")}\n                  </CCol>\n                </CFormGroup>\n              </CForm>\n            </CCardBody>\n            <CCardFooter>\n              <div className=\"text-right\">\n                <CButton\n                  type=\"submit\"\n                  size=\"sm\"\n                  color=\"primary\"\n                  onClick={this.onSubmit}\n                >\n                  <CIcon name=\"cil-scrubber\" /> Submit\n                </CButton>\n                <CButton\n                  type=\"reset\"\n                  size=\"sm\"\n                  color=\"danger\"\n                  onClick={this.resetState}\n                  className=\"ml-2\"\n                >\n                  <CIcon name=\"cil-ban\" /> Reset\n                </CButton>\n              </div>\n            </CCardFooter>\n          </CCard>\n        </CCol>\n      </CRow>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    saveResourceData: state.LoginAndNavigationReducer.saveResourceData,\n    saveImage: state.LoginAndNavigationReducer.saveImage,\n  };\n};\nconst mapDispatchToProps = (dispatch) => {\n  return bindActionCreators(\n    {\n      addResource,\n      addImage,\n      fetchOneResource,\n      setImage,\n      editResource,\n    },\n    dispatch\n  );\n};\nexport default withRouter(\n  connect(mapStateToProps, mapDispatchToProps)(AddResource)\n);\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/index.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/views/experts/ExpertsFieldsData.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/views/resources/ResourcesFieldsData.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/views/store/action.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/TheContent.js",["270"],"import React, { Suspense } from \"react\";\nimport { Redirect, Route, Switch } from \"react-router-dom\";\nimport { CContainer, CFade } from \"@coreui/react\";\n\nimport routes from \"../routes\";\n\nconst loading = (\n  <div className=\"pt-3 text-center\">\n    <div className=\"sk-spinner sk-spinner-pulse\"></div>\n  </div>\n);\n\nconst PrivateRoutes = ({ component: Component, ...rest }) => {\n  return (\n    <Route\n      {...rest}\n      render={(props) =>\n        rest.isAuthenticated ? (\n          <Component {...props} />\n        ) : (\n          <Redirect\n            to={{\n              pathname: \"/login\",\n            }}\n          />\n        )\n      }\n    />\n  );\n};\n\nconst TheContent = () => {\n  const isLoggedIn = localStorage.getItem(\"isLoggedIn\");\n\n  return (\n    <main className=\"c-main pt-4\">\n      <CContainer fluid>\n        <Suspense fallback={loading}>\n          <Switch>\n            {routes.map((route, idx) => {\n              return (\n                <PrivateRoutes\n                  key={idx}\n                  exact\n                  path={route.path}\n                  component={route.component}\n                  isAuthenticated={isLoggedIn}\n                />\n                // route.component && (\n                //   <Route\n                //     key={idx}\n                //     path={route.path}\n                //     exact={route.exact}\n                //     name={route.name}\n                //     render={(props) => (\n                //       <CFade>\n                //         <route.component {...props} />\n                //       </CFade>\n                //     )}\n                //   />\n                // )\n              );\n            })}\n            <Redirect to=\"/login\" />\n          </Switch>\n        </Suspense>\n      </CContainer>\n    </main>\n  );\n};\n\nexport default React.memo(TheContent);\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/TheHeaderDropdown.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/TheHeader.js",["271","272"],"import React, { useState } from \"react\";\n\nimport { withRouter } from \"react-router-dom\";\nimport {\n  CHeader,\n  CHeaderNav,\n  CSubheader,\n  CBreadcrumbRouter,\n  CToggler,\n} from \"@coreui/react\";\n\nimport routes from \"../routes\";\nimport { TheHeaderDropdown, TheSidebar } from \"./index\";\n\nconst TheHeader = (props) => {\n  const toggleSidebar = () => {\n    props.toggleSideBar();\n  };\n  const toggleSidebarMobile = () => {\n    props.toggleSideBar();\n  };\n  return (\n    <CHeader withSubheader>\n      <CToggler\n        inHeader\n        className=\"ml-md-3 d-lg-none\"\n        onClick={toggleSidebarMobile}\n      />\n      <CToggler\n        inHeader\n        className=\"ml-3 d-md-down-none\"\n        onClick={toggleSidebar}\n      />\n      <CHeaderNav className=\"d-md-down-none mr-auto\"></CHeaderNav>\n\n      <CHeaderNav className=\"px-3\">\n        <TheHeaderDropdown history={props.history} />\n      </CHeaderNav>\n      <CSubheader className=\"px-3 justify-content-between\">\n        <CBreadcrumbRouter\n          className=\"border-0 c-subheader-nav m-0 px-0 px-md-3\"\n          routes={routes}\n        />\n      </CSubheader>\n    </CHeader>\n  );\n};\n\nexport default withRouter(TheHeader);\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/TheSidebar.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/loader/index.js",["273","274"],"import React from \"react\";\nconst dots = [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}];\nexport default () => (\n  <>\n    <div className=\"loader-backdrop\" />\n    <div className=\"content-loader\">\n      <div className=\"dot-loader\">\n        {dots.map(({}, index) => (\n          <div key={index} />\n        ))}\n      </div>\n    </div>\n  </>\n);\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/store/types.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/routes.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/logo.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/_nav.js",["275"],"import { Planner, Users, Experts, Resources } from \"../containers/icons\";\n\nconst _nav = [\n  {\n    _tag: \"CSidebarNavItem\",\n    name: \"Users\",\n    to: \"/users\",\n\n    icon: <Users customClasses=\"c-sidebar-nav-icon\" />,\n  },\n\n  {\n    _tag: \"CSidebarNavItem\",\n    name: \"Experts\",\n    to: \"/experts\",\n\n    icon: <Experts customClasses=\"c-sidebar-nav-icon\" />,\n  },\n  {\n    _tag: \"CSidebarNavItem\",\n    name: \"Resources\",\n    to: \"/resources\",\n\n    icon: <Resources customClasses=\"c-sidebar-nav-icon\" />,\n  },\n  // {\n  //   _tag: \"CSidebarNavItem\",\n  //   name: \"Planner\",\n  //   to: \"/planner\",\n\n  //   icon: <Planner customClasses=\"c-sidebar-nav-icon\" />,\n  // },\n];\n\nexport default _nav;\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/resources/Resource.js",["276"],"import React, { useState, useEffect } from \"react\";\nimport { CCard, CCardBody, CCardHeader, CCol, CRow } from \"@coreui/react\";\n\nimport { fetchOneResource } from \"../store/action\";\n\nimport { connect } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { withRouter } from \"react-router-dom\";\n\nimport Loader from \"../../loader\";\nconst Resource = (props) => {\n  const [resource, setResource] = useState({});\n  const [loading, setLoading] = useState(false);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    setLoading(true);\n\n    const resource_id = props && props.match.params.id;\n    dispatch(\n      fetchOneResource(`resource?id=${resource_id}`, (value) => {\n        setResource(value.data.resource);\n        setLoading(false);\n      })\n    );\n  }, []);\n\n  let category =\n    resource &&\n    resource.category &&\n    resource.category.length > 0 &&\n    resource.category.join(\", \");\n\n  let pros =\n    resource &&\n    resource.pros &&\n    resource.pros.length > 0 &&\n    resource.pros.join(\", \");\n  let cons =\n    resource &&\n    resource.cons &&\n    resource.cons.length > 0 &&\n    resource.cons.join(\", \");\n  let details =\n    resource &&\n    resource.info &&\n    resource.info.length > 0 &&\n    resource.info.join(\", \");\n\n  let price =\n    resource.price && resource.price.value && resource.price.unit\n      ? resource.price.value + \" \" + resource.price.unit\n      : resource.price && (resource.price.value || resource.price);\n\n  let featured = resource.is_featured ? \"Yes\" : \"No\";\n  return (\n    <CRow>\n      <CCol lg={12}>\n        <CCard>\n          {loading && <Loader />}\n          <CCardHeader>Resource Details</CCardHeader>\n\n          <CCardBody>\n            {resource && (\n              <table className=\"table\">\n                <tbody>\n                  {!loading && (\n                    <tr>\n                      <td>RID</td>\n                      <td>\n                        <strong>{resource._id}</strong>\n                      </td>\n                    </tr>\n                  )}\n\n                  {resource.title && (\n                    <tr>\n                      <td>Name</td>\n                      <td>\n                        <strong>{resource.title}</strong>\n                      </td>\n                    </tr>\n                  )}\n                  {resource.profile_pic && (\n                    <tr>\n                      <td>Image</td>\n                      <td>\n                        <img\n                          style={{\n                            width: \"100px\",\n                            height: \"100px\",\n                            borderRadius: \"4px\",\n                          }}\n                          src={resource.profile_pic}\n                          alt=\"profile\"\n                        />\n                      </td>\n                    </tr>\n                  )}\n                  {resource.resource_format && (\n                    <tr>\n                      <td>Format</td>\n                      <td>\n                        <strong>{resource.resource_format}</strong>\n                      </td>\n                    </tr>\n                  )}\n\n                  {featured && !loading && (\n                    <tr>\n                      <td>Featured Resource</td>\n                      <td>\n                        <strong>{featured}</strong>\n                      </td>\n                    </tr>\n                  )}\n\n                  {price && (\n                    <tr>\n                      <td>Price</td>\n                      <td>\n                        <strong>{price}</strong>\n                      </td>\n                    </tr>\n                  )}\n\n                  {resource.category && (\n                    <tr>\n                      <td>Category</td>\n                      <td>\n                        <strong>{category}</strong>\n                      </td>\n                    </tr>\n                  )}\n                  {resource.pace && (\n                    <tr>\n                      <td>Pace</td>\n                      <td>\n                        <strong>{resource.pace}</strong>\n                      </td>\n                    </tr>\n                  )}\n                  {resource.website && (\n                    <tr>\n                      <td>Website Link</td>\n                      <td>\n                        <strong>{resource.website}</strong>\n                      </td>\n                    </tr>\n                  )}\n                  {resource.unique_selling_proposition && (\n                    <tr>\n                      <td>Unique Selling Proposition</td>\n                      <td>\n                        <strong>{resource.unique_selling_proposition}</strong>\n                      </td>\n                    </tr>\n                  )}\n                  {resource.pros && resource.pros.length > 0 && (\n                    <tr>\n                      <td>Pros</td>\n                      <td>\n                        <strong>{pros}</strong>\n                      </td>\n                    </tr>\n                  )}\n                  {resource.cons && resource.cons.length > 0 && (\n                    <tr>\n                      <td>Cons</td>\n                      <td>\n                        <strong>{cons}</strong>\n                      </td>\n                    </tr>\n                  )}\n                  {resource.info && (\n                    <tr>\n                      <td>Details</td>\n                      <td>\n                        <strong>{details}</strong>\n                      </td>\n                    </tr>\n                  )}\n                </tbody>\n              </table>\n            )}\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    saveImage: state.LoginAndNavigationReducer.saveImage,\n  };\n};\nconst mapDispatchToProps = (dispatch) => {\n  return bindActionCreators(\n    {\n      fetchOneResource,\n    },\n    dispatch\n  );\n};\nexport default withRouter(\n  connect(mapStateToProps, mapDispatchToProps)(Resource)\n);\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/experts/Experts.js",["277","278","279","280","281","282"],"import React, { useState, useEffect } from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { withRouter } from \"react-router-dom\";\nimport Search from \"../../common/search\";\nimport Pagination from \"react-js-pagination\";\nimport moment from \"moment-timezone\";\nimport { CCard, CCardBody, CCol, CRow, CButton } from \"@coreui/react\";\nimport PaginationCommon from \"../../common/pagination\";\nimport { fetchExperts, deleteExpert, userStatus } from \"../store/action\";\nimport { connect } from \"react-redux\";\nimport { NotificationManager } from \"react-notifications\";\nimport { bindActionCreators } from \"redux\";\nimport Loader from \"../../loader\";\nimport CommonModal from \"../../common/commonModal\";\nimport Tooltip from \"../../common/toolTip\";\nimport EDIT from \"../../assets/icons/edit.svg\";\nimport DELETE from \"../../assets/icons/delete.svg\";\n\nimport ACTIVATE from \"../../assets/icons/activate.svg\";\nimport DEACTIVATE from \"../../assets/icons/deactivate.svg\";\nimport { Table } from \"reactstrap\";\n\nconst offsetLimit = 10;\n\nconst Experts = (props) => {\n  const history = useHistory();\n\n  const [page, setPage] = useState(1);\n  const [search, setSearch] = useState(\"\");\n  const [idExpert, setIdExpert] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [expertsDetails, setExpertsDetails] = useState([]);\n  const [modalOpen, setModalOpen] = useState(false);\n  const [count, setCount] = useState(0);\n  const [type, setType] = useState(\"\");\n  const [offset, setOffset] = useState(\"\");\n\n  const pageChange = (newPage) => {\n    setLoading(true);\n    props.fetchExperts(\n      `expert/all?offset=${offset}&limit=${offsetLimit}&search=${search}`,\n      (value) => {\n        const { experts, count } = value.data;\n        setLoading(false);\n        setExpertsDetails(experts);\n        setCount(count);\n        setOffset(experts.length && experts[experts.length - 1]._id);\n        setPage(newPage);\n      }\n    );\n  };\n\n  const addExpert = () => {\n    props.history.push(\"/addExpert\");\n  };\n  const handleSearch = (e) => {\n    setSearch(e.target.value);\n    setOffset(\"\");\n    setPage(1);\n  };\n\n  const editExpert = (e, item) => {\n    setIdExpert(item.id);\n    e.preventDefault();\n    e.stopPropagation();\n    props.history.push(`/editExpert/${item._id}`);\n  };\n\n  const onDelete = (e, type, id) => {\n    setIdExpert(id);\n    setType(type);\n    e.preventDefault();\n    e.stopPropagation();\n    setModalOpen(!modalOpen);\n  };\n\n  const deleteExpert = (id) => {\n    if (type === \"deleteExpert\") {\n      if (idExpert === id) setModalOpen(false);\n      setLoading(true);\n      props.deleteExpert(`expert/delete?id=${id}`, (value) => {\n        if (value.status === 200) {\n          NotificationManager.success(\"Expert deleted successfully\", \"\", 1000);\n          setLoading(false);\n\n          callApiToFetchAllExperts(true);\n        }\n      });\n    } else {\n      if (idExpert === id) setModalOpen(false);\n      setLoading(true);\n      let obj = {\n        type: type,\n        id: id,\n        user_type: \"expert\",\n      };\n\n      props.userStatus(\"common/change-status\", obj, (value) => {\n        if (value.status === 200) {\n          NotificationManager.success(value.message, \"\", 1000);\n\n          callApiToFetchAllExperts(true);\n        }\n      });\n    }\n  };\n  useEffect(() => {\n    callApiToFetchAllExperts();\n  }, [search]);\n  const callApiToFetchAllExperts = (isDelete) => {\n    if (isDelete) {\n      setLoading(true);\n\n      props.fetchExperts(\n        `expert/all?offset=&limit=${offsetLimit}&search=${search}`,\n        (value) => {\n          if (value.status === 200) {\n            const { experts, count } = value.data;\n            setLoading(false);\n            setExpertsDetails(experts);\n            setCount(count);\n            setOffset(experts.length && experts[experts.length - 1]._id);\n          }\n        }\n      );\n    } else {\n      setLoading(true);\n\n      props.fetchExperts(\n        `expert/all?offset=${offset}&limit=${offsetLimit}&search=${search}`,\n        (value) => {\n          if (value.status === 200) {\n            const { experts, count } = value.data;\n            setLoading(false);\n            setExpertsDetails(experts);\n            setCount(count);\n            setOffset(experts.length && experts[experts.length - 1]._id);\n          }\n        }\n      );\n    }\n  };\n  const onBlock = (e, type, item) => {\n    setIdExpert(item._id);\n    setType(type);\n    e.preventDefault();\n    e.stopPropagation();\n    setModalOpen(!modalOpen);\n  };\n\n  return (\n    <CRow>\n      <CCol xl={12}>\n        <form className=\"position-relative\">\n          {/* <div className=\"text-center search-input\">\n            <input\n              type=\"search\"\n              className=\"form-control\"\n              placeholder=\"Search\"\n              required\n              onChange={handleSearch}\n            />\n          </div> */}\n          <Search handleSearch={handleSearch} />\n          <div className=\"text-right resource-btn\">\n            <CButton block color=\"info\" onClick={addExpert}>\n              Add Expert\n            </CButton>\n          </div>\n        </form>\n        <CCard>\n          {loading && <Loader />}\n          <CCardBody>\n            <Table responsive>\n              <thead>\n                <tr>\n                  <th className=\"text-nowrap \">Name</th>\n\n                  <th>Email</th>\n\n                  <th>Designation</th>\n\n                  <th>Country</th>\n                  <th>Role</th>\n                  <th>Created At</th>\n                  <th>Action</th>\n                </tr>\n              </thead>\n              <tbody>\n                {expertsDetails && expertsDetails.length === 0 && !loading && (\n                  <h3 className=\"text-center no-user-found\">\n                    No Experts Found!\n                  </h3>\n                )}\n                {expertsDetails &&\n                  expertsDetails.length > 0 &&\n                  expertsDetails.map((item, index) => {\n                    let istDate = new Date(item.createdAt);\n\n                    let createdAt = moment(istDate).format(\n                      \"DD-MM-YYYY, hh:mm a\"\n                    );\n                    return (\n                      <tr\n                        style={{ cursor: \"pointer\" }}\n                        onClick={() =>\n                          history.push({\n                            pathname: `/experts/${item._id}`,\n                          })\n                        }\n                      >\n                        <td>\n                          {\" \"}\n                          {item.first_name && item.last_name\n                            ? item.first_name + \" \" + item.last_name\n                            : \"-\"}\n                        </td>\n                        <td>{item.email ? item.email : \"-\"}</td>\n                        <td>{item.designation}</td>\n                        <td>{item.country}</td>\n                        <td>{item.current_role}</td>\n                        <td>\n                          {\" \"}\n                          {createdAt !== \"Invalid date\" ? createdAt : \"-\"}\n                        </td>\n                        <td>\n                          <div className=\"d-flex align-items-center\">\n                            <button\n                              id={`edit-${index}`}\n                              className=\"icon\"\n                              onClick={(e) => editExpert(e, item)}\n                            >\n                              <img src={EDIT} className=\"ml-3\" />\n                            </button>\n                            <Tooltip placement=\"top\" target={`edit-${index}`}>\n                              Edit\n                            </Tooltip>\n                            <button\n                              className=\"icon\"\n                              onClick={(e) =>\n                                onDelete(e, \"deleteExpert\", item._id)\n                              }\n                              id={`delete-${index}`}\n                            >\n                              <img src={DELETE} className=\"ml-3\" />\n                            </button>\n                            <Tooltip placement=\"top\" target={`delete-${index}`}>\n                              Delete\n                            </Tooltip>\n                            {item.expert_status !== \"deactivated\" && (\n                              <>\n                                <button\n                                  onClick={(e) =>\n                                    onBlock(e, \"deactivate\", item)\n                                  }\n                                  className=\"icon\"\n                                  id={`deactivate-${index}`}\n                                >\n                                  <img src={DEACTIVATE} className=\"ml-3\" />\n                                </button>\n                                <Tooltip\n                                  placement=\"top\"\n                                  target={`deactivate-${index}`}\n                                >\n                                  Deactivate\n                                </Tooltip>\n                              </>\n                            )}\n\n                            {item.expert_status === \"deactivated\" && (\n                              <>\n                                <button\n                                  onClick={(e) => onBlock(e, \"activate\", item)}\n                                  className=\"icon\"\n                                  id={`activate-${index}`}\n                                >\n                                  <img src={ACTIVATE} className=\"ml-3\" />\n                                </button>\n                                <Tooltip\n                                  placement=\"top\"\n                                  target={`activate-${index}`}\n                                >\n                                  Activate\n                                </Tooltip>\n                              </>\n                            )}\n                          </div>\n                        </td>\n                      </tr>\n                    );\n                  })}\n              </tbody>\n            </Table>\n\n            {/* <div className=\"text-center pagination-input\">\n              {count > offsetLimit && !loading && (\n                <Pagination\n                  className=\"mt-3 mx-auto w-fit-content\"\n                  itemClass=\"page-item\"\n                  linkClass=\"page-link\"\n                  activeClass=\"active\"\n                  activePage={page}\n                  itemsCountPerPage={offsetLimit}\n                  totalItemsCount={count}\n                  pageRangeDisplayed={5}\n                  onChange={pageChange}\n                />\n              )}\n            </div> */}\n            <PaginationCommon\n              pageChange={pageChange}\n              count={count}\n              offsetLimit={offsetLimit}\n              page={page}\n              loading={loading}\n            />\n            <div>\n              {modalOpen && (\n                <CommonModal\n                  isOpen={modalOpen}\n                  toggle={(e) => onDelete(e)}\n                  block_delete={(e) => deleteExpert(e, idExpert)}\n                  id={idExpert}\n                  type={type}\n                />\n              )}\n            </div>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {};\n};\nconst mapDispatchToProps = (dispatch) => {\n  return bindActionCreators(\n    {\n      fetchExperts,\n      deleteExpert,\n      userStatus,\n    },\n    dispatch\n  );\n};\nexport default withRouter(\n  connect(mapStateToProps, mapDispatchToProps)(Experts)\n);\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/experts/Expert.js",["283","284"],"import React, { useState, useEffect } from \"react\";\nimport {\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CNavLink,\n  CNav,\n  CTabContent,\n  CTabPane,\n  CTabs,\n  CNavItem,\n  CBadge,\n} from \"@coreui/react\";\nimport moment from \"moment\";\nimport ExpertUserUsage from \"../experts/ExpertUserUsage\";\nimport Loader from \"../../loader\";\n\nimport { connect } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { withRouter } from \"react-router-dom\";\nimport { fetchOneExpert } from \"../store/action\";\nconst Expert = (props) => {\n  const [expert, setExpert] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [appointments, setAppointments] = useState({});\n  const dispatch = useDispatch();\n  useEffect(() => {\n    setLoading(true);\n\n    const expert_id = props && props.match.params.id;\n    dispatch(\n      fetchOneExpert(`expert?id=${expert_id}`, (value) => {\n        setExpert(value.data.expert);\n        setAppointments(value.data.appointments);\n        setLoading(false);\n      })\n    );\n  }, []);\n\n  let istDate = new Date(expert && expert.createdAt);\n\n  let createdAt = moment(istDate).format(\"DD-MM-YYYY, hh:mm a\");\n  let fields =\n    expert && expert.expert_fields && expert.expert_fields.join(\", \");\n\n  let info = expert && expert.info && expert.info.join(\"\\r\\n\");\n\n  let skills =\n    expert &&\n    expert.skills &&\n    expert.skills[0] &&\n    expert.skills[0].values &&\n    expert.skills[0].values.join(\", \");\n\n  const getBadge = (status) => {\n    switch (status) {\n      case \"Deactivated\":\n        return \"danger\";\n\n      case \"Activated\":\n        return \"success\";\n\n      default:\n        return \"primary\";\n    }\n  };\n\n  let serviceName =\n    expert &&\n    expert.rates &&\n    expert.rates.map((item) => {\n      return `${item.serviceName} and ${item.value} ${item.unit}, \\n`;\n    });\n\n  const onClick = () => {\n    const expert_id = props && props.match.params.id;\n    props.history.push(`/experts/${expert_id}/calls-with-users`);\n  };\n\n  return (\n    <CRow>\n      <CCol lg={12}>\n        <CCard>\n          {loading && <Loader />}\n\n          <CCardBody>\n            <CTabs>\n              <CNav variant=\"tabs\">\n                <CNavItem>\n                  <CNavLink>Expert Details</CNavLink>\n                </CNavItem>\n                <CNavItem>\n                  <CNavLink onClick={onClick}>Calls with Users</CNavLink>\n                </CNavItem>\n              </CNav>\n              <CTabContent>\n                <CTabPane>\n                  {expert && (\n                    <table className=\"table\">\n                      <tbody>\n                        {createdAt !== \"Invalid date\" && (\n                          <tr>\n                            <td>Created At</td>\n                            <td>\n                              <strong> {createdAt}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {!loading && (\n                          <tr>\n                            <td>Status</td>\n\n                            <td>\n                              <CBadge\n                                color={getBadge(\n                                  expert.expert_status === \"deactivated\"\n                                    ? \"Deactivated\"\n                                    : \"Activated\"\n                                )}\n                              >\n                                {expert.expert_status === \"deactivated\"\n                                  ? \"Deactivated\"\n                                  : \"Activated\"}\n                              </CBadge>\n                            </td>\n                          </tr>\n                        )}\n                        {!loading && (\n                          <tr>\n                            <td>EID</td>\n                            <td>\n                              <strong>{expert._id}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {expert.profile_pic && (\n                          <tr>\n                            <td>Picture</td>\n                            <td>\n                              <img\n                                style={{\n                                  width: \"100px\",\n                                  height: \"100px\",\n                                  borderRadius: \"4px\",\n                                }}\n                                src={expert.profile_pic}\n                                alt=\"profile\"\n                              />\n                            </td>\n                          </tr>\n                        )}\n                        {expert.first_name && (\n                          <tr>\n                            <td>First name</td>\n                            <td>\n                              <strong>{expert.first_name}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {expert.last_name && (\n                          <tr>\n                            <td>Last name</td>\n                            <td>\n                              <strong>{expert.last_name}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {expert.email && (\n                          <tr>\n                            <td>Email</td>\n                            <td>\n                              <strong>{expert.email}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {expert.contact_no && (\n                          <tr>\n                            <td>Contact</td>\n                            <td>\n                              <strong>{expert.contact_no}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {expert.gender && (\n                          <tr>\n                            <td>Gender</td>\n                            <td>\n                              <strong>{expert.gender}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {expert.country && (\n                          <tr>\n                            <td>Country</td>\n                            <td>\n                              <strong>{expert.country}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {info && (\n                          <tr>\n                            <td>About</td>\n                            <td>\n                              <strong>{info}</strong>\n                            </td>\n                          </tr>\n                        )}\n\n                        {expert.current_role && (\n                          <tr>\n                            <td>Current Role</td>\n                            <td>\n                              <strong>{expert.current_role}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {expert.industry && (\n                          <tr>\n                            <td>Current Industry</td>\n                            <td>\n                              <strong>{expert.industry}</strong>\n                            </td>\n                          </tr>\n                        )}\n\n                        {expert.designation && (\n                          <tr>\n                            <td>Designation</td>\n                            <td>\n                              <strong>{expert.designation}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {expert.linkedIn && (\n                          <tr>\n                            <td>LinkedIn Link</td>\n                            <td>\n                              <strong>{expert.linkedIn}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {expert.calendar_id && (\n                          <tr>\n                            <td>Calendar Id</td>\n                            <td>\n                              <strong>{expert.calendar_id}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {serviceName && (\n                          <tr>\n                            <td>Service and its Rate</td>\n                            <td>\n                              <strong>{serviceName}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {expert.service && (\n                          <tr>\n                            <td>Service</td>\n                            <td>\n                              <strong>{expert.service}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {fields && (\n                          <tr>\n                            <td>Fields</td>\n                            <td>\n                              <strong>{fields}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {skills && (\n                          <tr>\n                            <td>Skills</td>\n                            <td>\n                              <strong>{skills}</strong>\n                            </td>\n                          </tr>\n                        )}\n                      </tbody>\n                    </table>\n                  )}\n                </CTabPane>\n                <CTabPane>\n                  <ExpertUserUsage appointments={appointments} />\n                </CTabPane>\n              </CTabContent>\n            </CTabs>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {};\n};\nconst mapDispatchToProps = (dispatch) => {\n  return bindActionCreators(\n    {\n      fetchOneExpert,\n    },\n    dispatch\n  );\n};\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Expert));\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/resources/Resources.js",["285","286","287","288","289"],"import React, { useState, useEffect } from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { withRouter } from \"react-router-dom\";\nimport Pagination from \"react-js-pagination\";\nimport Tooltip from \"../../common/toolTip\";\nimport CommonModal from \"../../common/commonModal\";\nimport { Table } from \"reactstrap\";\nimport { connect } from \"react-redux\";\nimport { NotificationManager } from \"react-notifications\";\nimport { bindActionCreators } from \"redux\";\nimport Loader from \"../../loader\";\nimport { CCard, CCardBody, CCol, CRow, CButton } from \"@coreui/react\";\nimport Search from \"../../common/search\";\nimport EDIT from \"../../assets/icons/edit.svg\";\nimport DELETE from \"../../assets/icons/delete.svg\";\nimport PaginationCommon from \"../../common/pagination\";\nimport {\n  fetchResources,\n  deleteResource,\n  editResource,\n  setResourceData,\n} from \"../store/action\";\nconst offsetLimit = 10;\nconst Resources = (props) => {\n  const history = useHistory();\n\n  const [page, setPage] = useState(1);\n  const [search, setSearch] = useState(\"\");\n  const [offset, setOffset] = useState(\"\");\n  const [modalOpen, setModalOpen] = useState(false);\n  const [resourcesDetails, setResourcesDetails] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [idResource, setIdResource] = useState(\"\");\n  const [count, setCount] = useState(0);\n  const pageChange = (newPage) => {\n    setLoading(true);\n    props.fetchResources(\n      `resource/all?offset=${offset}&limit=${offsetLimit}&search=${search}`,\n      (value) => {\n        const { resources, count } = value.data;\n        setLoading(false);\n        setResourcesDetails(resources);\n        setCount(count);\n        setOffset(resources.length && resources[resources.length - 1]._id);\n        setPage(newPage);\n      }\n    );\n  };\n\n  const addResource = () => {\n    props.history.push(\"/addResource\");\n  };\n  const editResource = (e, item) => {\n    setIdResource(item._id);\n    e.preventDefault();\n    e.stopPropagation();\n\n    props.setResourceData(item);\n\n    props.history.push({\n      state: item,\n      pathname: `/editResource/${item._id}`,\n    });\n  };\n  const onDelete = (e, id) => {\n    setIdResource(id);\n    e.preventDefault();\n    e.stopPropagation();\n    setModalOpen(!modalOpen);\n  };\n  const deleteResource = (id) => {\n    if (idResource === id) setModalOpen(false);\n    setLoading(true);\n    props.deleteResource(`resource/delete?id=${id}`, (value) => {\n      if (value.status === 200) {\n        NotificationManager.success(\"Resource deleted successfully\", \"\", 1000);\n        setLoading(false);\n        callApiToFetchAllResources(true);\n      }\n    });\n  };\n  const handleSearch = (e) => {\n    setSearch(e.target.value);\n    setPage(1);\n    setOffset(\"\");\n  };\n  useEffect(() => {\n    callApiToFetchAllResources();\n  }, [search]);\n  const callApiToFetchAllResources = (isDelete) => {\n    if (isDelete) {\n      setLoading(true);\n\n      props.fetchResources(\n        `resource/all?offset=&limit=${offsetLimit}&search=${search}`,\n        (value) => {\n          const { resources, count } = value.data;\n          if (value.status === 200) {\n            setLoading(false);\n            setResourcesDetails(resources);\n            setCount(count);\n            setOffset(resources.length && resources[resources.length - 1]._id);\n          }\n        }\n      );\n    } else {\n      setLoading(true);\n\n      props.fetchResources(\n        `resource/all?offset=${offset}&limit=${offsetLimit}&search=${search}`,\n        (value) => {\n          const { resources, count } = value.data;\n          if (value.status === 200) {\n            setLoading(false);\n            setResourcesDetails(resources);\n            setCount(count);\n            setOffset(resources.length && resources[resources.length - 1]._id);\n          }\n        }\n      );\n    }\n  };\n\n  return (\n    <CRow>\n      <CCol xl={12}>\n        <form className=\"position-relative\">\n          {/* <div className=\"text-center search-input\">\n            <input\n              type=\"search\"\n              className=\"form-control\"\n              placeholder=\"Search\"\n              required\n              onChange={handleSearch}\n            />\n          </div> */}\n          <Search handleSearch={handleSearch} />\n          <div className=\"text-right resource-btn\">\n            <CButton block color=\"info\" onClick={addResource} id=\"addResource\">\n              Add Resource\n            </CButton>\n          </div>\n        </form>\n      </CCol>\n      <CCol xl={12}></CCol>\n\n      <CCol xl={12}>\n        <CCard>\n          {loading && <Loader />}\n          <CCardBody>\n            <Table responsive>\n              <thead>\n                <tr>\n                  <th className=\"text-nowrap \">Name</th>\n\n                  <th>Format</th>\n                  <th>Price</th>\n                  <th>Category</th>\n                  <th>Action</th>\n                </tr>\n              </thead>\n              <tbody>\n                {resourcesDetails &&\n                  resourcesDetails.length === 0 &&\n                  !loading && (\n                    <h3 className=\"text-center no-user-found\">\n                      No Resources Found!\n                    </h3>\n                  )}\n                {resourcesDetails &&\n                  resourcesDetails.length > 0 &&\n                  resourcesDetails.map((item, index) => {\n                    let category =\n                      item &&\n                      item.category &&\n                      item.category.length > 0 &&\n                      item.category.join(\", \");\n                    return (\n                      <tr\n                        style={{ cursor: \"pointer\" }}\n                        onClick={() =>\n                          history.push({\n                            pathname: `/resources/${item._id}`,\n                          })\n                        }\n                      >\n                        <td>{item.title}</td>\n                        <td>{item.resource_format}</td>\n\n                        <td>\n                          {item.price && item.price.value && item.price.unit\n                            ? `${item.price.value} ${item.price.unit}`\n                            : item.price.value || item.price}\n                        </td>\n                        <td>{category}</td>\n                        <td>\n                          <div className=\"d-flex align-items-center\">\n                            <button\n                              id={`edit-${index}`}\n                              className=\"icon\"\n                              onClick={(e) => editResource(e, item)}\n                            >\n                              <img src={EDIT} className=\"ml-3\" />\n                            </button>\n                            <Tooltip placement=\"top\" target={`edit-${index}`}>\n                              Edit\n                            </Tooltip>\n                            <button\n                              className=\"icon\"\n                              onClick={(e) => onDelete(e, item._id)}\n                              id={`delete-${index}`}\n                            >\n                              <img src={DELETE} className=\"ml-3\" />\n                            </button>\n                            <Tooltip placement=\"top\" target={`delete-${index}`}>\n                              Delete\n                            </Tooltip>\n                          </div>\n                        </td>\n                      </tr>\n                    );\n                  })}\n              </tbody>\n            </Table>\n            {/* \n            <div className=\"text-center pagination-input\">\n              {count > offsetLimit && !loading && (\n                <Pagination\n                  className=\"mt-3 mx-auto w-fit-content\"\n                  itemClass=\"page-item\"\n                  linkClass=\"page-link\"\n                  activeClass=\"active\"\n                  activePage={page}\n                  itemsCountPerPage={offsetLimit}\n                  totalItemsCount={count}\n                  pageRangeDisplayed={5}\n                  onChange={pageChange}\n                />\n              )}\n            </div> */}\n            <PaginationCommon\n              pageChange={pageChange}\n              count={count}\n              offsetLimit={offsetLimit}\n              page={page}\n              loading={loading}\n            />\n            <div>\n              {modalOpen && (\n                <CommonModal\n                  isOpen={modalOpen}\n                  toggle={(e) => onDelete(e)}\n                  block_delete={(e) => deleteResource(e, idResource)}\n                  id={idResource}\n                  type=\"deleteResource\"\n                />\n              )}\n            </div>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {};\n};\nconst mapDispatchToProps = (dispatch) => {\n  return bindActionCreators(\n    {\n      fetchResources,\n      deleteResource,\n      editResource,\n      setResourceData,\n    },\n    dispatch\n  );\n};\nexport default withRouter(\n  connect(mapStateToProps, mapDispatchToProps)(Resources)\n);\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/icons.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/Users.js",["290","291"],"import React, { useState, useEffect } from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport Search from \"../../common/search\";\nimport moment from \"moment\";\n\nimport CommonModal from \"../../common/commonModal\";\nimport { NotificationManager } from \"react-notifications\";\nimport { Table } from \"reactstrap\";\nimport { CBadge, CButton, CCard, CCardBody, CCol, CRow } from \"@coreui/react\";\nimport Loader from \"../../loader\";\nimport { connect } from \"react-redux\";\n\nimport { bindActionCreators } from \"redux\";\nimport { withRouter } from \"react-router-dom\";\n\nimport { fetchUsers, userStatus } from \"../store/action\";\nimport PaginationCommon from \"../../common/pagination\";\nconst offsetLimit = 10;\nconst Users = (props) => {\n  const history = useHistory();\n\n  const [page, setPage] = useState(1);\n  const [search, setSearch] = useState(\"\");\n  const [modalOpen, setModalOpen] = useState(false);\n  const [type, setType] = useState(\"\");\n  const [offset, setOffset] = useState(\"\");\n  const [idUser, setIdUser] = useState(\"\");\n  const [usersDetails, setUsersDetails] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [count, setCount] = useState(0);\n  const pageChange = (newPage) => {\n    setLoading(true);\n\n    props.fetchUsers(\n      `user/all?offset=${offset}&limit=${offsetLimit}&search=${search}`,\n      (value) => {\n        const { users, count } = value.data;\n        setLoading(false);\n        setUsersDetails(users);\n        setCount(count);\n        setOffset(users.length && users[users.length - 1]._id);\n        setPage(newPage);\n      }\n    );\n  };\n  const handleSearch = (e) => {\n    setSearch(e.target.value);\n    setPage(1);\n    setOffset(\"\");\n  };\n\n  useEffect(() => {\n    callApiToFetchAllUsers();\n  }, [search]);\n\n  const callApiToFetchAllUsers = (isBlock) => {\n    if (isBlock) {\n      setLoading(true);\n\n      props.fetchUsers(\n        `user/all?offset=&limit=${offsetLimit}&search=${search}`,\n        (value) => {\n          const { users, count } = value.data;\n          setLoading(false);\n          setUsersDetails(users);\n          setCount(count);\n          setOffset(users.length && users[users.length - 1]._id);\n        }\n      );\n    } else {\n      setLoading(true);\n\n      props.fetchUsers(\n        `user/all?offset=${offset}&limit=${offsetLimit}&search=${search}`,\n        (value) => {\n          const { users, count } = value.data;\n          setLoading(false);\n          setUsersDetails(users);\n          setCount(count);\n          setOffset(users.length && users[users.length - 1]._id);\n        }\n      );\n    }\n  };\n\n  const getBadge = (status) => {\n    switch (status) {\n      case \"Verified\":\n        return \"success\";\n\n      case \"Not Verified\":\n        return \"danger\";\n      default:\n        return \"primary\";\n    }\n  };\n\n  const onBlock = (e, type, item) => {\n    setIdUser(item._id);\n    setType(type);\n    e.preventDefault();\n    e.stopPropagation();\n    setModalOpen(!modalOpen);\n  };\n  const blockUser = (id) => {\n    if (idUser === id) {\n      setModalOpen(false);\n\n      callApi(type, id);\n    }\n  };\n\n  const callApi = (type, id) => {\n    let obj = {\n      type: type,\n      id: id,\n      user_type: \"user\",\n    };\n\n    props.userStatus(\"common/change-status\", obj, (value) => {\n      if (value.status === 200) {\n        NotificationManager.success(value.message, \"\", 1000);\n        callApiToFetchAllUsers(true);\n      }\n    });\n  };\n\n  return (\n    <CRow>\n      <CCol xl={12}>\n        <Search handleSearch={handleSearch} />\n      </CCol>\n\n      <CCol xl={12}>\n        <CCard className=\"position-relative\">\n          {loading && <Loader />}\n\n          <CCardBody>\n            <Table\n              responsive\n              className={`table ${\n                usersDetails.length === 0 ? \"tableHeight\" : \"\"\n              }`}\n            >\n              <thead>\n                <tr>\n                  <th className=\"text-nowrap \">Name</th>\n\n                  <th>Email</th>\n                  <th>Status</th>\n\n                  <th>Country</th>\n                  <th>Created At</th>\n                  <th>Action</th>\n                </tr>\n              </thead>\n              <tbody>\n                {usersDetails && usersDetails.length === 0 && !loading && (\n                  <h3 className=\"text-center no-user-found\">No Users Found!</h3>\n                )}\n                {usersDetails &&\n                  usersDetails.length > 0 &&\n                  usersDetails.map((item, index) => {\n                    let istDate = new Date(item.createdAt);\n\n                    let createdAt = moment(istDate).format(\n                      \"DD-MM-YYYY, hh:mm a\"\n                    );\n\n                    return (\n                      <tr\n                        style={{ cursor: \"pointer\" }}\n                        onClick={() =>\n                          history.push({\n                            pathname: `/users/${item._id}`,\n                            state: usersDetails,\n                          })\n                        }\n                      >\n                        <td>\n                          {\" \"}\n                          {item.first_name && item.last_name\n                            ? item.first_name + \" \" + item.last_name\n                            : \"-\"}\n                        </td>\n                        <td>{item.email ? item.email : \"-\"}</td>\n                        <td>\n                          <CBadge\n                            color={getBadge(\n                              !item.is_verified ? \"Not Verified\" : \"Verified\"\n                            )}\n                          >\n                            {!item.is_verified ? \"Not Verified\" : \"Verified\"}\n                          </CBadge>\n                        </td>\n                        <td>{item.country ? item.country : \"-\"}</td>\n                        <td>\n                          {createdAt !== \"Invalid date\" ? createdAt : \"-\"}\n                        </td>\n                        <td>\n                          {item.user_status === \"blocked\" ? (\n                            <CButton\n                              onClick={(e) => onBlock(e, \"unblock\", item)}\n                              className=\"Unblock-btn block-btn\"\n                            >\n                              UnBlock\n                            </CButton>\n                          ) : item.user_status === \"activated\" ? (\n                            <div>\n                              <CButton\n                                onClick={(e) => onBlock(e, \"block\", item)}\n                                className=\"block-btn block-btn\"\n                              >\n                                Block\n                              </CButton>{\" \"}\n                            </div>\n                          ) : item.user_status === \"deactivated\" ? (\n                            <div>\n                              <CButton\n                                onClick={(e) => onBlock(e, \"block\", item)}\n                                className=\"block-btn block-btn\"\n                              >\n                                Block\n                              </CButton>\n                            </div>\n                          ) : (\n                            <CButton\n                              onClick={(e) => onBlock(e, \"block\", item)}\n                              className=\"block-btn block-btn\"\n                            >\n                              Block\n                            </CButton>\n                          )}\n                        </td>\n                      </tr>\n                    );\n                  })}\n              </tbody>\n            </Table>\n\n            <PaginationCommon\n              pageChange={pageChange}\n              count={count}\n              offsetLimit={offsetLimit}\n              page={page}\n              loading={loading}\n            />\n            <div>\n              {modalOpen && (\n                <CommonModal\n                  isOpen={modalOpen}\n                  toggle={(e) => onBlock(e, type, idUser)}\n                  block_delete={(e) => blockUser(e, idUser)}\n                  id={idUser}\n                  type={type}\n                />\n              )}\n            </div>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {};\n};\nconst mapDispatchToProps = (dispatch) => {\n  return bindActionCreators(\n    {\n      fetchUsers,\n      userStatus,\n    },\n    dispatch\n  );\n};\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Users));\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/User.js",["292","293","294","295","296"],"import React, { useState, useEffect, Fragment } from \"react\";\nimport moment from \"moment\";\nimport UserPlanner from \"../users/UserPlanner\";\nimport UserExpertUsage from \"../users/UserExpertUsage\";\nimport UserResourceUsage from \"../users/UserResourceUsage\";\nimport { Link } from \"react-router-dom\";\nimport cx from \"classnames\";\nimport {\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CBadge,\n  CTabs,\n  CNavItem,\n  CNavLink,\n  CNav,\n  CTabContent,\n  CTabPane,\n} from \"@coreui/react\";\nimport Loader from \"../../loader\";\n\nimport { connect } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { withRouter } from \"react-router-dom\";\n\nimport { fetchOneUser } from \"../store/action\";\nconst User = (props) => {\n  const [user, setUser] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [appointments, setAppointments] = useState({});\n  const dispatch = useDispatch();\n  useEffect(() => {\n    setLoading(true);\n\n    const user_id = props && props.match.params.id;\n    dispatch(\n      fetchOneUser(`user?id=${user_id}`, (value) => {\n        setUser(value.data.user);\n        setAppointments(value.data.appointments);\n        setLoading(false);\n      })\n    );\n  }, []);\n\n  const getBadge = (status) => {\n    switch (status) {\n      case \"Verified\":\n        return \"success\";\n\n      case \"Not Verified\":\n        return \"danger\";\n      case \"Activated\":\n        return \"success\";\n\n      case \"Blocked\":\n        return \"danger\";\n      default:\n        return \"primary\";\n    }\n  };\n\n  let reasonForCareerChange =\n    user &&\n    user.reason_for_career_change &&\n    user.reason_for_career_change.join(\", \");\n\n  let istDate = new Date(user.createdAt);\n\n  let createdAt = moment(istDate).format(\"DD-MM-YYYY, hh:mm a\");\n\n  const onClickExpert = () => {\n    const user_id = props && props.match.params.id;\n    props.history.push(`/users/${user_id}/expert-features`);\n  };\n  const onClickResource = () => {\n    const user_id = props && props.match.params.id;\n    props.history.push(`/users/${user_id}/resource-features`);\n  };\n\n  const onClickPlanner = () => {\n    const user_id = props && props.match.params.id;\n    props.history.push(`/users/${user_id}/planner-activity`);\n  };\n  return (\n    <CRow>\n      <CCol lg={12}>\n        <CCard className=\"position-relative\">\n          {loading && <Loader />}\n          {/* <CCardHeader>Account Details</CCardHeader> */}\n          <CCardBody>\n            <CTabs>\n              <CNav variant=\"tabs\">\n                <CNavItem>\n                  <CNavLink>Account Details</CNavLink>\n                </CNavItem>\n                <CNavItem>\n                  <CNavLink onClick={onClickExpert}>\n                    Usage of expert features\n                  </CNavLink>\n                </CNavItem>\n                <CNavItem>\n                  <CNavLink onClick={onClickResource}>\n                    Usage of resource features\n                  </CNavLink>\n                </CNavItem>\n                <CNavItem>\n                  <CNavLink onClick={onClickPlanner}>Planner Activity</CNavLink>\n                </CNavItem>\n              </CNav>\n              <CTabContent>\n                <CTabPane>\n                  {user && (\n                    <table className=\"table\">\n                      <tbody>\n                        {createdAt !== \"Invalid date\" && (\n                          <tr>\n                            <td>Created At</td>\n                            <td>\n                              <strong> {createdAt}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {!loading && (\n                          <tr>\n                            <td>Status</td>\n\n                            <td>\n                              <CBadge\n                                color={getBadge(\n                                  user.user_status === \"blocked\"\n                                    ? \"Blocked\"\n                                    : \"Activated\"\n                                )}\n                              >\n                                {user.user_status === \"blocked\"\n                                  ? \"Blocked\"\n                                  : \"Activated\"}\n                              </CBadge>\n                            </td>\n                          </tr>\n                        )}\n                        {!loading && (\n                          <tr>\n                            <td>UID</td>\n                            <td>\n                              <strong>{user._id}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {!loading && (\n                          <tr>\n                            <td>Email Verification</td>\n\n                            <td>\n                              <CBadge\n                                color={getBadge(\n                                  !user.is_verified\n                                    ? \"Not Verified\"\n                                    : \"Verified\"\n                                )}\n                              >\n                                {!user.is_verified\n                                  ? \"Not Verified\"\n                                  : \"Verified\"}\n                              </CBadge>\n                            </td>\n                          </tr>\n                        )}\n                        {user.first_name && (\n                          <tr>\n                            <td>First name</td>\n                            <td>\n                              <strong>{user.first_name}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {user.last_name && (\n                          <tr>\n                            <td>Last name</td>\n                            <td>\n                              <strong>{user.last_name}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {user.contact_no && (\n                          <tr>\n                            <td>Contact</td>\n                            <td>\n                              <strong>\n                                {user.contact_no.value || user.contact_no}\n                              </strong>\n                            </td>\n                          </tr>\n                        )}\n                        {user.email && (\n                          <tr>\n                            <td>Email</td>\n                            <td>\n                              <strong>{user.email}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {user.gender && (\n                          <tr>\n                            <td>Gender</td>\n                            <td>\n                              <strong>{user.gender}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {user.role && (\n                          <tr>\n                            <td>Role</td>\n                            <td>\n                              <strong>{user.role}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {user.country && (\n                          <tr>\n                            <td>Country</td>\n                            <td>\n                              <strong>{user.country}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {user.industry && (\n                          <tr>\n                            <td>Industry</td>\n                            <td>\n                              <strong>{user.industry}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {user.full_time_work_experience && (\n                          <tr>\n                            <td>Work Experience</td>\n                            <td>\n                              <strong>{user.full_time_work_experience}</strong>\n                            </td>\n                          </tr>\n                        )}\n\n                        {reasonForCareerChange && (\n                          <tr>\n                            <td>Career Change Reason</td>\n                            <td>\n                              <strong>{reasonForCareerChange}</strong>\n                            </td>\n                          </tr>\n                        )}\n                      </tbody>\n                    </table>\n                  )}\n                </CTabPane>\n                <CTabPane>\n                  <UserExpertUsage\n                    appointments={appointments}\n                    user_id={user._id}\n                  />\n                </CTabPane>\n                <CTabPane>\n                  <UserResourceUsage />\n                </CTabPane>\n                <CTabPane>\n                  <UserPlanner />\n                </CTabPane>\n              </CTabContent>\n            </CTabs>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {};\n};\nconst mapDispatchToProps = (dispatch) => {\n  return bindActionCreators(\n    {\n      fetchOneUser,\n    },\n    dispatch\n  );\n};\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(User));\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/planner/Planner.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/UserPlanner.js",["297"],"import React from \"react\";\nimport Loader from \"../../loader\";\nimport {\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CTabs,\n  CNavItem,\n  CNavLink,\n  CNav,\n  CTabContent,\n  CTabPane,\n} from \"@coreui/react\";\n\nimport Network from \"./planner/Network\";\nimport Explore from \"./planner/Explore\";\nimport Learn from \"./planner/Learn\";\nimport Prepare from \"./planner/Prepare\";\nimport Apply from \"./planner/Apply\";\nconst UserPlanner = () => {\n  return (\n    <CRow>\n      <CCol lg={12}>\n        <CCard className=\"position-relative\">\n          <CCardHeader>\n            Click on a module below to see the information\n          </CCardHeader>\n          <CCardBody>\n            <CTabs>\n              <CNav variant=\"tabs\">\n                <CNavItem>\n                  <CNavLink>Explore</CNavLink>\n                </CNavItem>\n                <CNavItem>\n                  <CNavLink>Network</CNavLink>\n                </CNavItem>\n                <CNavItem>\n                  <CNavLink>Learn</CNavLink>\n                </CNavItem>\n                <CNavItem>\n                  <CNavLink>Prepare</CNavLink>\n                </CNavItem>\n                <CNavItem>\n                  <CNavLink>Apply</CNavLink>\n                </CNavItem>\n              </CNav>\n              <CTabContent>\n                <CTabPane>\n                  <Explore />\n                </CTabPane>\n                <CTabPane>\n                  <Network />\n                </CTabPane>\n                <CTabPane>\n                  <Learn />\n                </CTabPane>\n                <CTabPane>\n                  <Prepare />\n                </CTabPane>\n                <CTabPane>\n                  <Apply />\n                </CTabPane>\n              </CTabContent>\n            </CTabs>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  );\n};\nexport default UserPlanner;\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/common/toolTip.js",["298"],"import React, { useState } from \"react\";\nimport { Tooltip } from \"reactstrap\";\n\nexport default ({ placement = \"left\", target, children }) => {\n  const [tooltipOpen, setTooltipOpen] = useState(false);\n\n  const toggle = () => setTooltipOpen(!tooltipOpen);\n\n  return (\n    <Tooltip\n      placement={placement}\n      isOpen={tooltipOpen}\n      target={target}\n      toggle={toggle}\n    >\n      {children}\n    </Tooltip>\n  );\n};\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/common/commonModal.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/planner/Network.js",["299","300","301","302","303","304","305","306","307"],"import React, { useState } from \"react\";\nimport Loader from \"../../../loader\";\nimport Search from \"../../../common/search\";\nimport PaginationCommon from \"../../../common/pagination\";\nimport {\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CBadge,\n  CTabs,\n  CNavItem,\n  CNavLink,\n  CNav,\n  CTabContent,\n  CTabPane,\n  CButton,\n  CCollapse,\n} from \"@coreui/react\";\nimport { Table } from \"reactstrap\";\nconst Network = (props) => {\n  const [accordion, setAccordion] = useState(1);\n  const getBadge = (status) => {\n    switch (status) {\n      case \"Done\":\n        return \"success\";\n\n      // case \"Not Verified\":\n      //   return \"danger\";\n      // case \"Activated\":\n      //   return \"success\";\n\n      // case \"Blocked\":\n      //   return \"danger\";\n      default:\n        return \"primary\";\n    }\n  };\n  const handleSearch = (e) => {\n    // setSearch(e.target.value);\n    // setOffset(\"\");\n    // setPage(1);\n  };\n  const pageChange = (newPage) => {};\n  return (\n    <div id=\"accordion\">\n      <CCard className=\"mb-0\">\n        <CCardHeader id=\"headingOne\">\n          <CButton\n            block\n            color=\"link\"\n            className=\"text-left m-0 p-0\"\n            onClick={() => setAccordion(accordion === 0 ? null : 0)}\n          >\n            <h5 className=\"m-0 p-0\">Existing Connections</h5>\n          </CButton>\n        </CCardHeader>\n        <CCollapse show={accordion === 0}>\n          <CCardBody>\n            <CCardHeader>\n              <table className=\"table\">\n                <tbody>\n                  <tr>\n                    <td>Status</td>\n                    <td>\n                      {\" \"}\n                      <CBadge color={getBadge(\"Done\")}>Done</CBadge>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n\n              <Search handleSearch={handleSearch} />\n            </CCardHeader>\n            <Table responsive>\n              <thead>\n                <th className=\"text-nowrap \">Career Options</th>\n\n                <th>Family / Relatives</th>\n                <th>Friends</th>\n\n                <th>Professional Network</th>\n                <th>Other</th>\n              </thead>\n            </Table>\n            <PaginationCommon pageChange={pageChange} />\n          </CCardBody>\n        </CCollapse>\n      </CCard>\n      <CCard className=\"mb-0\">\n        <CCardHeader id=\"headingTwo\">\n          <CButton\n            block\n            color=\"link\"\n            className=\"text-left m-0 p-0\"\n            onClick={() => setAccordion(accordion === 1 ? null : 1)}\n          >\n            <h5 className=\"m-0 p-0\">New Connections</h5>\n          </CButton>\n        </CCardHeader>\n        <CCollapse show={accordion === 1}>\n          <CCardBody>\n            <CCardHeader>\n              <table className=\"table\">\n                <tbody>\n                  <tr>\n                    <td>Status</td>\n                    <td>\n                      {\" \"}\n                      <CBadge color={getBadge(\"Done\")}>Done</CBadge>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n\n              <Search handleSearch={handleSearch} />\n            </CCardHeader>\n            <Table responsive>\n              {/* <thead>\n                <th className=\"text-nowrap \">My Interests,Skills and Values</th>\n\n                <th>World Needs</th>\n                <th>World Pays For</th>\n              </thead> */}\n            </Table>\n            <PaginationCommon pageChange={pageChange} />\n          </CCardBody>\n        </CCollapse>\n      </CCard>\n      <CCard className=\"mb-0\">\n        <CCardHeader id=\"headingThree\">\n          <CButton\n            block\n            color=\"link\"\n            className=\"text-left m-0 p-0\"\n            onClick={() => setAccordion(accordion === 2 ? null : 2)}\n          >\n            <h5 className=\"m-0 p-0\">Cold Messages</h5>\n          </CButton>\n        </CCardHeader>\n        <CCollapse show={accordion === 2}>\n          <CCardBody>\n            <CCardHeader>\n              <table className=\"table\">\n                <tbody>\n                  <tr>\n                    <td>Status</td>\n                    <td>\n                      {\" \"}\n                      <CBadge color={getBadge(\"Done\")}>Done</CBadge>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n\n              <Search handleSearch={handleSearch} />\n            </CCardHeader>\n            <Table responsive>\n              <thead>\n                <th className=\"text-nowrap \">Title</th>\n\n                <th>Cold Message</th>\n              </thead>\n            </Table>\n            <PaginationCommon pageChange={pageChange} />\n          </CCardBody>\n        </CCollapse>\n      </CCard>\n\n      <CCard className=\"mb-0\">\n        <CCardHeader id=\"headingThree\">\n          <CButton\n            block\n            color=\"link\"\n            className=\"text-left m-0 p-0\"\n            onClick={() => setAccordion(accordion === 3 ? null : 3)}\n          >\n            <h5 className=\"m-0 p-0\">Key Takeaways</h5>\n          </CButton>\n        </CCardHeader>\n        <CCollapse show={accordion === 3}>\n          <CCardBody>\n            <CCardHeader>\n              <table className=\"table\">\n                <tbody>\n                  <tr>\n                    <td>Status</td>\n                    <td>\n                      {\" \"}\n                      <CBadge color={getBadge(\"Done\")}>Done</CBadge>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n\n              <Search handleSearch={handleSearch} />\n            </CCardHeader>\n            <Table responsive>\n              <thead>\n                <th className=\"text-nowrap \">Name</th>\n\n                <th>Organization</th>\n                <th>Current Role</th>\n                <th>Relationship</th>\n                <th>Role & Industry Insights</th>\n                <th>Company Insights</th>\n                <th>Relevant Connections</th>\n                <th>Relevant Groups</th>\n                <th>Learning & Development</th>\n                <th>Job Search</th>\n                <th>Job Referral</th>\n                <th>Other</th>\n              </thead>\n            </Table>\n            <PaginationCommon pageChange={pageChange} />\n          </CCardBody>\n        </CCollapse>\n      </CCard>\n    </div>\n  );\n};\nexport default Network;\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/planner/Explore.js",["308","309","310","311","312","313","314","315","316"],"import React, { useState } from \"react\";\nimport Loader from \"../../../loader\";\nimport Search from \"../../../common/search\";\nimport PaginationCommon from \"../../../common/pagination\";\nimport {\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CBadge,\n  CTabs,\n  CNavItem,\n  CNavLink,\n  CNav,\n  CTabContent,\n  CTabPane,\n  CButton,\n  CCollapse,\n} from \"@coreui/react\";\nimport { Table } from \"reactstrap\";\nconst Explore = (props) => {\n  const [accordion, setAccordion] = useState(1);\n  const getBadge = (status) => {\n    switch (status) {\n      case \"Done\":\n        return \"success\";\n\n      // case \"Not Verified\":\n      //   return \"danger\";\n      // case \"Activated\":\n      //   return \"success\";\n\n      // case \"Blocked\":\n      //   return \"danger\";\n      default:\n        return \"primary\";\n    }\n  };\n\n  const handleSearch = (e) => {\n    // setSearch(e.target.value);\n    // setOffset(\"\");\n    // setPage(1);\n  };\n\n  return (\n    <div id=\"accordion\">\n      <CCard className=\"mb-0\">\n        <CCardHeader id=\"headingOne\">\n          <CButton\n            block\n            color=\"link\"\n            className=\"text-left m-0 p-0 d-flex justify-content-between\"\n            onClick={() => setAccordion(accordion === 0 ? null : 0)}\n          >\n            <h5 className=\"m-0 p-0\">Introspection</h5>\n            {/* <span className=\"done-txt\">Done</span> */}\n          </CButton>\n        </CCardHeader>\n        <CCollapse show={accordion === 0}>\n          <CCardBody>\n            <CCardHeader>\n              <table className=\"table\">\n                <tbody>\n                  <tr>\n                    <td>Status</td>\n                    <td>\n                      {\" \"}\n                      <CBadge color={getBadge(\"Done\")}>Done</CBadge>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n              {/* <form>\n                <div className=\"text-center search-input\">\n                  <input\n                    type=\"search\"\n                    className=\"form-control\"\n                    placeholder=\"Search\"\n                    required\n                  />\n                </div>\n              </form> */}\n              <Search handleSearch={handleSearch} />\n            </CCardHeader>\n            <Table responsive>\n              <thead>\n                <th className=\"text-nowrap \">Priority Level</th>\n\n                <th>My Interests</th>\n                <th>My Skills</th>\n\n                <th>My Values</th>\n              </thead>\n            </Table>\n\n            <PaginationCommon />\n          </CCardBody>\n        </CCollapse>\n      </CCard>\n      <CCard className=\"mb-0\">\n        <CCardHeader id=\"headingTwo\">\n          <CButton\n            block\n            color=\"link\"\n            className=\"text-left m-0 p-0\"\n            onClick={() => setAccordion(accordion === 1 ? null : 1)}\n          >\n            <h5 className=\"m-0 p-0\">Extrospection</h5>\n          </CButton>\n        </CCardHeader>\n        <CCollapse show={accordion === 1}>\n          <CCardBody>\n            <CCardHeader>\n              <table className=\"table\">\n                <tbody>\n                  <tr>\n                    <td>Status</td>\n                    <td>\n                      {\" \"}\n                      <CBadge color={getBadge(\"Done\")}>Done</CBadge>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n              {/* <form>\n                <div className=\"text-center search-input\">\n                  <input\n                    type=\"search\"\n                    className=\"form-control\"\n                    placeholder=\"Search\"\n                    required\n                  />\n                </div>\n              </form> */}\n              <Search handleSearch={handleSearch} />\n            </CCardHeader>\n            <Table responsive>\n              <thead>\n                <th className=\"text-nowrap \">My Interests,Skills and Values</th>\n\n                <th>World Needs</th>\n                <th>World Pays For</th>\n              </thead>\n            </Table>\n            <PaginationCommon />\n          </CCardBody>\n        </CCollapse>\n      </CCard>\n      <CCard className=\"mb-0\">\n        <CCardHeader id=\"headingThree\">\n          <CButton\n            block\n            color=\"link\"\n            className=\"text-left m-0 p-0\"\n            onClick={() => setAccordion(accordion === 2 ? null : 2)}\n          >\n            <h5 className=\"m-0 p-0\">Personality Assessment</h5>\n          </CButton>\n        </CCardHeader>\n        <CCollapse show={accordion === 2}>\n          <CCardHeader>\n            <table className=\"table\">\n              <tbody>\n                <tr>\n                  <td>Status</td>\n                  <td>\n                    {\" \"}\n                    <CBadge color={getBadge(\"Done\")}>Done</CBadge>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n            {/* <form>\n              <div className=\"text-center search-input\">\n                <input\n                  type=\"search\"\n                  className=\"form-control\"\n                  placeholder=\"Search\"\n                  required\n                />\n              </div>\n            </form> */}\n            <Search handleSearch={handleSearch} />\n          </CCardHeader>\n          <CCardBody>\n            <Table responsive>\n              <thead>\n                <th className=\"text-nowrap \">Career Option</th>\n              </thead>\n            </Table>\n            <PaginationCommon />\n          </CCardBody>\n        </CCollapse>\n      </CCard>\n\n      <CCard className=\"mb-0\">\n        <CCardHeader id=\"headingThree\">\n          <CButton\n            block\n            color=\"link\"\n            className=\"text-left m-0 p-0\"\n            onClick={() => setAccordion(accordion === 3 ? null : 3)}\n          >\n            <h5 className=\"m-0 p-0\">Practical Understanding</h5>\n          </CButton>\n        </CCardHeader>\n        <CCollapse show={accordion === 3}>\n          <CCardBody>\n            <CCardHeader>\n              <table className=\"table\">\n                <tbody>\n                  <tr>\n                    <td>Status</td>\n                    <td>\n                      {\" \"}\n                      <CBadge color={getBadge(\"Done\")}>Done</CBadge>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n              {/* <form>\n                <div className=\"text-center search-input\">\n                  <input\n                    type=\"search\"\n                    className=\"form-control\"\n                    placeholder=\"Search\"\n                    required\n                  />\n                </div>\n              </form> */}\n              <Search handleSearch={handleSearch} />\n            </CCardHeader>\n            <Table responsive>\n              <thead>\n                <th className=\"text-nowrap \">Career Option</th>\n\n                <th>Practical Understanding Via</th>\n                <th>Contact Person</th>\n                <th>Contact Email</th>\n                <th>Notes On</th>\n              </thead>\n            </Table>\n            <PaginationCommon />\n          </CCardBody>\n        </CCollapse>\n      </CCard>\n\n      <CCard className=\"mb-0\">\n        <CCardHeader id=\"headingThree\">\n          <CButton\n            block\n            color=\"link\"\n            className=\"text-left m-0 p-0\"\n            onClick={() => setAccordion(accordion === 4 ? null : 4)}\n          >\n            <h5 className=\"m-0 p-0\">Career Options</h5>\n          </CButton>\n        </CCardHeader>\n        <CCollapse show={accordion === 4}>\n          <CCardBody>\n            <CCardHeader>\n              <table className=\"table\">\n                <tbody>\n                  <tr>\n                    <td>Status</td>\n                    <td>\n                      {\" \"}\n                      <CBadge color={getBadge(\"Done\")}>Done</CBadge>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n              {/* <form>\n                <div className=\"text-center search-input\">\n                  <input\n                    type=\"search\"\n                    className=\"form-control\"\n                    placeholder=\"Search\"\n                    required\n                  />\n                </div>\n              </form> */}\n              <Search handleSearch={handleSearch} />\n            </CCardHeader>\n            <Table responsive>\n              <thead>\n                <th className=\"text-nowrap \">Career Option</th>\n\n                <th>Pros</th>\n                <th>Cons</th>\n                <th>Net Score</th>\n                <th>Decision</th>\n              </thead>\n            </Table>\n            <PaginationCommon />\n          </CCardBody>\n        </CCollapse>\n      </CCard>\n    </div>\n  );\n};\nexport default Explore;\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/planner/Prepare.js",["317","318","319","320","321","322","323","324","325"],"import React, { useState } from \"react\";\nimport Loader from \"../../../loader\";\nimport Search from \"../../../common/search\";\nimport PaginationCommon from \"../../../common/pagination\";\nimport {\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CBadge,\n  CTabs,\n  CNavItem,\n  CNavLink,\n  CNav,\n  CTabContent,\n  CTabPane,\n  CButton,\n  CCollapse,\n} from \"@coreui/react\";\nimport { Table } from \"reactstrap\";\nconst Prepare = (props) => {\n  const [accordion, setAccordion] = useState(1);\n  const getBadge = (status) => {\n    switch (status) {\n      case \"Done\":\n        return \"success\";\n\n      // case \"Not Verified\":\n      //   return \"danger\";\n      // case \"Activated\":\n      //   return \"success\";\n\n      // case \"Blocked\":\n      //   return \"danger\";\n      default:\n        return \"primary\";\n    }\n  };\n  const handleSearch = (e) => {\n    // setSearch(e.target.value);\n    // setOffset(\"\");\n    // setPage(1);\n  };\n  return (\n    <div id=\"accordion\">\n      <CCard className=\"mb-0\">\n        <CCardHeader id=\"headingOne\">\n          <CButton\n            block\n            color=\"link\"\n            className=\"text-left m-0 p-0\"\n            onClick={() => setAccordion(accordion === 0 ? null : 0)}\n          >\n            <h5 className=\"m-0 p-0\">Job Application Prep</h5>\n          </CButton>\n        </CCardHeader>\n        <CCollapse show={accordion === 0}>\n          <CCardBody>\n            <CCardHeader>\n              <table className=\"table\">\n                <tbody>\n                  <tr>\n                    <td>Status</td>\n                    <td>\n                      {\" \"}\n                      <CBadge color={getBadge(\"Done\")}>Done</CBadge>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n              {/* <form>\n                <div className=\"text-center search-input\">\n                  <input\n                    type=\"search\"\n                    className=\"form-control\"\n                    placeholder=\"Search\"\n                    required\n                  />\n                </div>\n              </form> */}\n              <Search handleSearch={handleSearch} />\n            </CCardHeader>\n            <table className=\"table\">\n              <tbody>\n                <tr>\n                  <td>Resume</td>\n                </tr>\n                <tr>\n                  <td>Cover Letter Template</td>\n                </tr>\n                <tr>\n                  <td>Portfolio / Work Sample</td>\n                </tr>\n                <tr>\n                  <td>Video Profile</td>\n                </tr>\n                <tr>\n                  <td>LinkedIn Profile</td>\n                </tr>\n              </tbody>\n            </table>\n            <PaginationCommon />\n          </CCardBody>\n        </CCollapse>\n      </CCard>\n      <CCard className=\"mb-0\">\n        <CCardHeader id=\"headingTwo\">\n          <CButton\n            block\n            color=\"link\"\n            className=\"text-left m-0 p-0\"\n            onClick={() => setAccordion(accordion === 1 ? null : 1)}\n          >\n            <h5 className=\"m-0 p-0\">Interview Prep</h5>\n          </CButton>\n        </CCardHeader>\n        <CCollapse show={accordion === 1}>\n          <CCardBody>\n            <CCardHeader>\n              <table className=\"table\">\n                <tbody>\n                  <tr>\n                    <td>Status</td>\n                    <td>\n                      {\" \"}\n                      <CBadge color={getBadge(\"Done\")}>Done</CBadge>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n              {/* <form>\n                <div className=\"text-center search-input\">\n                  <input\n                    type=\"search\"\n                    className=\"form-control\"\n                    placeholder=\"Search\"\n                    required\n                  />\n                </div>\n              </form> */}\n              <Search handleSearch={handleSearch} />\n            </CCardHeader>\n            <Table responsive>\n              <thead>\n                <th className=\"text-nowrap \">Topic</th>\n\n                <th>Description</th>\n                <th>Sample Question</th>\n                <th>Talking Points</th>\n              </thead>\n            </Table>\n\n            <PaginationCommon />\n          </CCardBody>\n        </CCollapse>\n      </CCard>\n    </div>\n  );\n};\nexport default Prepare;\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/planner/Apply.js",["326","327","328","329","330","331","332","333","334"],"import React, { useState } from \"react\";\nimport Loader from \"../../../loader\";\nimport Search from \"../../../common/search\";\nimport PaginationCommon from \"../../../common/pagination\";\nimport {\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CBadge,\n  CTabs,\n  CNavItem,\n  CNavLink,\n  CNav,\n  CTabContent,\n  CTabPane,\n  CButton,\n  CCollapse,\n} from \"@coreui/react\";\nimport { Table } from \"reactstrap\";\nconst Apply = (props) => {\n  const [accordion, setAccordion] = useState(1);\n  const getBadge = (status) => {\n    switch (status) {\n      case \"Done\":\n        return \"success\";\n\n      // case \"Not Verified\":\n      //   return \"danger\";\n      // case \"Activated\":\n      //   return \"success\";\n\n      // case \"Blocked\":\n      //   return \"danger\";\n      default:\n        return \"primary\";\n    }\n  };\n  return (\n    <div id=\"accordion\">\n      <CCard className=\"mb-0\">\n        <CCardHeader id=\"headingOne\">\n          <CButton\n            block\n            color=\"link\"\n            className=\"text-left m-0 p-0\"\n            onClick={() => setAccordion(accordion === 0 ? null : 0)}\n          >\n            <h5 className=\"m-0 p-0\">Job Application Tracker</h5>\n          </CButton>\n        </CCardHeader>\n        <CCollapse show={accordion === 0}>\n          <CCardBody>\n            <CCardHeader>\n              <table className=\"table\">\n                <tbody>\n                  <tr>\n                    <td>Status</td>\n                    <td>\n                      {\" \"}\n                      <CBadge color={getBadge(\"Done\")}>Done</CBadge>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n              {/* <form>\n                <div className=\"text-center search-input\">\n                  <input\n                    type=\"search\"\n                    className=\"form-control\"\n                    placeholder=\"Search\"\n                    required\n                  />\n                </div>\n              </form> */}\n              <Search />\n            </CCardHeader>\n            <Table responsive>\n              <thead>\n                <th className=\"text-nowrap \">Company</th>\n\n                <th>Position</th>\n                <th>Location</th>\n\n                <th>Application Deadline</th>\n                <th>Date Applied</th>\n                <th>Job Post URL</th>\n              </thead>\n            </Table>\n            <PaginationCommon />\n          </CCardBody>\n        </CCollapse>\n      </CCard>\n    </div>\n  );\n};\nexport default Apply;\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/planner/Learn.js",["335","336","337","338","339","340","341","342","343"],"import React, { useState } from \"react\";\nimport Loader from \"../../../loader\";\nimport Search from \"../../../common/search\";\nimport PaginationCommon from \"../../../common/pagination\";\nimport {\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CBadge,\n  CTabs,\n  CNavItem,\n  CNavLink,\n  CNav,\n  CTabContent,\n  CTabPane,\n  CButton,\n  CCollapse,\n} from \"@coreui/react\";\nimport { Table } from \"reactstrap\";\nconst Learn = (props) => {\n  const [accordion, setAccordion] = useState(1);\n  const getBadge = (status) => {\n    switch (status) {\n      case \"Done\":\n        return \"success\";\n\n      // case \"Not Verified\":\n      //   return \"danger\";\n      // case \"Activated\":\n      //   return \"success\";\n\n      // case \"Blocked\":\n      //   return \"danger\";\n      default:\n        return \"primary\";\n    }\n  };\n  const handleSearch = (e) => {\n    // setSearch(e.target.value);\n    // setOffset(\"\");\n    // setPage(1);\n  };\n  const pageChange = (newPage) => {};\n  return (\n    <div id=\"accordion\">\n      <CCard className=\"mb-0\">\n        <CCardHeader id=\"headingOne\">\n          <CButton\n            block\n            color=\"link\"\n            className=\"text-left m-0 p-0\"\n            onClick={() => setAccordion(accordion === 0 ? null : 0)}\n          >\n            <h5 className=\"m-0 p-0\">Skills</h5>\n          </CButton>\n        </CCardHeader>\n        <CCollapse show={accordion === 0}>\n          <CCardBody>\n            <CCardHeader>\n              <table className=\"table\">\n                <tbody>\n                  <tr>\n                    <td>Status</td>\n                    <td>\n                      {\" \"}\n                      <CBadge color={getBadge(\"Done\")}>Done</CBadge>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n              {/* <form>\n                <div className=\"text-center search-input\">\n                  <input\n                    type=\"search\"\n                    className=\"form-control\"\n                    placeholder=\"Search\"\n                    required\n                  />\n                </div>\n              </form> */}\n              <Search handleSearch={handleSearch} />\n            </CCardHeader>\n            <Table responsive>\n              <thead>\n                <th className=\"text-nowrap \">My Hard Skills</th>\n\n                <th>My Soft Skills</th>\n                <th>Required Hard Skills</th>\n\n                <th>Required Soft Skills</th>\n              </thead>\n            </Table>\n            <PaginationCommon pageChange={pageChange} />\n          </CCardBody>\n        </CCollapse>\n      </CCard>\n      <CCard className=\"mb-0\">\n        <CCardHeader id=\"headingTwo\">\n          <CButton\n            block\n            color=\"link\"\n            className=\"text-left m-0 p-0\"\n            onClick={() => setAccordion(accordion === 1 ? null : 1)}\n          >\n            <h5 className=\"m-0 p-0\">Learning Platforms</h5>\n          </CButton>\n        </CCardHeader>\n        <CCollapse show={accordion === 1}>\n          <CCardBody>\n            <CCardHeader>\n              <table className=\"table\">\n                <tbody>\n                  <tr>\n                    <td>Status</td>\n                    <td>\n                      {\" \"}\n                      <CBadge color={getBadge(\"Done\")}>Done</CBadge>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n              {/* <form>\n                <div className=\"text-center search-input\">\n                  <input\n                    type=\"search\"\n                    className=\"form-control\"\n                    placeholder=\"Search\"\n                    required\n                  />\n                </div>\n              </form> */}\n              <Search handleSearch={handleSearch} />\n            </CCardHeader>\n            <Table responsive>\n              <thead>\n                <th className=\"text-nowrap \">Skills</th>\n\n                <th>Platform Name</th>\n                <th>Course Topic</th>\n                <th>Course Type</th>\n              </thead>\n            </Table>\n            <PaginationCommon pageChange={pageChange} />\n          </CCardBody>\n        </CCollapse>\n      </CCard>\n      <CCard className=\"mb-0\">\n        <CCardHeader id=\"headingThree\">\n          <CButton\n            block\n            color=\"link\"\n            className=\"text-left m-0 p-0\"\n            onClick={() => setAccordion(accordion === 2 ? null : 2)}\n          >\n            <h5 className=\"m-0 p-0\">Experimental Learning</h5>\n          </CButton>\n        </CCardHeader>\n        <CCollapse show={accordion === 2}>\n          <CCardBody>\n            <CCardHeader>\n              <table className=\"table\">\n                <tbody>\n                  <tr>\n                    <td>Status</td>\n                    <td>\n                      {\" \"}\n                      <CBadge color={getBadge(\"Done\")}>Done</CBadge>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n              {/* <form>\n                <div className=\"text-center search-input\">\n                  <input\n                    type=\"search\"\n                    className=\"form-control\"\n                    placeholder=\"Search\"\n                    required\n                  />\n                </div>\n              </form> */}\n              <Search handleSearch={handleSearch} />\n            </CCardHeader>\n            <Table responsive>\n              <thead>\n                <th className=\"text-nowrap \">Skills</th>\n\n                <th>Organization</th>\n                <th>Role</th>\n                <th>Role Type</th>\n              </thead>\n            </Table>\n            <PaginationCommon pageChange={pageChange} />\n          </CCardBody>\n        </CCollapse>\n      </CCard>\n    </div>\n  );\n};\nexport default Learn;\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/store/index.js",["344"],"import { applyMiddleware, createStore, compose } from \"redux\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport createSagaMiddleware from \"redux-saga\";\n\nimport { rootReducer } from \"./reducers/index\";\nimport rootSaga from \"./sagas/index\";\nimport logger from \"redux-logger\";\nimport { isProduction } from \"../config\";\nconst persistConfig = {\n  debug: false,\n  key: \"root\",\n  keyPrefix: \"v.1\",\n  storage,\n};\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\n// export const store = createStore(\n//   persistedReducer,\n//   compose(applyMiddleware(sagaMiddleware, logger))\n// );\n\nexport const store = isProduction\n  ? createStore(persistedReducer, compose(applyMiddleware(sagaMiddleware)))\n  : createStore(\n      persistedReducer,\n      compose(applyMiddleware(sagaMiddleware, logger))\n    );\n\nexport const persistor = persistStore(store);\n\nsagaMiddleware.run(rootSaga);\nexport default { store, persistor };\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/serviceWorker.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/store/sagas/index.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/store/reducers/index.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/polyfill.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/assets/icons/index.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/views/store/reducer.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/views/store/sagas.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/common/axios.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/config.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/UserExpertUsage.js",["345","346","347","348"],"import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport PaginationCommon from \"../../common/pagination\";\nimport { CCard, CCardBody, CCardHeader, CCol, CRow } from \"@coreui/react\";\nimport Search from \"../../common/search\";\nimport { Table } from \"reactstrap\";\nimport Pagination from \"react-js-pagination\";\nimport { fetchOneUser } from \"../store/action\";\nimport { connect } from \"react-redux\";\nimport Loader from \"../../loader\";\nimport { useDispatch } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { withRouter } from \"react-router-dom\";\nconst offsetLimit = 10;\nconst UserExpertUsage = (props) => {\n  const dispatch = useDispatch();\n\n  const history = useHistory();\n  const [search, setSearch] = useState(\"\");\n  const [offset, setOffset] = useState(\"\");\n  const [page, setPage] = useState(1);\n  const [user, setUser] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [appointments, setAppointments] = useState({});\n  const [count, setCount] = useState(0);\n  useEffect(() => {\n    setLoading(true);\n\n    const user_id = props && props.match.params.id;\n\n    dispatch(\n      fetchOneUser(\n        `user?id=${user_id}&offset=${offset}&limit=${offsetLimit}&search=${search}`,\n        (value) => {\n          const { appointments, appointmentsCount, user } = value.data;\n\n          setUser(user);\n          setAppointments(appointments);\n          setLoading(false);\n          setCount(appointmentsCount);\n          setOffset(\n            appointments.length && appointments[appointments.length - 1]._id\n          );\n        }\n      )\n    );\n  }, [search]);\n  const handleSearch = (e) => {\n    setSearch(e.target.value);\n    setPage(1);\n    setOffset(\"\");\n  };\n\n  const pageChange = (newPage) => {\n    setLoading(true);\n    const user_id = props && props.match.params.id;\n    dispatch(\n      fetchOneUser(\n        `user?id=${user_id}&offset=${offset}&limit=${offsetLimit}&search=${search}`,\n        (value) => {\n          const { appointments, appointmentsCount, user } = value.data;\n\n          setUser(user);\n          setAppointments(appointments);\n          setLoading(false);\n          setCount(appointmentsCount);\n          setOffset(\n            appointments.length && appointments[appointments.length - 1]._id\n          );\n          setPage(newPage);\n        }\n      )\n    );\n  };\n\n  return (\n    <CRow>\n      <CCol lg={12}>\n        <form>\n          <Search handleSearch={handleSearch} />\n          {!loading && (\n            <div className=\"calls-with-experts\">\n              {!loading && appointments !== undefined && (\n                <h5>\n                  Number of calls with experts:<span>{count}</span>\n                </h5>\n              )}\n            </div>\n          )}\n        </form>\n        <CCard className=\"position-relative\">\n          {loading && <Loader />}\n\n          <CCardBody>\n            <Table\n              responsive\n              className={`table ${\n                appointments.length === 0 ? \"tableHeight\" : \"\"\n              }`}\n            >\n              {appointments && appointments.length > 0 && (\n                <thead>\n                  <tr>\n                    <th className=\"text-nowrap \">Id</th>\n\n                    <th>Name</th>\n\n                    <th>Date & Time</th>\n                    <th>Payment Status</th>\n                  </tr>\n                </thead>\n              )}\n              <tbody>\n                {appointments && appointments.length === 0 && (\n                  <h3 className=\"text-center no-user-found\">\n                    No Appointments Found!\n                  </h3>\n                )}\n                {appointments &&\n                  appointments.length > 0 &&\n                  appointments.map((item, index) => {\n                    return (\n                      <tr\n                        style={{ cursor: \"pointer\" }}\n                        onClick={() =>\n                          history.push({\n                            pathname: `/experts/${item.expert_id}`,\n                            // state: usersDetails,\n                          })\n                        }\n                      >\n                        <td>{item.expert_id}</td>\n                        <td>\n                          {\" \"}\n                          {item.expert &&\n                          item.expert.first_name &&\n                          item.expert.last_name\n                            ? item.expert.first_name +\n                              \" \" +\n                              item.expert.last_name\n                            : \"-\"}\n                        </td>\n\n                        <td>\n                          {item.meeting\n                            ? `${item.meeting.date} & ${item.meeting.time}`\n                            : \"-\"}\n                        </td>\n                        <td>\n                          {item.appointment_status === \"paid\"\n                            ? \"Completed\"\n                            : \"Pending\"}\n                        </td>\n                      </tr>\n                    );\n                  })}\n              </tbody>\n            </Table>\n\n            {/* <div className=\"text-center pagination-input\">\n              {count > offsetLimit && !loading && (\n                <Pagination\n                  className=\"mt-3 mx-auto w-fit-content\"\n                  itemClass=\"page-item\"\n                  linkClass=\"page-link\"\n                  activeClass=\"active\"\n                  activePage={page}\n                  itemsCountPerPage={offsetLimit}\n                  totalItemsCount={count}\n                  pageRangeDisplayed={5}\n                  onChange={pageChange}\n                />\n              )}\n            </div> */}\n            <PaginationCommon\n              pageChange={pageChange}\n              count={count}\n              offsetLimit={offsetLimit}\n              page={page}\n              loading={loading}\n            />\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {};\n};\nconst mapDispatchToProps = (dispatch) => {\n  return bindActionCreators(\n    {\n      fetchOneUser,\n    },\n    dispatch\n  );\n};\nexport default withRouter(\n  connect(mapStateToProps, mapDispatchToProps)(UserExpertUsage)\n);\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/UserResourceUsage.js",["349","350","351"],"import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Search from \"../../common/search\";\nimport Loader from \"../../loader\";\nimport Pagination from \"react-js-pagination\";\nimport { Table } from \"reactstrap\";\nimport { bindActionCreators } from \"redux\";\nimport { withRouter } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport { connect } from \"react-redux\";\nimport { fetchOneUser } from \"../store/action\";\nimport { CCard, CCardBody, CCardHeader, CCol, CRow } from \"@coreui/react\";\n// import { setResourceData } from \"../store/action\";\nconst offsetLimit = 10;\nconst UserResourceUsage = (props) => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const [search, setSearch] = useState(\"\");\n  const [offset, setOffset] = useState(\"\");\n  const [page, setPage] = useState(1);\n  const [user, setUser] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [resources, setResources] = useState({});\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    setLoading(true);\n\n    const user_id = props && props.match.params.id;\n    // dispatch(\n    //   fetchOneUser(`user?id=${user_id}`, (value) => {\n    //     setUser(value.data.user);\n    //     setResources(value.data.resources);\n    //     setLoading(false);\n    //   })\n    // );\n\n    dispatch(\n      fetchOneUser(\n        `user?id=${user_id}&offset=${offset}&limit=${offsetLimit}&search=${search}`,\n        (value) => {\n          const { resources, resourcesCount, user } = value.data;\n          setUser(user);\n          setResources(resources);\n          setLoading(false);\n          setCount(resourcesCount);\n          setOffset(resources.length && resources[resources.length - 1]._id);\n        }\n      )\n    );\n  }, [search]);\n\n  const handleSearch = (e) => {\n    setSearch(e.target.value);\n    setPage(1);\n    setOffset(\"\");\n  };\n  const pageChange = (newPage) => {\n    const user_id = props && props.match.params.id;\n    dispatch(\n      fetchOneUser(\n        `user?id=${user_id}&offset=${offset}&limit=${offsetLimit}&search=${search}`,\n        (value) => {\n          const { resources, resourcesCount } = value.data;\n          setUser(value.data.user);\n          setResources(value.data.resources);\n          setLoading(false);\n          setCount(resourcesCount);\n          setOffset(resources.length && resources[resources.length - 1]._id);\n          setPage(newPage);\n        }\n      )\n    );\n  };\n  return (\n    <CRow>\n      <CCol lg={12}>\n        <form>\n          {/* <div className=\"text-center search-input\">\n            <input\n              type=\"search\"\n              className=\"form-control\"\n              placeholder=\"Search\"\n              required\n              onChange={handleSearch}\n            />\n          </div> */}\n          <Search handleSearch={handleSearch} />\n          {!loading && resources !== undefined && (\n            <div className=\"calls-with-experts\">\n              {!loading && <h5>Number of resources used:{count}</h5>}\n            </div>\n          )}\n        </form>\n        <CCard className=\"position-relative\">\n          {loading && <Loader />}\n\n          <CCardBody>\n            <Table\n              responsive\n              className={`table ${\n                resources && resources.length === 0 ? \"tableHeight\" : \"\"\n              }`}\n            >\n              {resources && resources.length > 0 && (\n                <thead>\n                  <tr>\n                    <th className=\"text-nowrap \">Id</th>\n\n                    <th>Name</th>\n\n                    <th>Format</th>\n                    <th>Price</th>\n                  </tr>\n                </thead>\n              )}\n              <tbody>\n                {resources && resources.length === 0 && (\n                  <h3 className=\"text-center no-user-found\">\n                    No Resources Found!\n                  </h3>\n                )}\n\n                {resources &&\n                  resources.length > 0 &&\n                  resources.map((item, index) => {\n                    return (\n                      <tr\n                        style={{ cursor: \"pointer\" }}\n                        onClick={() =>\n                          history.push({\n                            pathname: `/resources/${item._id}`,\n                            // state: usersDetails,\n                          })\n                        }\n                      >\n                        {/* <td>{item.expert_id}</td>\n                        <td>\n                          {\" \"}\n                          {item.expert &&\n                          item.expert.first_name &&\n                          item.expert.last_name\n                            ? item.expert.first_name +\n                              \" \" +\n                              item.expert.last_name\n                            : \"-\"}\n                        </td>\n\n                        <td>{`${item.meeting.date} & ${item.meeting.time}`}</td>\n                        <td>\n                          {item.appointment_status === \"paid\"\n                            ? \"Completed\"\n                            : \"Pending\"}\n                        </td> */}\n                      </tr>\n                    );\n                  })}\n              </tbody>\n            </Table>\n            <div className=\"text-center pagination-input\">\n              {count > offsetLimit && !loading && (\n                <Pagination\n                  className=\"mt-3 mx-auto w-fit-content\"\n                  itemClass=\"page-item\"\n                  linkClass=\"page-link\"\n                  activeClass=\"active\"\n                  activePage={page}\n                  itemsCountPerPage={offsetLimit}\n                  totalItemsCount={count}\n                  pageRangeDisplayed={5}\n                  onChange={pageChange}\n                />\n              )}\n            </div>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {};\n};\nconst mapDispatchToProps = (dispatch) => {\n  return bindActionCreators(\n    {\n      fetchOneUser,\n    },\n    dispatch\n  );\n};\nexport default withRouter(\n  connect(mapStateToProps, mapDispatchToProps)(UserResourceUsage)\n);\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/experts/ExpertUserUsage.js",["352","353","354"],"import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { CCard, CCardBody, CCardHeader, CCol, CRow } from \"@coreui/react\";\nimport { Table } from \"reactstrap\";\nimport Pagination from \"react-js-pagination\";\nimport { fetchOneExpert } from \"../store/action\";\nimport { connect } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { withRouter } from \"react-router-dom\";\nimport Loader from \"../../loader\";\nimport Search from \"../../common/search\";\nconst offsetLimit = 10;\nconst ExpertUserUsage = (props) => {\n  const [expert, setExpert] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [appointments, setAppointments] = useState({});\n  const [search, setSearch] = useState(\"\");\n  const [offset, setOffset] = useState(\"\");\n  const [page, setPage] = useState(1);\n  const [count, setCount] = useState(0);\n  const history = useHistory();\n  const handleSearch = (e) => {\n    setSearch(e.target.value);\n    setPage(1);\n    setOffset(\"\");\n  };\n  const pageChange = (newPage) => {\n    setLoading(true);\n    const expert_id = props && props.match.params.id;\n    dispatch(\n      fetchOneExpert(\n        `expert?id=${expert_id}&offset=${offset}&limit=${offsetLimit}&search=${search}`,\n        (value) => {\n          const { appointments, appointmentsCount, expert } = value.data;\n          setExpert(expert);\n          setAppointments(appointments);\n          setLoading(false);\n          setCount(appointmentsCount);\n          setOffset(\n            appointments.length && appointments[appointments.length - 1]._id\n          );\n          setPage(newPage);\n        }\n      )\n    );\n  };\n  const dispatch = useDispatch();\n  useEffect(() => {\n    setLoading(true);\n\n    const expert_id = props && props.match.params.id;\n    // dispatch(\n    //   fetchOneExpert(`expert?id=${expert_id}`, (value) => {\n    //     setExpert(value.data.expert);\n    //     setAppointments(value.data.appointments);\n    //     setLoading(false);\n    //   })\n    // );\n\n    dispatch(\n      fetchOneExpert(\n        `expert?id=${expert_id}&offset=${offset}&limit=${offsetLimit}&search=${search}`,\n        (value) => {\n          const { appointments, appointmentsCount, expert } = value.data;\n          setExpert(expert);\n          setAppointments(appointments);\n          setLoading(false);\n          setCount(appointmentsCount);\n          setOffset(\n            appointments.length && appointments[appointments.length - 1]._id\n          );\n        }\n      )\n    );\n  }, [search]);\n\n  return (\n    <CRow>\n      <CCol lg={12}>\n        <form>\n          {/* <div className=\"text-center search-input\">\n            <input\n              type=\"search\"\n              className=\"form-control\"\n              placeholder=\"Search by ID\"\n              required\n              onChange={handleSearch}\n            />\n          </div> */}\n          <Search handleSearch={handleSearch} />\n          {!loading && appointments !== undefined && (\n            <div className=\"calls-with-experts\">\n              {!loading && <h5>Number of calls with users:{count}</h5>}\n            </div>\n          )}\n        </form>\n        <CCard className=\"position-relative\">\n          {loading && <Loader />}\n\n          <CCardBody>\n            <Table\n              responsive\n              className={`table ${\n                appointments && appointments.length === 0 ? \"tableHeight\" : \"\"\n              }`}\n            >\n              {appointments && appointments.length > 0 && (\n                <thead>\n                  <tr>\n                    <th className=\"text-nowrap \">Id</th>\n\n                    <th>Name</th>\n\n                    <th>Date & Time</th>\n                    <th>Payment Status</th>\n                  </tr>\n                </thead>\n              )}\n              <tbody>\n                {appointments && appointments.length === 0 && (\n                  <h3 className=\"text-center no-user-found\">\n                    No Appointments Found!\n                  </h3>\n                )}\n                {appointments &&\n                  appointments.length > 0 &&\n                  appointments.map((item, index) => {\n                    return (\n                      <tr\n                        style={{ cursor: \"pointer\" }}\n                        onClick={() =>\n                          history.push({\n                            pathname: `/users/${item.user_id}`,\n                          })\n                        }\n                      >\n                        <td>{item.user_id}</td>\n\n                        <td>\n                          {\" \"}\n                          {item.meeting.firstName && item.meeting.lastName\n                            ? item.meeting.firstName +\n                              \" \" +\n                              item.meeting.lastName\n                            : \"-\"}\n                        </td>\n                        <td>\n                          {item.meeting\n                            ? `${item.meeting.date} & ${item.meeting.time}`\n                            : \"-\"}\n                        </td>\n                        <td>\n                          {item.appointment_status === \"paid\"\n                            ? \"Completed\"\n                            : \"Pending\"}\n                        </td>\n                      </tr>\n                    );\n                  })}\n              </tbody>\n            </Table>\n            {appointments && appointments.length > 0 && !loading && (\n              <div className=\"text-center pagination-input\">\n                {count > offsetLimit && (\n                  <Pagination\n                    className=\"mt-3 mx-auto w-fit-content\"\n                    itemClass=\"page-item\"\n                    linkClass=\"page-link\"\n                    activeClass=\"active\"\n                    activePage={page}\n                    itemsCountPerPage={offsetLimit}\n                    totalItemsCount={count}\n                    pageRangeDisplayed={5}\n                    onChange={pageChange}\n                  />\n                )}\n              </div>\n            )}\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {};\n};\nconst mapDispatchToProps = (dispatch) => {\n  return bindActionCreators(\n    {\n      fetchOneExpert,\n    },\n    dispatch\n  );\n};\nexport default withRouter(\n  connect(mapStateToProps, mapDispatchToProps)(ExpertUserUsage)\n);\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/common/search.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/common/pagination.js",["355"],"import React from \"react\";\nimport { useParams, withRouter } from \"react-router-dom\";\nimport Pagination from \"react-js-pagination\";\nconst offsetLimit = 10;\nconst count = 15;\nconst Pagination = (props) => {\n  console.log(\"8r6978984967895687\", props);\n  return (\n    <>\n      <div className=\"text-center pagination-input\">\n        {/* {count > offsetLimit && ( */}\n        <Pagination\n          className=\"mt-3 mx-auto w-fit-content\"\n          itemClass=\"page-item\"\n          linkClass=\"page-link\"\n          activeClass=\"active\"\n          // activePage={page}\n          itemsCountPerPage={offsetLimit}\n          totalItemsCount={count}\n          pageRangeDisplayed={5}\n          // onChange={pageChange}\n        />\n        {/* )} */}\n      </div>\n    </>\n  );\n};\n\nexport default withRouter(Pagination);\n",{"ruleId":"356","replacedBy":"357"},{"ruleId":"358","replacedBy":"359"},{"ruleId":"360","severity":1,"message":"361","line":168,"column":29,"nodeType":"362","endLine":168,"endColumn":50},{"ruleId":"363","severity":1,"message":"364","line":36,"column":17,"nodeType":"365","messageId":"366","endLine":36,"endColumn":20},{"ruleId":"363","severity":1,"message":"367","line":36,"column":22,"nodeType":"365","messageId":"366","endLine":36,"endColumn":25},{"ruleId":"363","severity":1,"message":"368","line":145,"column":9,"nodeType":"365","messageId":"366","endLine":145,"endColumn":14},{"ruleId":"363","severity":1,"message":"369","line":177,"column":21,"nodeType":"365","messageId":"366","endLine":177,"endColumn":32},{"ruleId":"363","severity":1,"message":"370","line":233,"column":13,"nodeType":"365","messageId":"366","endLine":233,"endColumn":17},{"ruleId":"363","severity":1,"message":"371","line":341,"column":7,"nodeType":"365","messageId":"366","endLine":341,"endColumn":15},{"ruleId":"372","severity":1,"message":"373","line":563,"column":62,"nodeType":"374","messageId":"375","endLine":563,"endColumn":63,"suggestions":"376"},{"ruleId":"372","severity":1,"message":"373","line":563,"column":105,"nodeType":"374","messageId":"375","endLine":563,"endColumn":106,"suggestions":"377"},{"ruleId":"378","severity":1,"message":"379","line":589,"column":72,"nodeType":"380","messageId":"381","endLine":589,"endColumn":74},{"ruleId":"378","severity":1,"message":"379","line":600,"column":71,"nodeType":"380","messageId":"381","endLine":600,"endColumn":73},{"ruleId":"363","severity":1,"message":"382","line":677,"column":7,"nodeType":"365","messageId":"366","endLine":677,"endColumn":18},{"ruleId":"363","severity":1,"message":"383","line":937,"column":7,"nodeType":"365","messageId":"366","endLine":937,"endColumn":19},{"ruleId":"363","severity":1,"message":"370","line":943,"column":7,"nodeType":"365","messageId":"366","endLine":943,"endColumn":11},{"ruleId":"384","severity":1,"message":"385","line":960,"column":17,"nodeType":"386","endLine":960,"endColumn":57},{"ruleId":"360","severity":1,"message":"361","line":1081,"column":25,"nodeType":"362","endLine":1081,"endColumn":39},{"ruleId":"360","severity":1,"message":"361","line":1194,"column":25,"nodeType":"362","endLine":1194,"endColumn":48},{"ruleId":"384","severity":1,"message":"385","line":1311,"column":27,"nodeType":"386","endLine":1311,"endColumn":61},{"ruleId":"384","severity":1,"message":"385","line":1337,"column":33,"nodeType":"386","endLine":1337,"endColumn":70},{"ruleId":"384","severity":1,"message":"385","line":735,"column":17,"nodeType":"386","endLine":735,"endColumn":57},{"ruleId":"384","severity":1,"message":"385","line":776,"column":25,"nodeType":"386","endLine":779,"endColumn":27},{"ruleId":"384","severity":1,"message":"385","line":955,"column":25,"nodeType":"386","endLine":955,"endColumn":59},{"ruleId":"384","severity":1,"message":"385","line":981,"column":31,"nodeType":"386","endLine":981,"endColumn":68},{"ruleId":"384","severity":1,"message":"385","line":993,"column":25,"nodeType":"386","endLine":993,"endColumn":59},{"ruleId":"384","severity":1,"message":"385","line":1019,"column":31,"nodeType":"386","endLine":1019,"endColumn":68},{"ruleId":"384","severity":1,"message":"385","line":1039,"column":25,"nodeType":"386","endLine":1039,"endColumn":59},{"ruleId":"384","severity":1,"message":"385","line":1066,"column":31,"nodeType":"386","endLine":1066,"endColumn":68},{"ruleId":"363","severity":1,"message":"387","line":3,"column":22,"nodeType":"365","messageId":"366","endLine":3,"endColumn":27},{"ruleId":"363","severity":1,"message":"388","line":1,"column":17,"nodeType":"365","messageId":"366","endLine":1,"endColumn":25},{"ruleId":"363","severity":1,"message":"389","line":13,"column":29,"nodeType":"365","messageId":"366","endLine":13,"endColumn":39},{"ruleId":"390","severity":1,"message":"391","line":3,"column":1,"nodeType":"392","endLine":14,"endColumn":3},{"ruleId":"393","severity":1,"message":"394","line":8,"column":20,"nodeType":"395","messageId":"381","endLine":8,"endColumn":22},{"ruleId":"363","severity":1,"message":"396","line":1,"column":10,"nodeType":"365","messageId":"366","endLine":1,"endColumn":17},{"ruleId":"397","severity":1,"message":"398","line":26,"column":6,"nodeType":"399","endLine":26,"endColumn":8,"suggestions":"400"},{"ruleId":"363","severity":1,"message":"401","line":2,"column":22,"nodeType":"365","messageId":"366","endLine":2,"endColumn":33},{"ruleId":"397","severity":1,"message":"402","line":109,"column":6,"nodeType":"399","endLine":109,"endColumn":14,"suggestions":"403"},{"ruleId":"384","severity":1,"message":"385","line":233,"column":31,"nodeType":"386","endLine":233,"endColumn":66},{"ruleId":"384","severity":1,"message":"385","line":245,"column":31,"nodeType":"386","endLine":245,"endColumn":68},{"ruleId":"384","severity":1,"message":"385","line":259,"column":35,"nodeType":"386","endLine":259,"endColumn":76},{"ruleId":"384","severity":1,"message":"385","line":277,"column":35,"nodeType":"386","endLine":277,"endColumn":74},{"ruleId":"363","severity":1,"message":"404","line":5,"column":3,"nodeType":"365","messageId":"366","endLine":5,"endColumn":14},{"ruleId":"397","severity":1,"message":"398","line":41,"column":6,"nodeType":"399","endLine":41,"endColumn":8,"suggestions":"405"},{"ruleId":"363","severity":1,"message":"401","line":2,"column":22,"nodeType":"365","messageId":"366","endLine":2,"endColumn":33},{"ruleId":"363","severity":1,"message":"406","line":4,"column":8,"nodeType":"365","messageId":"366","endLine":4,"endColumn":18},{"ruleId":"397","severity":1,"message":"407","line":89,"column":6,"nodeType":"399","endLine":89,"endColumn":14,"suggestions":"408"},{"ruleId":"384","severity":1,"message":"385","line":203,"column":31,"nodeType":"386","endLine":203,"endColumn":66},{"ruleId":"384","severity":1,"message":"385","line":213,"column":31,"nodeType":"386","endLine":213,"endColumn":68},{"ruleId":"363","severity":1,"message":"401","line":2,"column":22,"nodeType":"365","messageId":"366","endLine":2,"endColumn":33},{"ruleId":"397","severity":1,"message":"409","line":54,"column":6,"nodeType":"399","endLine":54,"endColumn":14,"suggestions":"410"},{"ruleId":"363","severity":1,"message":"411","line":1,"column":38,"nodeType":"365","messageId":"366","endLine":1,"endColumn":46},{"ruleId":"363","severity":1,"message":"412","line":6,"column":10,"nodeType":"365","messageId":"366","endLine":6,"endColumn":14},{"ruleId":"363","severity":1,"message":"413","line":7,"column":8,"nodeType":"365","messageId":"366","endLine":7,"endColumn":10},{"ruleId":"363","severity":1,"message":"404","line":11,"column":3,"nodeType":"365","messageId":"366","endLine":11,"endColumn":14},{"ruleId":"397","severity":1,"message":"398","line":46,"column":6,"nodeType":"399","endLine":46,"endColumn":8,"suggestions":"414"},{"ruleId":"363","severity":1,"message":"415","line":2,"column":8,"nodeType":"365","messageId":"366","endLine":2,"endColumn":14},{"ruleId":"390","severity":1,"message":"391","line":4,"column":1,"nodeType":"392","endLine":19,"endColumn":3},{"ruleId":"363","severity":1,"message":"415","line":2,"column":8,"nodeType":"365","messageId":"366","endLine":2,"endColumn":14},{"ruleId":"363","severity":1,"message":"416","line":9,"column":3,"nodeType":"365","messageId":"366","endLine":9,"endColumn":7},{"ruleId":"363","severity":1,"message":"417","line":10,"column":3,"nodeType":"365","messageId":"366","endLine":10,"endColumn":7},{"ruleId":"363","severity":1,"message":"418","line":12,"column":3,"nodeType":"365","messageId":"366","endLine":12,"endColumn":8},{"ruleId":"363","severity":1,"message":"419","line":13,"column":3,"nodeType":"365","messageId":"366","endLine":13,"endColumn":11},{"ruleId":"363","severity":1,"message":"420","line":14,"column":3,"nodeType":"365","messageId":"366","endLine":14,"endColumn":11},{"ruleId":"363","severity":1,"message":"421","line":15,"column":3,"nodeType":"365","messageId":"366","endLine":15,"endColumn":7},{"ruleId":"363","severity":1,"message":"422","line":16,"column":3,"nodeType":"365","messageId":"366","endLine":16,"endColumn":14},{"ruleId":"363","severity":1,"message":"423","line":17,"column":3,"nodeType":"365","messageId":"366","endLine":17,"endColumn":11},{"ruleId":"363","severity":1,"message":"415","line":2,"column":8,"nodeType":"365","messageId":"366","endLine":2,"endColumn":14},{"ruleId":"363","severity":1,"message":"416","line":9,"column":3,"nodeType":"365","messageId":"366","endLine":9,"endColumn":7},{"ruleId":"363","severity":1,"message":"417","line":10,"column":3,"nodeType":"365","messageId":"366","endLine":10,"endColumn":7},{"ruleId":"363","severity":1,"message":"418","line":12,"column":3,"nodeType":"365","messageId":"366","endLine":12,"endColumn":8},{"ruleId":"363","severity":1,"message":"419","line":13,"column":3,"nodeType":"365","messageId":"366","endLine":13,"endColumn":11},{"ruleId":"363","severity":1,"message":"420","line":14,"column":3,"nodeType":"365","messageId":"366","endLine":14,"endColumn":11},{"ruleId":"363","severity":1,"message":"421","line":15,"column":3,"nodeType":"365","messageId":"366","endLine":15,"endColumn":7},{"ruleId":"363","severity":1,"message":"422","line":16,"column":3,"nodeType":"365","messageId":"366","endLine":16,"endColumn":14},{"ruleId":"363","severity":1,"message":"423","line":17,"column":3,"nodeType":"365","messageId":"366","endLine":17,"endColumn":11},{"ruleId":"363","severity":1,"message":"415","line":2,"column":8,"nodeType":"365","messageId":"366","endLine":2,"endColumn":14},{"ruleId":"363","severity":1,"message":"416","line":9,"column":3,"nodeType":"365","messageId":"366","endLine":9,"endColumn":7},{"ruleId":"363","severity":1,"message":"417","line":10,"column":3,"nodeType":"365","messageId":"366","endLine":10,"endColumn":7},{"ruleId":"363","severity":1,"message":"418","line":12,"column":3,"nodeType":"365","messageId":"366","endLine":12,"endColumn":8},{"ruleId":"363","severity":1,"message":"419","line":13,"column":3,"nodeType":"365","messageId":"366","endLine":13,"endColumn":11},{"ruleId":"363","severity":1,"message":"420","line":14,"column":3,"nodeType":"365","messageId":"366","endLine":14,"endColumn":11},{"ruleId":"363","severity":1,"message":"421","line":15,"column":3,"nodeType":"365","messageId":"366","endLine":15,"endColumn":7},{"ruleId":"363","severity":1,"message":"422","line":16,"column":3,"nodeType":"365","messageId":"366","endLine":16,"endColumn":14},{"ruleId":"363","severity":1,"message":"423","line":17,"column":3,"nodeType":"365","messageId":"366","endLine":17,"endColumn":11},{"ruleId":"363","severity":1,"message":"415","line":2,"column":8,"nodeType":"365","messageId":"366","endLine":2,"endColumn":14},{"ruleId":"363","severity":1,"message":"416","line":9,"column":3,"nodeType":"365","messageId":"366","endLine":9,"endColumn":7},{"ruleId":"363","severity":1,"message":"417","line":10,"column":3,"nodeType":"365","messageId":"366","endLine":10,"endColumn":7},{"ruleId":"363","severity":1,"message":"418","line":12,"column":3,"nodeType":"365","messageId":"366","endLine":12,"endColumn":8},{"ruleId":"363","severity":1,"message":"419","line":13,"column":3,"nodeType":"365","messageId":"366","endLine":13,"endColumn":11},{"ruleId":"363","severity":1,"message":"420","line":14,"column":3,"nodeType":"365","messageId":"366","endLine":14,"endColumn":11},{"ruleId":"363","severity":1,"message":"421","line":15,"column":3,"nodeType":"365","messageId":"366","endLine":15,"endColumn":7},{"ruleId":"363","severity":1,"message":"422","line":16,"column":3,"nodeType":"365","messageId":"366","endLine":16,"endColumn":14},{"ruleId":"363","severity":1,"message":"423","line":17,"column":3,"nodeType":"365","messageId":"366","endLine":17,"endColumn":11},{"ruleId":"363","severity":1,"message":"415","line":2,"column":8,"nodeType":"365","messageId":"366","endLine":2,"endColumn":14},{"ruleId":"363","severity":1,"message":"416","line":9,"column":3,"nodeType":"365","messageId":"366","endLine":9,"endColumn":7},{"ruleId":"363","severity":1,"message":"417","line":10,"column":3,"nodeType":"365","messageId":"366","endLine":10,"endColumn":7},{"ruleId":"363","severity":1,"message":"418","line":12,"column":3,"nodeType":"365","messageId":"366","endLine":12,"endColumn":8},{"ruleId":"363","severity":1,"message":"419","line":13,"column":3,"nodeType":"365","messageId":"366","endLine":13,"endColumn":11},{"ruleId":"363","severity":1,"message":"420","line":14,"column":3,"nodeType":"365","messageId":"366","endLine":14,"endColumn":11},{"ruleId":"363","severity":1,"message":"421","line":15,"column":3,"nodeType":"365","messageId":"366","endLine":15,"endColumn":7},{"ruleId":"363","severity":1,"message":"422","line":16,"column":3,"nodeType":"365","messageId":"366","endLine":16,"endColumn":14},{"ruleId":"363","severity":1,"message":"423","line":17,"column":3,"nodeType":"365","messageId":"366","endLine":17,"endColumn":11},{"ruleId":"390","severity":1,"message":"424","line":36,"column":1,"nodeType":"392","endLine":36,"endColumn":37},{"ruleId":"363","severity":1,"message":"404","line":4,"column":28,"nodeType":"365","messageId":"366","endLine":4,"endColumn":39},{"ruleId":"363","severity":1,"message":"406","line":7,"column":8,"nodeType":"365","messageId":"366","endLine":7,"endColumn":18},{"ruleId":"363","severity":1,"message":"425","line":22,"column":10,"nodeType":"365","messageId":"366","endLine":22,"endColumn":14},{"ruleId":"397","severity":1,"message":"426","line":47,"column":6,"nodeType":"399","endLine":47,"endColumn":14,"suggestions":"427"},{"ruleId":"363","severity":1,"message":"404","line":12,"column":28,"nodeType":"365","messageId":"366","endLine":12,"endColumn":39},{"ruleId":"363","severity":1,"message":"425","line":21,"column":10,"nodeType":"365","messageId":"366","endLine":21,"endColumn":14},{"ruleId":"397","severity":1,"message":"426","line":51,"column":6,"nodeType":"399","endLine":51,"endColumn":14,"suggestions":"428"},{"ruleId":"363","severity":1,"message":"404","line":3,"column":28,"nodeType":"365","messageId":"366","endLine":3,"endColumn":39},{"ruleId":"363","severity":1,"message":"429","line":15,"column":10,"nodeType":"365","messageId":"366","endLine":15,"endColumn":16},{"ruleId":"397","severity":1,"message":"426","line":76,"column":6,"nodeType":"399","endLine":76,"endColumn":14,"suggestions":"430"},{"ruleId":"363","severity":1,"message":"431","line":2,"column":10,"nodeType":"365","messageId":"366","endLine":2,"endColumn":19},"no-native-reassign",["432"],"no-negated-in-lhs",["433"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-unused-vars","'Row' is defined but never used.","Identifier","unusedVar","'Col' is defined but never used.","'price' is assigned a value but never used.","'serviceList' is assigned a value but never used.","'unit' is assigned a value but never used.","'industry' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\+.","Literal","unnecessaryEscape",["434","435"],["436","437"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'profile_pic' is assigned a value but never used.","'selectedDate' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'CFade' is defined but never used.","'useState' is defined but never used.","'TheSidebar' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","'Planner' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'props'. Either include them or remove the dependency array.","ArrayExpression",["438"],"'useLocation' is defined but never used.","React Hook useEffect has a missing dependency: 'callApiToFetchAllExperts'. Either include it or remove the dependency array.",["439"],"'CCardHeader' is defined but never used.",["440"],"'Pagination' is defined but never used.","React Hook useEffect has a missing dependency: 'callApiToFetchAllResources'. Either include it or remove the dependency array.",["441"],"React Hook useEffect has a missing dependency: 'callApiToFetchAllUsers'. Either include it or remove the dependency array.",["442"],"'Fragment' is defined but never used.","'Link' is defined but never used.","'cx' is defined but never used.",["443"],"'Loader' is defined but never used.","'CCol' is defined but never used.","'CRow' is defined but never used.","'CTabs' is defined but never used.","'CNavItem' is defined but never used.","'CNavLink' is defined but never used.","'CNav' is defined but never used.","'CTabContent' is defined but never used.","'CTabPane' is defined but never used.","Assign object to a variable before exporting as module default","'user' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'offset', and 'props'. Either include them or remove the dependency array.",["444"],["445"],"'expert' is assigned a value but never used.",["446"],"'useParams' is defined but never used.","no-global-assign","no-unsafe-negation",{"messageId":"447","fix":"448","desc":"449"},{"messageId":"450","fix":"451","desc":"452"},{"messageId":"447","fix":"453","desc":"449"},{"messageId":"450","fix":"454","desc":"452"},{"desc":"455","fix":"456"},{"desc":"457","fix":"458"},{"desc":"455","fix":"459"},{"desc":"460","fix":"461"},{"desc":"462","fix":"463"},{"desc":"455","fix":"464"},{"desc":"465","fix":"466"},{"desc":"465","fix":"467"},{"desc":"465","fix":"468"},"removeEscape",{"range":"469","text":"470"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"471","text":"472"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"473","text":"470"},{"range":"474","text":"472"},"Update the dependencies array to be: [dispatch, props]",{"range":"475","text":"476"},"Update the dependencies array to be: [callApiToFetchAllExperts, search]",{"range":"477","text":"478"},{"range":"479","text":"476"},"Update the dependencies array to be: [callApiToFetchAllResources, search]",{"range":"480","text":"481"},"Update the dependencies array to be: [callApiToFetchAllUsers, search]",{"range":"482","text":"483"},{"range":"484","text":"476"},"Update the dependencies array to be: [dispatch, offset, props, search]",{"range":"485","text":"486"},{"range":"487","text":"486"},{"range":"488","text":"486"},[12880,12881],"",[12880,12880],"\\",[12923,12924],[12923,12923],[820,822],"[dispatch, props]",[3284,3292],"[callApiToFetchAllExperts, search]",[1080,1082],[2811,2819],"[callApiToFetchAllResources, search]",[1756,1764],"[callApiToFetchAllUsers, search]",[1247,1249],[1635,1643],"[dispatch, offset, props, search]",[1790,1798],[2565,2573]]