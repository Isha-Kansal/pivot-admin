[{"/Volumes/DATA/Isha Kansal/reactjs/pivot-admin/src/index.js":"1","/Volumes/DATA/Isha Kansal/reactjs/pivot-admin/src/App.js":"2","/Volumes/DATA/Isha Kansal/reactjs/pivot-admin/src/reportWebVitals.js":"3","/Volumes/DATA/Isha Kansal/pivot-admin/src/index.js":"4","/Volumes/DATA/Isha Kansal/pivot-admin/src/App.js":"5","/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/TheLayout.js":"6","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/login/Login.js":"7","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/experts/AddExpert.js":"8","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/resources/AddResource.js":"9","/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/index.js":"10","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/store/action.js":"11","/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/TheContent.js":"12","/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/TheHeaderDropdown.js":"13","/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/TheHeader.js":"14","/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/TheSidebar.js":"15","/Volumes/DATA/Isha Kansal/pivot-admin/src/loader/index.js":"16","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/store/types.js":"17","/Volumes/DATA/Isha Kansal/pivot-admin/src/routes.js":"18","/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/logo.js":"19","/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/_nav.js":"20","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/resources/Resource.js":"21","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/experts/Experts.js":"22","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/resources/Resources.js":"23","/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/icons.js":"24","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/Users.js":"25","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/User.js":"26","/Volumes/DATA/Isha Kansal/pivot-admin/src/common/toolTip.js":"27","/Volumes/DATA/Isha Kansal/pivot-admin/src/common/commonModal.js":"28","/Volumes/DATA/Isha Kansal/pivot-admin/src/store/index.js":"29","/Volumes/DATA/Isha Kansal/pivot-admin/src/serviceWorker.js":"30","/Volumes/DATA/Isha Kansal/pivot-admin/src/store/sagas/index.js":"31","/Volumes/DATA/Isha Kansal/pivot-admin/src/store/reducers/index.js":"32","/Volumes/DATA/Isha Kansal/pivot-admin/src/polyfill.js":"33","/Volumes/DATA/Isha Kansal/pivot-admin/src/assets/icons/index.js":"34","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/store/reducer.js":"35","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/store/sagas.js":"36","/Volumes/DATA/Isha Kansal/pivot-admin/src/common/axios.js":"37","/Volumes/DATA/Isha Kansal/pivot-admin/src/config.js":"38","/Volumes/DATA/Isha Kansal/pivot-admin/src/common/stringFunction.js":"39","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/resources/ResourcesFieldsData.js":"40","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/experts/ExpertsFieldsData.js":"41","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/experts/ExpertUserUsage.js":"42","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/experts/Expert.js":"43","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/UserPlanner.js":"44","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/UserExpertUsage.js":"45","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/planner/Planner.js":"46","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/UserResourceUsage.js":"47","/Volumes/DATA/Isha Kansal/pivot-admin/src/common/pagination.js":"48","/Volumes/DATA/Isha Kansal/pivot-admin/src/common/search.js":"49","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/planner/Learn.js":"50","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/planner/Apply.js":"51","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/planner/Explore.js":"52","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/planner/Prepare.js":"53","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/planner/Network.js":"54","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/planner/exploreData.js":"55","/Volumes/DATA/Isha Kansal/pivot-admin/src/common/tabs.js":"56"},{"size":500,"mtime":1612329326000,"results":"57","hashOfConfig":"58"},{"size":195,"mtime":1612330254000,"results":"59","hashOfConfig":"58"},{"size":362,"mtime":1612329326000,"results":"60","hashOfConfig":"58"},{"size":902,"mtime":1616475680000,"results":"61","hashOfConfig":"62"},{"size":2079,"mtime":1616475680000,"results":"63","hashOfConfig":"62"},{"size":837,"mtime":1616475680000,"results":"64","hashOfConfig":"62"},{"size":6027,"mtime":1616475680000,"results":"65","hashOfConfig":"62"},{"size":39085,"mtime":1617879127000,"results":"66","hashOfConfig":"62"},{"size":34477,"mtime":1618480394000,"results":"67","hashOfConfig":"62"},{"size":284,"mtime":1614839323000,"results":"68","hashOfConfig":"62"},{"size":3387,"mtime":1616475680000,"results":"69","hashOfConfig":"62"},{"size":1817,"mtime":1616475680000,"results":"70","hashOfConfig":"62"},{"size":492,"mtime":1616475680000,"results":"71","hashOfConfig":"62"},{"size":1169,"mtime":1616475680000,"results":"72","hashOfConfig":"62"},{"size":1109,"mtime":1616475680000,"results":"73","hashOfConfig":"62"},{"size":340,"mtime":1614839323000,"results":"74","hashOfConfig":"62"},{"size":3588,"mtime":1616475680000,"results":"75","hashOfConfig":"62"},{"size":2547,"mtime":1616577308000,"results":"76","hashOfConfig":"62"},{"size":9997,"mtime":1614839323000,"results":"77","hashOfConfig":"62"},{"size":686,"mtime":1616475680000,"results":"78","hashOfConfig":"62"},{"size":7434,"mtime":1618480846000,"results":"79","hashOfConfig":"62"},{"size":11984,"mtime":1618464623000,"results":"80","hashOfConfig":"62"},{"size":9998,"mtime":1618480685000,"results":"81","hashOfConfig":"62"},{"size":7216,"mtime":1616475680000,"results":"82","hashOfConfig":"62"},{"size":9681,"mtime":1617947915000,"results":"83","hashOfConfig":"62"},{"size":8263,"mtime":1617879127000,"results":"84","hashOfConfig":"62"},{"size":424,"mtime":1614839323000,"results":"85","hashOfConfig":"62"},{"size":1918,"mtime":1616475680000,"results":"86","hashOfConfig":"62"},{"size":1048,"mtime":1616475680000,"results":"87","hashOfConfig":"62"},{"size":4686,"mtime":1614839323000,"results":"88","hashOfConfig":"62"},{"size":179,"mtime":1614839323000,"results":"89","hashOfConfig":"62"},{"size":186,"mtime":1614839323000,"results":"90","hashOfConfig":"62"},{"size":1895,"mtime":1614839323000,"results":"91","hashOfConfig":"62"},{"size":3924,"mtime":1614839323000,"results":"92","hashOfConfig":"62"},{"size":7846,"mtime":1616475680000,"results":"93","hashOfConfig":"62"},{"size":11392,"mtime":1616475680000,"results":"94","hashOfConfig":"62"},{"size":1478,"mtime":1616475680000,"results":"95","hashOfConfig":"62"},{"size":173,"mtime":1618472670000,"results":"96","hashOfConfig":"62"},{"size":124,"mtime":1614839323000,"results":"97","hashOfConfig":"62"},{"size":2436,"mtime":1618478513000,"results":"98","hashOfConfig":"62"},{"size":16830,"mtime":1618472071000,"results":"99","hashOfConfig":"62"},{"size":6105,"mtime":1617879127000,"results":"100","hashOfConfig":"62"},{"size":11276,"mtime":1617880995000,"results":"101","hashOfConfig":"62"},{"size":3319,"mtime":1617879127000,"results":"102","hashOfConfig":"62"},{"size":7276,"mtime":1617949437000,"results":"103","hashOfConfig":"62"},{"size":706,"mtime":1616475680000,"results":"104","hashOfConfig":"62"},{"size":6742,"mtime":1617949943000,"results":"105","hashOfConfig":"62"},{"size":737,"mtime":1616475680000,"results":"106","hashOfConfig":"62"},{"size":454,"mtime":1616475680000,"results":"107","hashOfConfig":"62"},{"size":10295,"mtime":1617953007000,"results":"108","hashOfConfig":"62"},{"size":8381,"mtime":1618298160000,"results":"109","hashOfConfig":"62"},{"size":19129,"mtime":1617960830000,"results":"110","hashOfConfig":"62"},{"size":16960,"mtime":1617953012000,"results":"111","hashOfConfig":"62"},{"size":14057,"mtime":1618297761000,"results":"112","hashOfConfig":"62"},{"size":247,"mtime":1616477605000,"results":"113","hashOfConfig":"62"},{"size":1350,"mtime":1616580967000,"results":"114","hashOfConfig":"62"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"161ocxv",{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},"z7vibx",{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"123"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"123"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"123"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"123"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"123"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"123"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"164","messages":"165","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"123"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"123"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"123"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"123"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"123"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"123"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"123"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"123"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"123"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"123"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"123"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"123"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"123"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"123"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"123"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"123"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},"/Volumes/DATA/Isha Kansal/reactjs/pivot-admin/src/index.js",[],"/Volumes/DATA/Isha Kansal/reactjs/pivot-admin/src/App.js",[],"/Volumes/DATA/Isha Kansal/reactjs/pivot-admin/src/reportWebVitals.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/index.js",[],["250","251"],"/Volumes/DATA/Isha Kansal/pivot-admin/src/App.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/TheLayout.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/views/login/Login.js",["252"],"import React, { Component } from \"react\";\n\nimport { NotificationManager } from \"react-notifications\";\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardGroup,\n  CCol,\n  CContainer,\n  CForm,\n  CInput,\n  CInputGroup,\n  CInputGroupPrepend,\n  CInputGroupText,\n  CRow,\n} from \"@coreui/react\";\nimport Loader from \"../../loader\";\nimport { FormText } from \"reactstrap\";\nimport CIcon from \"@coreui/icons-react\";\nimport { loginByAdmin, setToken } from \"../store/action\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { withRouter } from \"react-router-dom\";\nclass Login extends Component {\n  constructor(props) {\n    super();\n    this.state = {\n      name: \"\",\n      password: \"\",\n      errorText: \"\",\n      errorType: \"\",\n\n      loading: false,\n    };\n  }\n  handleChange = (e, type) => {\n    e.preventDefault();\n    this.setState({\n      [type]: e.target.value,\n      errorText: \"\",\n      errorType: \"\",\n    });\n  };\n  onHandleSubmit = (e) => {\n    e && e.preventDefault();\n\n    const { name, password } = this.state;\n    if (name === \"\") {\n      this.setState({ errorText: \"Name can not be empty\", errorType: \"name\" });\n    } else if (password === \"\") {\n      this.setState({\n        errorText: \"Password can not be empty\",\n        errorType: \"password\",\n      });\n    } else this.authenticateAdmin();\n  };\n  authenticateAdmin = () => {\n    const { name, password } = this.state;\n    this.setState({\n      loading: true,\n    });\n    let formData = {\n      email: name,\n      password: password,\n    };\n\n    this.props.loginByAdmin(\"user/login\", formData, (value) => {\n      this.setState({\n        loading: false,\n      });\n\n      if (value.status === 200) {\n        localStorage.setItem(\"auth_token\", value.data.user.auth_token);\n        NotificationManager.success(\"Login Successfully\", \"\", 1000);\n\n        localStorage.setItem(\"isLoggedIn\", true);\n\n        this.props.history.push(\"/users\");\n      } else {\n        NotificationManager.error(\"Please enter valid credentials\", \"\", 1000);\n        this.setState({\n          name: \"\",\n          password: \"\",\n        });\n      }\n    });\n  };\n  onKeyDown = (e) => {\n    if (e.key === \"Enter\") {\n      e.preventDefault();\n\n      this.onHandleSubmit();\n    }\n  };\n  render() {\n    const { errorText, errorType, loading, name, password } = this.state;\n\n    return (\n      <div className=\"c-app c-default-layout flex-row align-items-center\">\n        <CContainer>\n          <CRow className=\"justify-content-center\">\n            <CCol md=\"8\">\n              <CCardGroup className=\"position-relative\">\n                {loading && <Loader />}\n\n                <CCard className=\"p-4\">\n                  <CCardBody>\n                    <CForm onKeyDown={(e) => this.onKeyDown(e)}>\n                      <h1>Login</h1>\n                      <p className=\"text-muted\">Sign In to your account</p>\n                      <div className=\"mb-3\">\n                        <CInputGroup>\n                          <CInputGroupPrepend>\n                            <CInputGroupText>\n                              <CIcon name=\"cil-user\" />\n                            </CInputGroupText>\n                          </CInputGroupPrepend>\n                          <CInput\n                            type=\"text\"\n                            placeholder=\"Username\"\n                            autoComplete=\"username\"\n                            onChange={(e) => this.handleChange(e, \"name\")}\n                            value={name}\n                          />\n                        </CInputGroup>\n                        <p className=\"mb-0\">\n                          {errorType === \"name\" && (\n                            <FormText color=\"danger\" className=\"error\">\n                              {errorText}\n                            </FormText>\n                          )}\n                        </p>\n                      </div>\n                      <div className=\"mb-4\">\n                        <CInputGroup>\n                          <CInputGroupPrepend>\n                            <CInputGroupText>\n                              <CIcon name=\"cil-lock-locked\" />\n                            </CInputGroupText>\n                          </CInputGroupPrepend>\n                          <CInput\n                            type=\"password\"\n                            placeholder=\"Password\"\n                            autoComplete=\"current-password\"\n                            onChange={(e) => this.handleChange(e, \"password\")}\n                            value={password}\n                          />\n                        </CInputGroup>\n                        <p className=\"mb-0\">\n                          {\" \"}\n                          {errorType === \"password\" && (\n                            <FormText color=\"danger\" className=\"error\">\n                              {errorText}\n                            </FormText>\n                          )}\n                        </p>\n                      </div>\n\n                      <CRow>\n                        <CCol xs=\"6\">\n                          <CButton\n                            color=\"primary\"\n                            className=\"px-4\"\n                            onClick={this.onHandleSubmit}\n                            disabled={loading}\n                            className=\"login-btn\"\n                          >\n                            Login\n                          </CButton>\n                        </CCol>\n                      </CRow>\n                    </CForm>\n                  </CCardBody>\n                </CCard>\n              </CCardGroup>\n            </CCol>\n          </CRow>\n        </CContainer>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    saveToken: state.LoginAndNavigationReducer.saveToken,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return bindActionCreators(\n    {\n      loginByAdmin,\n      setToken,\n    },\n    dispatch\n  );\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Login));\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/experts/AddExpert.js",["253","254","255","256","257","258","259","260","261","262","263","264","265","266","267","268","269","270","271","272","273"],"import React, { Component } from \"react\";\n\nimport ADD from \"../../assets/icons/add.svg\";\nimport {\n  addExpert,\n  addImage,\n  fetchOneExpert,\n  editExpert,\n  fetchService,\n} from \"../store/action\";\nimport moment from \"moment-timezone\";\nimport { connect } from \"react-redux\";\nimport { NotificationManager } from \"react-notifications\";\nimport { bindActionCreators } from \"redux\";\nimport { withRouter } from \"react-router-dom\";\nimport BackArrow from \"../../assets/icons/left-arrow.svg\";\nimport Loader from \"../../loader\";\nimport CANCEL from \"../../assets/icons/cancel.svg\";\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardFooter,\n  CCardHeader,\n  CCol,\n  CForm,\n  CFormGroup,\n  CTextarea,\n  CInput,\n  CLabel,\n  CRow,\n} from \"@coreui/react\";\n\nimport Select from \"react-select\";\nimport CameraIcon from \"../../assets/icons/photo-camera.svg\";\nimport { Input, Row, Col } from \"reactstrap\";\nimport CIcon from \"@coreui/icons-react\";\nimport Avatar from \"../../assets/icons/avatar.png\";\nimport {\n  optionsFields,\n  optionsGender,\n  optionsCountry,\n  optionsExpertise,\n  optionsRole,\n  optionsIndustry,\n  optionsSkill,\n  optionsUnit,\n} from \"./ExpertsFieldsData\";\n\nclass AddExpert extends Component {\n  constructor(props) {\n    super();\n    this.state = {\n      first_name: \"\",\n      last_name: \"\",\n      email: \"\",\n      contact: \"\",\n      gender: \"\",\n      country: \"\",\n      designation: \"\",\n      expertise: [],\n      loadiing: false,\n      role: \"\",\n      industry: \"\",\n      fields: [],\n      about: [],\n      pricing: [],\n      errorType: \"\",\n      errorText: \"\",\n      selectedCalendar: null,\n      expertImage: null,\n      selectedDate: new Date(),\n      linkedIn: \"\",\n      calendarId: null,\n      calendarOptions: [],\n      serviceList: [],\n      unit: \"\",\n    };\n  }\n\n  getCalenderList = (callback) => {\n    this.props.fetchService(\n      \"expert/services\",\n\n      (value) => {\n        if (value.status === 200) {\n        \n          const calendarOptions = (value.data.services || []).map(\n            (service) => ({\n              value: service.calendar_id,\n              label: service.name,\n            })\n          );\n\n          const serviceList = value.data.services || [];\n          this.setState(\n            {\n              calendarOptions,\n              serviceList,\n              loading: false,\n            },\n            () => {\n              if (callback) {\n                callback();\n              }\n            }\n          );\n        }\n      }\n    );\n  };\n  componentDidMount() {\n    const expert_id = this.props && this.props.match.params.id;\n\n    if (expert_id) {\n      this.callApiToFetchExpertDetails();\n    } else {\n      this.getCalenderList();\n    }\n  }\n\n  callApiToFetchExpertDetails = () => {\n    const expert_id = this.props && this.props.match.params.id;\n    this.setState({\n      loadiing: true,\n    });\n    this.props.fetchOneExpert(`expert?id=${expert_id}`, (value) => {\n      const {\n        first_name,\n        last_name,\n        gender,\n        country,\n        designation,\n        expert_fields,\n        current_role,\n        industry,\n        skills,\n        email,\n        contact_no,\n        linkedIn,\n        calendar_id,\n        price,\n        rates,\n        info,\n        profile_pic,\n        calendar\n      } = value.data.expert;\n\n      const infoData = info.map((el) => {\n        return { value: el };\n      });\n\n      this.setState(\n        {\n          loadiing: false,\n          first_name: first_name.trim(),\n          last_name: last_name.trim(),\n          gender,\n          country,\n          designation,\n          fields: expert_fields,\n          role: current_role,\n          industry,\n          email,\n          contact: contact_no,\n          linkedIn,\n          about: infoData,\n          skill: (skills && skills[0] && skills[0].label) || \"\",\n          expertise: skills && skills[0] && skills[0].values,\n          calendarId: calendar_id,\n          expertImage: profile_pic,\n          // selectedCalendar:calendar.name\n        },\n        () => {\n          this.getCalenderList(() => {\n            const { serviceList, calendarId, calendarOptions } = this.state;\n\n            const selectedCalendar = (calendarOptions || []).find(\n\n              (service) => service.value === calendarId\n\n            );\n         \n            this.setState({\n              selectedCalendar: selectedCalendar || { value: calendar.id, label: calendar.name },\n              pricing: rates || [],\n            });\n          });\n        }\n      );\n    });\n  };\n  uploadImage = (event) => {\n    this.clearError();\n    if (event.target.files && event.target.files[0]) {\n      var reader = new FileReader();\n      reader.onloadend = function () {\n        this.callApiAddImage((reader && reader.result) || \"\");\n\n        this.setState({\n          expertImage: reader.result,\n        });\n      }.bind(this);\n      reader.readAsDataURL(event.target.files[0]);\n    }\n  };\n  errorShow = (type) => {\n    const { errorType, errorText } = this.state;\n    return errorType === type ? <p>{errorText}</p> : null;\n  };\n  clearError = () => {\n    this.setState({\n      errorType: \"\",\n      errorText: \"\",\n    });\n  };\n  inputHandler = (e) => {\n    this.clearError();\n    this.setState({ [e.target.name]: e.target.value });\n  };\n  handleUnit = (data, type, index) => {\n    let pricingToUpdate = this.state.pricing[index];\n    const newArray = [...this.state.pricing];\n    pricingToUpdate = {\n      ...pricingToUpdate,\n      unit: data.value,\n    };\n    newArray[index] = pricingToUpdate;\n    this.clearError();\n    this.setState({ pricing: newArray });\n  };\n\n  handleChange = (data, type) => {\n    const { unit } = this.state;\n    this.clearError();\n\n    if (type === \"fields\") {\n      let arr;\n      // if (data.length <= 3) {\n      arr = data.map((el) => {\n        return el.value;\n      });\n      this.setState({\n        fields: arr,\n      });\n      // }\n      // else {\n      //   NotificationManager.info(\"You can select upto 3 only\", \"\", 1000);\n      // }\n    }\n    if (type === \"gender\") {\n      this.setState({\n        gender: data.value,\n      });\n    }\n\n    if (type === \"country\") {\n      this.setState({\n        country: data.value,\n      });\n    }\n    if (type === \"calendarId\") {\n      const { serviceList } = this.state;\n\n      const selectedService = serviceList.find(\n        (item) => item.calendar_id === data.value\n      );\n\n      const pricingVal = (selectedService.services || []).map((data) => ({\n        id: data.id,\n        serviceName: data.name,\n        value: \"\",\n        unit: \"\",\n      }));\n\n      this.setState({\n        selectedCalendar: data,\n        pricing: pricingVal,\n      });\n    }\n    if (type === \"designation\") {\n      this.setState({\n        designation: data.value,\n      });\n    }\n    if (type === \"expertise\") {\n      let arr;\n      // if (data.length <= 3) {\n      arr = data.map((el) => {\n        return el.value;\n      });\n      this.setState({\n        expertise: arr,\n      });\n      // }\n      // else {\n      //   NotificationManager.info(\"You can select upto 3 only\", \"\", 1000);\n      // }\n    }\n    if (type === \"role\") {\n      this.setState({\n        role: data.value,\n      });\n    }\n\n    if (type === \"industry\") {\n      if (data === null) {\n        this.setState({\n          industry: \"\",\n        });\n      } else {\n        this.setState({\n          industry: data.value,\n        });\n      }\n    }\n\n    if (type === \"skill\") {\n      this.setState({\n        skill: data.value,\n      });\n    }\n  };\n  validateEmail = (email) => {\n    var re = /^(([^<>()\\]\\\\.,;:\\s@“]+(\\.[^<>()\\]\\\\.,;:\\s@“]+)*)|(“.+“))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n    return re.test(String(email).toLowerCase());\n  };\n  onSubmit = (e) => {\n    const expert_id = this.props && this.props.match.params.id;\n\n    const {\n      first_name,\n      last_name,\n      email,\n      contact,\n      gender,\n      country,\n      designation,\n      selectedCalendar,\n      role,\n      industry,\n      expertise,\n      fields,\n      about,\n      pricing,\n\n      linkedIn,\n      skill,\n    } = this.state;\n  \n    if (first_name === \"\") {\n      this.setState({\n        errorType: \"first_name\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Name should not be empty</b>\n          </span>\n        ),\n      });\n      return;\n    }\n    if (first_name !== \"\") {\n      let filter = /^[a-zA-Z0-9]+([-_\\s]{1}[a-zA-Z0-9]+)*$/;\n\n      if (!filter.test(first_name)) {\n        this.setState({\n          errorType: \"first_name\",\n          errorText: (\n            <span className=\"text-danger\">\n              <b>\n                {\" \"}\n                Name should be combination of alphanumeric text, underscore,\n                space and hyphen\n              </b>\n            </span>\n          ),\n        });\n        return;\n      }\n    }\n\n    if (last_name === \"\") {\n      this.setState({\n        errorType: \"last_name\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Name should not be empty</b>\n          </span>\n        ),\n      });\n      return;\n    }\n    if (last_name !== \"\") {\n      let filter = /^[a-zA-Z0-9]+([-_\\s]{1}[a-zA-Z0-9]+)*$/;\n\n      if (!filter.test(last_name)) {\n        this.setState({\n          errorType: \"last_name\",\n          errorText: (\n            <span className=\"text-danger\">\n              <b>\n                {\" \"}\n                Name should be combination of alphanumeric text, underscore,\n                space and hyphen\n              </b>\n            </span>\n          ),\n        });\n        return;\n      }\n    }\n\n    if (email === \"\") {\n      this.setState({\n        errorType: \"email\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Email Id is empty</b>\n          </span>\n        ),\n      });\n      return;\n    }\n    if (!this.validateEmail(email)) {\n      this.setState({\n        errorType: \"email\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Invalid email</b>\n          </span>\n        ),\n      });\n      return;\n    }\n\n    // if (contact === \"\") {\n    //   this.setState({\n    //     errorType: \"contact\",\n    //     errorText: <span className=\"text-danger\">Mobile number is empty</span>,\n    //     loading: false,\n    //   });\n\n    //   return;\n    // }\n\n    if (contact !== \"\") {\n      if (contact.length < 10 || contact.length > 10) {\n        this.setState({\n          errorType: \"contact\",\n          errorText: (\n            <span className=\"text-danger\">\n              {\" \"}\n              <b>Phone number should be of length 10</b>\n            </span>\n          ),\n          loading: false,\n        });\n\n        return;\n      }\n    }\n\n    if (contact !== \"\") {\n      let filter = /^\\d{10}$/;\n      if (!filter.test(contact)) {\n        this.setState({\n          errorType: \"contact\",\n          errorText: (\n            <span className=\"text-danger\">\n              {\" \"}\n              <b>Please enter valid phone number</b>\n            </span>\n          ),\n          loading: false,\n        });\n\n        return;\n      }\n    }\n\n    if (gender === \"\") {\n      this.setState({\n        errorType: \"gender\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Select your gender</b>\n          </span>\n        ),\n      });\n      return;\n    }\n    if (country === \"\") {\n      this.setState({\n        errorType: \"country\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Select your country</b>\n          </span>\n        ),\n      });\n      return;\n    }\n\n    if (designation === \"\") {\n      this.setState({\n        errorType: \"designation\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Designation should not be empty</b>\n          </span>\n        ),\n      });\n      return;\n    }\n\n    if (fields.length === 0) {\n      this.setState({\n        errorType: \"fields\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Select your fields</b>\n          </span>\n        ),\n      });\n      return;\n    }\n\n\n    // if (industry === \"\") {\n    //   this.setState({\n    //     errorType: \"industry\",\n    //     errorText: (\n    //       <span className=\"text-danger\">\n    //         <b>Select your industry</b>\n    //       </span>\n    //     ),\n    //   });\n    //   return;\n    // }\n\n    if (linkedIn === \"\") {\n      this.setState({\n        errorType: \"linkedIn\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Please enter social media url</b>\n          </span>\n        ),\n      });\n      return;\n    }\n    if (linkedIn !== \"\") {\n      let filter = /(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)/g;\n\n      if (!filter.test(linkedIn)) {\n        this.setState({\n          errorType: \"linkedIn\",\n          errorText: (\n            <span className=\"text-danger\">\n              <b> Please enter valid social media url</b>\n            </span>\n          ),\n        });\n        return;\n      }\n    }\n\n    if (selectedCalendar === null || !selectedCalendar.value) {\n      this.setState({\n        errorType: \"selectedCalendar\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Please select calendar name</b>\n          </span>\n        ),\n      });\n      return;\n    }\n\n    if (pricing && pricing.length !== 0 && pricing.find((i) => i.value == \"\")) {\n      this.setState({\n        errorType: \"pricing\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Please add price and unit</b>\n          </span>\n        ),\n      });\n      return;\n    }\n    if (pricing && pricing.length !== 0 && pricing.find((i) => i.unit == \"\")) {\n      this.setState({\n        errorType: \"pricing\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Please select unit</b>\n          </span>\n        ),\n      });\n      return;\n    }\n\n    if (skill === undefined) {\n      this.setState({\n        errorType: \"skill\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Select your skill</b>\n          </span>\n        ),\n      });\n      return;\n    }\n\n    if (expertise.length === 0) {\n      this.setState({\n        errorType: \"expertise\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Please enter your expert areas</b>\n          </span>\n        ),\n      });\n      return;\n    }\n    // if (role === \"\") {\n    //   this.setState({\n    //     errorType: \"role\",\n    //     errorText: (\n    //       <span className=\"text-danger\">\n    //         <b>Select your current role</b>\n    //       </span>\n    //     ),\n    //   });\n    //   return;\n    // }\n    if (about.length === 0) {\n      this.setState({\n        errorType: \"about\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Please add some information</b>\n          </span>\n        ),\n      });\n      return;\n    }\n    if (about.length === 1 && about[0].value === \"\") {\n      this.setState({\n        errorType: \"about\",\n        errorText: (\n          <span className=\"text-danger\">\n            <b>Please add some information</b>\n          </span>\n        ),\n      });\n      return;\n    }\n\n    if (!expert_id) {\n      this.callApiAddExpert();\n    } else {\n      this.callApiEditExpert();\n    }\n  };\n\n  callApiEditExpert = () => {\n    const expert_id = this.props && this.props.match.params.id;\n    const {\n      first_name,\n      last_name,\n      gender,\n      country,\n      designation,\n      fields,\n      role,\n      industry,\n      selectedCalendar,\n      profile_pic,\n      linkedIn,\n      about,\n      pricing,\n      skill,\n      expertise,\n      expertImage,\n      email,\n      contact,\n    } = this.state;\n    let aboutData = about.map((el) => {\n      return el.value;\n    });\n    let skillObj = [{ label: skill, values: expertise }];\n    const timeZone = moment.tz.guess(true);\n\n    let obj = {\n      id: expert_id,\n      first_name,\n      last_name,\n      gender,\n      country,\n      designation,\n      fields,\n      role,\n      industry,\n      skills: skillObj,\n      rates: pricing,\n      email,\n      contact_no: contact ? contact : \"\",\n      linkedIn,\n      calendar_id: selectedCalendar.value,\n\n      info: aboutData,\n      time_zone: timeZone,\n    };\n    if (expertImage) {\n      obj.profile_pic = expertImage;\n    }\n\n    this.setState({\n      loadiing: true,\n    });\n\n    this.props.editExpert(\"expert/update-profile\", obj, (value) => {\n      if (value.status === 200) {\n        NotificationManager.success(\"Expert edit successfully\", \"\", 1000);\n        this.props.history.push(\"/experts\");\n        this.setState({\n          loadiing: false,\n        });\n      }\n    });\n  };\n\n  callApiAddExpert = () => {\n\n    const {\n      first_name,\n      last_name,\n      email,\n      contact,\n      gender,\n      country,\n      designation,\n      fields,\n      role,\n      industry,\n      skill,\n      expertise,\n\n      linkedIn,\n      about,\n      pricing,\n      expertImage,\n      selectedCalendar,\n    } = this.state;\n    let aboutData = about.map((el) => {\n      return el.value;\n    });\n    const timeZone = moment.tz.guess(true);\n    let skillObj = [{ label: skill, values: expertise }];\n\n    let obj = {\n      first_name,\n      last_name,\n      gender,\n      country,\n      role,\n      industry,\n      skills: skillObj,\n      fields,\n      info: aboutData,\n      linkedIn,\n      designation,\n\n      rates: pricing,\n      time_zone: timeZone,\n      email,\n      contact_no: contact ? contact : \"\",\n      calendar_id: selectedCalendar.value,\n    };\n    if (expertImage) {\n      obj.profile_pic = expertImage;\n    }\n\n    this.setState({\n      loadiing: true,\n    });\n    this.props.addExpert(\"expert/create\", obj, (value) => {\n      if (value.status === 200) {\n        NotificationManager.success(\"Expert added successfully\", \"\", 1000);\n        this.props.history.push(\"/experts\");\n        this.setState({\n          loadiing: false,\n        });\n      }\n    });\n  };\n\n  callApiAddImage = (base64) => {\n    this.setState({\n      loadiing: true,\n    });\n\n    let obj = {\n      base64,\n    };\n    this.props.addImage(\"common/upload-image\", obj, (value) => {\n      if (value.status === 200) {\n        this.setState({\n          expertImage: value.data.url,\n          loadiing: false,\n        });\n      }\n    });\n  };\n  resetState = (e) => {\n    e.preventDefault();\n    this.setState({\n      first_name: \"\",\n      last_name: \"\",\n      email: \"\",\n      contact: \"\",\n      gender: \"\",\n      country: \"\",\n      designation: \"\",\n      expertise: [],\n      skill: \"\",\n      role: \"\",\n      industry: \"\",\n      fields: [],\n      about: [],\n      pricing: [],\n      errorType: \"\",\n      errorText: \"\",\n\n      linkedIn: \"\",\n      selectedCalendar: null,\n      calendarId: \"\",\n      selectedDate: new Date(),\n    });\n  };\n  handleBack = (e) => {\n    e.preventDefault();\n    this.props.history.push(\"/experts\");\n  };\n  onChange = (date) => {\n    this.setState({\n      selectedDate: date,\n    });\n  };\n  handlePlusButton = (e, type) => {\n    const { about, pricing } = this.state;\n\n    e.preventDefault();\n    e.stopPropagation();\n    if (type === \"about\") {\n      const newArr = [...about];\n      let newAbout = {\n        value: \"\",\n      };\n      newArr.push(newAbout);\n      this.setState({\n        about: newArr,\n      });\n    }\n    if (type === \"pricing\") {\n      const newArr = [...pricing];\n      let newPricing = {\n        value: \"\",\n      };\n      newArr.push(newPricing);\n      this.setState({\n        pricing: newArr,\n      });\n    }\n  };\n  inputAbout = (e, index) => {\n    let aboutToUpdate = this.state.about[index];\n    const newArray = [...this.state.about];\n    aboutToUpdate = {\n      ...aboutToUpdate,\n      value: e.target.value,\n    };\n\n    newArray[index] = aboutToUpdate;\n\n    this.clearError();\n    this.setState({ [e.target.name]: e.target.value, about: newArray });\n  };\n  inputPricing = (e, index) => {\n    let pricingToUpdate = this.state.pricing[index];\n    const newArray = [...this.state.pricing];\n    pricingToUpdate = {\n      ...pricingToUpdate,\n      value: e.target.value,\n    };\n\n    newArray[index] = pricingToUpdate;\n\n    this.clearError();\n    this.setState({ [e.target.name]: e.target.value, pricing: newArray });\n  };\n  handleCancel = (e, index, type) => {\n    e.preventDefault();\n    e.stopPropagation();\n    const { about, pricing } = this.state;\n    if (type === \"about\") {\n      const newArr = [...about];\n      newArr.splice(index, 1);\n      this.setState({\n        about: newArr,\n      });\n    }\n    if (type === \"pricing\") {\n      const newArr = [...pricing];\n      newArr.splice(index, 1);\n      this.setState({\n        pricing: newArr,\n      });\n    }\n  };\n  render() {\n    const expert_id = this.props && this.props.match.params.id;\n    const {\n      first_name,\n      last_name,\n      loadiing,\n      designation,\n      country,\n      expertise,\n      about,\n      fields,\n      gender,\n      expertImage,\n      role,\n      industry,\n      email,\n      contact,\n\n      selectedDate,\n      linkedIn,\n      selectedCalendar,\n      skill,\n      pricing,\n      calendarOptions,\n      unit,\n    } = this.state;\n\n    let fieldsVal = optionsFields.filter((item) => {\n      return fields.includes(item.label);\n    });\n    let expertiseVal = optionsExpertise.filter((item) => {\n      return expertise.includes(item.label);\n    });\n\n    return (\n      <CRow>\n        <CCol xs=\"12\" sm=\"12\">\n          <CCard className=\"expert-card\">\n            {loadiing && <Loader />}\n            <CCardHeader>\n              <CButton onClick={this.handleBack} className=\"backBtn\">\n                <img src={BackArrow} className=\"mr-2\" /> Back\n              </CButton>\n              <div className=\"update-profile-image\">\n                <img\n                  id=\"output\"\n                  src={expertImage ? expertImage : Avatar}\n                  alt=\"profile\"\n                  className=\"profile negative-margin\"\n                />\n                <div className=\"upload-box\">\n                  <Input\n                    type=\"file\"\n                    accept=\"image/*\"\n                    id=\"f-upload\"\n                    name=\"myImage\"\n                    onChange={this.uploadImage}\n                    className=\"d-none\"\n                  />\n                  <label htmlFor=\"f-upload\" class=\"custom-file-upload\">\n                    <div className=\"camera-btn\" onClick={this.uploadImage}>\n                      <img src={CameraIcon} alt=\"camera\" />\n                    </div>\n                  </label>\n                </div>\n              </div>\n            </CCardHeader>\n            <CCardBody>\n              <CForm\n                action=\"\"\n                method=\"post\"\n                encType=\"multipart/form-data\"\n                className=\"form-horizontal\"\n              >\n                <CFormGroup row className=\"my-0\">\n                  <CCol xs=\"6\">\n                    <CFormGroup>\n                      <CLabel htmlFor=\"first_name\">First Name</CLabel>\n                      <CLabel className=\"text-danger\">*</CLabel>\n                      <CInput\n                        id=\"first_name\"\n                        name=\"first_name\"\n                        placeholder=\"First Name\"\n                        onChange={this.inputHandler}\n                        value={first_name}\n                      />\n                      {this.errorShow(\"first_name\")}\n                    </CFormGroup>\n                  </CCol>\n                  <CCol xs=\"6\">\n                    <CFormGroup>\n                      <CLabel htmlFor=\"last_name\">Last Name</CLabel>\n                      <CLabel className=\"text-danger\">*</CLabel>\n                      <CInput\n                        id=\"last_name\"\n                        name=\"last_name\"\n                        placeholder=\"Last Name\"\n                        onChange={this.inputHandler}\n                        value={last_name}\n                      />\n                      {this.errorShow(\"last_name\")}\n                    </CFormGroup>\n                  </CCol>\n                </CFormGroup>\n\n                <CFormGroup row className=\"my-0\">\n                  <CCol xs=\"6\">\n                    <CFormGroup>\n                      <CLabel htmlFor=\"email\">Email</CLabel>\n                      <CLabel className=\"text-danger\">*</CLabel>\n                      <CInput\n                        type=\"email\"\n                        id=\"email\"\n                        name=\"email\"\n                        placeholder=\"Email\"\n                        onChange={this.inputHandler}\n                        value={email}\n                        disabled={expert_id}\n                      />\n                      {this.errorShow(\"email\")}\n                    </CFormGroup>\n                  </CCol>\n                  <CCol xs=\"6\">\n                    <CFormGroup>\n                      <CLabel htmlFor=\"contact\">Contact</CLabel>\n                      <CInput\n                        id=\"contact\"\n                        name=\"contact\"\n                        placeholder=\"Contact\"\n                        onChange={this.inputHandler}\n                        value={contact}\n                      />\n                      {this.errorShow(\"contact\")}\n                    </CFormGroup>\n                  </CCol>\n                </CFormGroup>\n\n                <CFormGroup row className=\"my-0\">\n                  <CCol xs=\"6\">\n                    <CFormGroup>\n                      <CLabel htmlFor=\"gender\">Gender</CLabel>\n                      <CLabel className=\"text-danger\">*</CLabel>\n                      <Select\n                        custom\n                        placeholder=\"Select gender\"\n                        name=\"gender\"\n                        id=\"gender\"\n                        onChange={(data) => this.handleChange(data, \"gender\")}\n                        value={gender ? { value: gender, label: gender } : null}\n                        options={optionsGender}\n                      ></Select>\n                      {this.errorShow(\"gender\")}\n                    </CFormGroup>\n                  </CCol>\n                  <CCol xs=\"6\">\n                    <CFormGroup>\n                      <CLabel htmlFor=\"country\">Country</CLabel>\n                      <CLabel className=\"text-danger\">*</CLabel>\n                      <Select\n                        custom\n                        name=\"country\"\n                        id=\"country\"\n                        name=\"country\"\n                        placeholder=\"Select Country\"\n                        onChange={(data) => this.handleChange(data, \"country\")}\n                        value={\n                          country ? { value: country, label: country } : null\n                        }\n                        options={optionsCountry}\n                      ></Select>\n                      {this.errorShow(\"country\")}\n                    </CFormGroup>\n                  </CCol>\n                </CFormGroup>\n\n                <CFormGroup row className=\"my-0\">\n                  <CCol xs=\"6\">\n                    <CFormGroup>\n                      <CLabel htmlFor=\"designation\">Designation</CLabel>\n                      <CLabel className=\"text-danger\">*</CLabel>\n\n                      <CInput\n                        id=\"designation\"\n                        name=\"designation\"\n                        placeholder=\"Designation\"\n                        onChange={this.inputHandler}\n                        value={designation}\n                      />\n                      {this.errorShow(\"designation\")}\n                    </CFormGroup>\n                  </CCol>\n\n                  <CCol xs=\"6\">\n                    <CFormGroup>\n                      <CLabel htmlFor=\"fields\">Fields</CLabel>\n                      <CLabel className=\"text-danger\">*</CLabel>\n\n                      <Select\n                        isMulti\n                        custom\n                        placeholder=\"Select Fields\"\n                        id=\"fields\"\n                        name=\"fields\"\n                        onChange={(data) => this.handleChange(data, \"fields\")}\n                        value={fieldsVal}\n                        options={optionsFields}\n                      ></Select>\n                      {this.errorShow(\"fields\")}\n                    </CFormGroup>\n                  </CCol>\n                </CFormGroup>\n\n\n\n                <CFormGroup row className=\"my-0\">\n                  <CCol xs=\"6\">\n                    <CFormGroup>\n                      <CLabel htmlFor=\"linkedIn\">Social Media URL</CLabel>\n                      <CLabel className=\"text-danger\">*</CLabel>\n                      <CInput\n                        name=\"linkedIn\"\n                        id=\"linkedIn\"\n                        onChange={this.inputHandler}\n                        placeholder=\"Social Media URL\"\n                        value={linkedIn}\n                      />\n                      {this.errorShow(\"linkedIn\")}\n                    </CFormGroup>\n                  </CCol>\n                  <CCol xs=\"6\">\n                    <CFormGroup>\n                      <CLabel htmlFor=\"selectedCalendar\">Calendar Name</CLabel>\n                      <CLabel className=\"text-danger\">*</CLabel>\n                      <Select\n                        custom\n                        name=\"selectedCalendar\"\n                        id=\"selectedCalendar\"\n                        name=\"selectedCalendar\"\n                        placeholder=\"Select Calendar Name\"\n                        onChange={(data) =>\n                          this.handleChange(data, \"calendarId\")\n                        }\n                        value={selectedCalendar}\n\n                        options={calendarOptions}\n                      ></Select>\n                      {this.errorShow(\"selectedCalendar\")}\n                    </CFormGroup>\n                  </CCol>\n                </CFormGroup>\n\n                <CFormGroup row className=\"my-0\">\n                  {pricing && pricing.length > 0 && (\n                    <CCol xs=\"12\">\n                      <CFormGroup>\n                        <CLabel htmlFor=\"pricing\">Pricing</CLabel>\n                        <CLabel className=\"text-danger\">*</CLabel>\n                        <div class=\"d-flex justify-content-between add-list\">\n                          <CLabel htmlFor=\"pricing\">\n                            Enter Price of each service\n                          </CLabel>\n                        </div>\n\n                        {pricing &&\n                          pricing.length > 0 &&\n                          pricing.map((el, index) => {\n                            return (\n                              <div className=\"d-flex align-items-center mb-2 \">\n                                {el.serviceName}\n                                <div className=\"d-flex w-100\">\n                                  <CInput\n                                    type=\"number\"\n                                    id={`pricing${el.id}`}\n                                    name={`pricing${el.id}`}\n                                    placeholder=\"Price\"\n                                    autoComplete={`pricing${el.id}`}\n                                    onChange={(e) => {\n                                      this.inputPricing(e, index);\n                                    }}\n                                    value={el.value}\n                                    className=\"w-50 mr-4\"\n                                  />\n                                  <Select\n                                    className=\"w-50\"\n                                    custom\n                                    name={`pricing${el.unit}`}\n                                    id={`pricing${el.unit}`}\n                                    placeholder=\"Select Unit\"\n                                    onChange={(data) =>\n                                      this.handleUnit(data, \"unit\", index)\n                                    }\n                                    value={\n                                      el.unit\n                                        ? { value: el.unit, label: el.unit }\n                                        : null\n                                    }\n                                    options={optionsUnit}\n                                  ></Select>\n                                </div>\n                              </div>\n                            );\n                          })}\n                        {this.errorShow(\"pricing\")}\n                      </CFormGroup>\n                    </CCol>\n                  )}\n                </CFormGroup>\n                <CFormGroup row className=\"my-0\">\n                  <CCol xs=\"6\">\n                    <CFormGroup>\n                      <CLabel htmlFor=\"skill\">Skill</CLabel>\n                      <CLabel className=\"text-danger\">*</CLabel>\n                      <Select\n                        custom\n                        id=\"skill\"\n                        placeholder=\"Select Skill\"\n                        name=\"skill\"\n                        onChange={(data) => this.handleChange(data, \"skill\")}\n                        value={skill ? { value: skill, label: skill } : null}\n                        options={optionsSkill}\n                      ></Select>\n                      {this.errorShow(\"skill\")}\n                    </CFormGroup>\n                  </CCol>\n                  <CCol xs=\"6\">\n                    {skill && (\n                      <CFormGroup>\n                        <CLabel htmlFor=\"expertise\">{skill}</CLabel>\n                        <CLabel className=\"text-danger\">*</CLabel>\n                        <Select\n                          isMulti\n                          custom\n                          id=\"expertise\"\n                          placeholder=\"Select areas of your expertise/specialities\"\n                          name=\"expertise\"\n                          value={expertiseVal}\n                          options={optionsExpertise}\n                          onChange={(e) => this.handleChange(e, \"expertise\")}\n                        ></Select>\n                        {this.errorShow(\"expertise\")}\n                      </CFormGroup>\n                    )}\n                  </CCol>\n                </CFormGroup>\n                <CFormGroup row className=\"my-0\">\n                  <CCol xs=\"6\">\n                    {/* <CFormGroup>\n                      <CLabel htmlFor=\"role\">Current Role</CLabel>\n                      <CLabel className=\"text-danger\">*</CLabel>\n\n                      <Select\n                        custom\n                        id=\"role\"\n                        placeholder=\"Select Role\"\n                        name=\"role\"\n                        onChange={(data) => this.handleChange(data, \"role\")}\n                        value={role ? { value: role, label: role } : null}\n                        options={optionsRole}\n                      ></Select>\n                      {this.errorShow(\"role\")}\n                    </CFormGroup> */}\n                  </CCol>\n\n                  <CCol xs=\"12\">\n                    <CFormGroup>\n                      <CLabel htmlFor=\"industry\">Organization</CLabel>\n\n                      <Select\n                        custom\n                        id=\"industry\"\n                        name=\"industry\"\n                        placeholder=\"Select Organization\"\n                        onChange={(data) => this.handleChange(data, \"industry\")}\n                        value={\n                          industry ? { value: industry, label: industry } : null\n                        }\n                        options={optionsIndustry}\n                        isClearable\n                      ></Select>\n                      {this.errorShow(\"industry\")}\n                    </CFormGroup>\n                  </CCol>\n                </CFormGroup>\n                <CFormGroup row className=\"my-0\">\n                  <CCol xs=\"12\">\n                    <CFormGroup>\n                      <CLabel htmlFor=\"about\">About</CLabel>\n                      <CLabel className=\"text-danger\">*</CLabel>\n                      <div\n                        onClick={(e) => this.handlePlusButton(e, \"about\")}\n                        class=\"d-flex justify-content-between add-list\"\n                      >\n                        <CLabel htmlFor=\"pros\">Add Information</CLabel>\n                        <button className=\"icon\">\n                          <img src={ADD} className=\"ml-3\" />\n                        </button>\n                      </div>\n                      {this.errorShow(\"about\")}\n                      {about &&\n                        about.length > 0 &&\n                        about.map((el, index) => {\n                          return (\n                            <div className=\"d-flex align-items-center mb-2 \">\n                              <CTextarea\n                                rows=\"6\"\n                                id={`about${index}`}\n                                name={`about${index}`}\n                                placeholder={`${index + 1}.`}\n                                autoComplete={`about${index}`}\n                                onChange={(e) => {\n                                  this.inputAbout(e, index);\n                                }}\n                                value={el.value}\n                              />\n                              <button\n                                className=\"icon\"\n                                onClick={(e) =>\n                                  this.handleCancel(e, index, \"about\")\n                                }\n                              >\n                                <img src={CANCEL} className=\"ml-3\" />\n                              </button>\n                            </div>\n                          );\n                        })}\n                    </CFormGroup>\n                  </CCol>\n                </CFormGroup>\n\n              </CForm>\n            </CCardBody>\n            <CCardFooter>\n              <div className=\"text-right\">\n                <CButton\n                  type=\"submit\"\n                  size=\"sm\"\n                  color=\"primary\"\n                  onClick={this.onSubmit}\n                >\n                  <CIcon name=\"cil-scrubber\" /> Submit\n                </CButton>\n                <CButton\n                  type=\"reset\"\n                  size=\"sm\"\n                  color=\"danger\"\n                  onClick={this.resetState}\n                  className=\"ml-2\"\n                >\n                  <CIcon name=\"cil-ban\" /> Reset\n                </CButton>\n              </div>\n            </CCardFooter>\n          </CCard>\n        </CCol>\n      </CRow>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {};\n};\nconst mapDispatchToProps = (dispatch) => {\n  return bindActionCreators(\n    {\n      addExpert,\n      addImage,\n      fetchOneExpert,\n      editExpert,\n      fetchService,\n    },\n    dispatch\n  );\n};\nexport default withRouter(\n  connect(mapStateToProps, mapDispatchToProps)(AddExpert)\n);\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/resources/AddResource.js",["274","275","276","277","278","279","280","281","282","283"],"/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/index.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/views/store/action.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/TheContent.js",["284"],"import React, { Suspense } from \"react\";\nimport { Redirect, Route, Switch } from \"react-router-dom\";\nimport { CContainer, CFade } from \"@coreui/react\";\n\nimport routes from \"../routes\";\n\nconst loading = (\n  <div className=\"pt-3 text-center\">\n    <div className=\"sk-spinner sk-spinner-pulse\"></div>\n  </div>\n);\n\nconst PrivateRoutes = ({ component: Component, ...rest }) => {\n  return (\n    <Route\n      {...rest}\n      render={(props) =>\n        rest.isAuthenticated ? (\n          <Component {...props} />\n        ) : (\n          <Redirect\n            to={{\n              pathname: \"/login\",\n            }}\n          />\n        )\n      }\n    />\n  );\n};\n\nconst TheContent = () => {\n  const isLoggedIn = localStorage.getItem(\"isLoggedIn\");\n\n  return (\n    <main className=\"c-main pt-4\">\n      <CContainer fluid>\n        <Suspense fallback={loading}>\n          <Switch>\n            {routes.map((route, idx) => {\n              return (\n                <PrivateRoutes\n                  key={idx}\n                  exact\n                  path={route.path}\n                  component={route.component}\n                  isAuthenticated={isLoggedIn}\n                />\n                // route.component && (\n                //   <Route\n                //     key={idx}\n                //     path={route.path}\n                //     exact={route.exact}\n                //     name={route.name}\n                //     render={(props) => (\n                //       <CFade>\n                //         <route.component {...props} />\n                //       </CFade>\n                //     )}\n                //   />\n                // )\n              );\n            })}\n            <Redirect to=\"/login\" />\n          </Switch>\n        </Suspense>\n      </CContainer>\n    </main>\n  );\n};\n\nexport default React.memo(TheContent);\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/TheHeaderDropdown.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/TheHeader.js",["285","286"],"import React, { useState } from \"react\";\n\nimport { withRouter } from \"react-router-dom\";\nimport {\n  CHeader,\n  CHeaderNav,\n  CSubheader,\n  CBreadcrumbRouter,\n  CToggler,\n} from \"@coreui/react\";\n\nimport routes from \"../routes\";\nimport { TheHeaderDropdown, TheSidebar } from \"./index\";\n\nconst TheHeader = (props) => {\n  const toggleSidebar = () => {\n    props.toggleSideBar();\n  };\n  const toggleSidebarMobile = () => {\n    props.toggleSideBar();\n  };\n  return (\n    <CHeader withSubheader>\n      <CToggler\n        inHeader\n        className=\"ml-md-3 d-lg-none\"\n        onClick={toggleSidebarMobile}\n      />\n      <CToggler\n        inHeader\n        className=\"ml-3 d-md-down-none\"\n        onClick={toggleSidebar}\n      />\n      <CHeaderNav className=\"d-md-down-none mr-auto\"></CHeaderNav>\n\n      <CHeaderNav className=\"px-3\">\n        <TheHeaderDropdown history={props.history} />\n      </CHeaderNav>\n      <CSubheader className=\"px-3 justify-content-between\">\n        <CBreadcrumbRouter\n          className=\"border-0 c-subheader-nav m-0 px-0 px-md-3\"\n          routes={routes}\n        />\n      </CSubheader>\n    </CHeader>\n  );\n};\n\nexport default withRouter(TheHeader);\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/TheSidebar.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/loader/index.js",["287","288"],"import React from \"react\";\nconst dots = [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}];\nexport default () => (\n  <>\n    <div className=\"loader-backdrop\" />\n    <div className=\"content-loader\">\n      <div className=\"dot-loader\">\n        {dots.map(({}, index) => (\n          <div key={index} />\n        ))}\n      </div>\n    </div>\n  </>\n);\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/store/types.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/routes.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/logo.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/_nav.js",["289"],"import { Planner, Users, Experts, Resources } from \"../containers/icons\";\n\nconst _nav = [\n  {\n    _tag: \"CSidebarNavItem\",\n    name: \"Users\",\n    to: \"/users\",\n\n    icon: <Users customClasses=\"c-sidebar-nav-icon\" />,\n  },\n\n  {\n    _tag: \"CSidebarNavItem\",\n    name: \"Experts\",\n    to: \"/experts\",\n\n    icon: <Experts customClasses=\"c-sidebar-nav-icon\" />,\n  },\n  {\n    _tag: \"CSidebarNavItem\",\n    name: \"Resources\",\n    to: \"/resources\",\n\n    icon: <Resources customClasses=\"c-sidebar-nav-icon\" />,\n  },\n  // {\n  //   _tag: \"CSidebarNavItem\",\n  //   name: \"Planner\",\n  //   to: \"/planner\",\n\n  //   icon: <Planner customClasses=\"c-sidebar-nav-icon\" />,\n  // },\n];\n\nexport default _nav;\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/resources/Resource.js",["290"],"/Volumes/DATA/Isha Kansal/pivot-admin/src/views/experts/Experts.js",["291","292","293","294","295","296"],"import React, { useState, useEffect } from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { withRouter } from \"react-router-dom\";\nimport Search from \"../../common/search\";\n\nimport moment from \"moment-timezone\";\nimport { CCard, CCardBody, CCol, CRow, CButton } from \"@coreui/react\";\nimport PaginationCommon from \"../../common/pagination\";\nimport { fetchExperts, deleteExpert, userStatus } from \"../store/action\";\nimport { connect } from \"react-redux\";\nimport { NotificationManager } from \"react-notifications\";\nimport { bindActionCreators } from \"redux\";\nimport Loader from \"../../loader\";\nimport CommonModal from \"../../common/commonModal\";\nimport Tooltip from \"../../common/toolTip\";\nimport EDIT from \"../../assets/icons/edit.svg\";\nimport DELETE from \"../../assets/icons/delete.svg\";\n\nimport ACTIVATE from \"../../assets/icons/activate.svg\";\nimport DEACTIVATE from \"../../assets/icons/deactivate.svg\";\nimport { Table } from \"reactstrap\";\n\nconst offsetLimit = 10;\n\nconst Experts = (props) => {\n  const history = useHistory();\n\n  const [page, setPage] = useState(1);\n  const [search, setSearch] = useState(\"\");\n  const [idExpert, setIdExpert] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [expertsDetails, setExpertsDetails] = useState([]);\n  const [modalOpen, setModalOpen] = useState(false);\n  const [count, setCount] = useState(0);\n  const [type, setType] = useState(\"\");\n  const [offset, setOffset] = useState(\"\");\n\n  const pageChange = async (newPage) => {\n    setLoading(true);\n    const diff = newPage - page;\n    if (newPage === 1 || diff === 1) {\n      props.fetchExperts(\n        `expert/all?offset=${\n          newPage === 1 ? \"\" : offset\n        }&limit=${offsetLimit}&search=${search}`,\n        (value) => {\n          const { experts, count } = value.data;\n          setLoading(false);\n          setExpertsDetails(experts);\n          setCount(count);\n          setOffset(experts.length && experts[experts.length - 1]._id);\n          setPage(newPage);\n        }\n      );\n    } else {\n      let totalLimit = 0;\n      if (diff > 1) {\n        totalLimit = offsetLimit * (diff - 1);\n      } else {\n        totalLimit = offsetLimit * (newPage - 1);\n      }\n      const experts = await new Promise((resolve) => {\n        return props.fetchExperts(\n          `expert/all?offset=${\n            diff > 0 ? offset : \"\"\n          }&limit=${totalLimit}&search=${search}`,\n          (value) => {\n            const { experts } = value.data;\n            resolve(experts);\n          }\n        );\n      });\n\n      if (experts) {\n        props.fetchExperts(\n          `expert/all?offset=${\n            experts[experts.length - 1]._id\n          }&limit=${offsetLimit}&search=${search}`,\n          (value) => {\n            const { experts, count } = value.data;\n            setLoading(false);\n            setExpertsDetails(experts);\n            setCount(count);\n            setOffset(experts.length && experts[experts.length - 1]._id);\n            setPage(newPage);\n          }\n        );\n      }\n    }\n  };\n\n  const addExpert = () => {\n    props.history.push(\"/addExpert\");\n  };\n  const handleSearch = (e) => {\n    setSearch(e.target.value);\n    setOffset(\"\");\n    setPage(1);\n  };\n\n  const editExpert = (e, item) => {\n    setIdExpert(item.id);\n    e.preventDefault();\n    e.stopPropagation();\n    props.history.push(`/editExpert/${item._id}`);\n  };\n\n  const onDelete = (e, type, id) => {\n    setIdExpert(id);\n    setType(type);\n    e.preventDefault();\n    e.stopPropagation();\n    setModalOpen(!modalOpen);\n    setPage(1);\n  };\n\n  const deleteExpert = (id) => {\n    if (type === \"deleteExpert\") {\n      if (idExpert === id) setModalOpen(false);\n      setLoading(true);\n      props.deleteExpert(`expert/delete?id=${id}`, (value) => {\n        if (value.status === 200) {\n          NotificationManager.success(\"Expert deleted successfully\", \"\", 1000);\n          setLoading(false);\n\n          callApiToFetchAllExperts(true);\n        }\n      });\n    } else {\n      if (idExpert === id) setModalOpen(false);\n      setLoading(true);\n      let obj = {\n        type: type,\n        id: id,\n        user_type: \"expert\",\n      };\n\n      props.userStatus(\"common/change-status\", obj, (value) => {\n        if (value.status === 200) {\n          NotificationManager.success(value.message, \"\", 1000);\n\n          callApiToFetchAllExperts(true);\n        }\n      });\n    }\n  };\n  useEffect(() => {\n    callApiToFetchAllExperts();\n  }, [search]);\n  const callApiToFetchAllExperts = (isDelete) => {\n    if (isDelete) {\n      setLoading(true);\n\n      props.fetchExperts(\n        `expert/all?offset=&limit=${offsetLimit}&search=${search}`,\n        (value) => {\n          if (value.status === 200) {\n            const { experts, count } = value.data;\n            setLoading(false);\n            setExpertsDetails(experts);\n            setCount(count);\n            setOffset(experts.length && experts[experts.length - 1]._id);\n          }\n        }\n      );\n    } else {\n      setLoading(true);\n\n      props.fetchExperts(\n        `expert/all?offset=${offset}&limit=${offsetLimit}&search=${search}`,\n        (value) => {\n          if (value.status === 200) {\n            const { experts, count } = value.data;\n            setLoading(false);\n            setExpertsDetails(experts);\n            setCount(count);\n            setOffset(experts.length && experts[experts.length - 1]._id);\n          }\n        }\n      );\n    }\n  };\n  const onBlock = (e, type, item) => {\n    setIdExpert(item._id);\n    setType(type);\n    e.preventDefault();\n    e.stopPropagation();\n    setModalOpen(!modalOpen);\n    setPage(1);\n  };\n\n  return (\n    <CRow>\n      <CCol xl={12}>\n        <form className=\"position-relative\">\n          <Search handleSearch={handleSearch} />\n          <div className=\"text-right resource-btn\">\n            <CButton block color=\"info\" onClick={addExpert}>\n              Add Expert\n            </CButton>\n          </div>\n        </form>\n        <CCard>\n          {loading && <Loader />}\n          <CCardBody>\n            <Table responsive>\n              <thead>\n                <tr>\n                  <th className=\"text-nowrap \">Name</th>\n\n                  <th>Email</th>\n\n                  <th>Designation</th>\n\n                  <th>Country</th>\n                  {/* <th>Role</th> */}\n                  <th>Created At</th>\n                  <th>Action</th>\n                </tr>\n              </thead>\n              <tbody>\n                {expertsDetails && expertsDetails.length === 0 && !loading && (\n                  <h3 className=\"text-center no-user-found\">\n                    No Experts Found!\n                  </h3>\n                )}\n                {expertsDetails &&\n                  expertsDetails.length > 0 &&\n                  expertsDetails.map((item, index) => {\n                    let istDate = new Date(item.createdAt);\n\n                    let createdAt = moment(istDate).format(\n                      \"DD-MM-YYYY, hh:mm a\"\n                    );\n                    return (\n                      <tr\n                        style={{ cursor: \"pointer\" }}\n                        onClick={() =>\n                          history.push({\n                            pathname: `/experts/${item._id}`,\n                          })\n                        }\n                      >\n                        <td>\n                          {\" \"}\n                          {item.first_name && item.last_name\n                            ? item.first_name + \" \" + item.last_name\n                            : \"-\"}\n                        </td>\n                        <td>{item.email ? item.email : \"-\"}</td>\n                        <td>{item.designation}</td>\n                        <td>{item.country}</td>\n                        {/* <td>{item.current_role}</td> */}\n                        <td>\n                          {\" \"}\n                          {createdAt !== \"Invalid date\" ? createdAt : \"-\"}\n                        </td>\n                        <td>\n                          <div className=\"d-flex align-items-center\">\n                            <button\n                              id={`edit-${index}`}\n                              className=\"icon\"\n                              onClick={(e) => editExpert(e, item)}\n                            >\n                              <img src={EDIT} className=\"ml-3\" />\n                            </button>\n                            <Tooltip placement=\"top\" target={`edit-${index}`}>\n                              Edit\n                            </Tooltip>\n                            <button\n                              className=\"icon\"\n                              onClick={(e) =>\n                                onDelete(e, \"deleteExpert\", item._id)\n                              }\n                              id={`delete-${index}`}\n                            >\n                              <img src={DELETE} className=\"ml-3\" />\n                            </button>\n                            <Tooltip placement=\"top\" target={`delete-${index}`}>\n                              Delete\n                            </Tooltip>\n                            {item.expert_status !== \"deactivated\" && (\n                              <>\n                                <button\n                                  onClick={(e) =>\n                                    onBlock(e, \"deactivate\", item)\n                                  }\n                                  className=\"icon\"\n                                  id={`deactivate-${index}`}\n                                >\n                                  <img src={DEACTIVATE} className=\"ml-3\" />\n                                </button>\n                                <Tooltip\n                                  placement=\"top\"\n                                  target={`deactivate-${index}`}\n                                >\n                                  Deactivate\n                                </Tooltip>\n                              </>\n                            )}\n\n                            {item.expert_status === \"deactivated\" && (\n                              <>\n                                <button\n                                  onClick={(e) => onBlock(e, \"activate\", item)}\n                                  className=\"icon\"\n                                  id={`activate-${index}`}\n                                >\n                                  <img src={ACTIVATE} className=\"ml-3\" />\n                                </button>\n                                <Tooltip\n                                  placement=\"top\"\n                                  target={`activate-${index}`}\n                                >\n                                  Activate\n                                </Tooltip>\n                              </>\n                            )}\n                          </div>\n                        </td>\n                      </tr>\n                    );\n                  })}\n              </tbody>\n            </Table>\n\n            <PaginationCommon\n              pageChange={pageChange}\n              count={count}\n              offsetLimit={offsetLimit}\n              page={page}\n              loading={loading}\n            />\n            <div>\n              {modalOpen && (\n                <CommonModal\n                  isOpen={modalOpen}\n                  toggle={(e) => onDelete(e)}\n                  block_delete={(e) => deleteExpert(e, idExpert)}\n                  id={idExpert}\n                  type={type}\n                />\n              )}\n            </div>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {};\n};\nconst mapDispatchToProps = (dispatch) => {\n  return bindActionCreators(\n    {\n      fetchExperts,\n      deleteExpert,\n      userStatus,\n    },\n    dispatch\n  );\n};\nexport default withRouter(\n  connect(mapStateToProps, mapDispatchToProps)(Experts)\n);\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/resources/Resources.js",["297","298","299","300"],"/Volumes/DATA/Isha Kansal/pivot-admin/src/containers/icons.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/Users.js",["301"],"import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Search from \"../../common/search\";\nimport moment from \"moment\";\n\nimport CommonModal from \"../../common/commonModal\";\nimport { NotificationManager } from \"react-notifications\";\nimport { Table } from \"reactstrap\";\nimport { CBadge, CButton, CCard, CCardBody, CCol, CRow } from \"@coreui/react\";\nimport Loader from \"../../loader\";\nimport { connect } from \"react-redux\";\n\nimport { bindActionCreators } from \"redux\";\nimport { withRouter } from \"react-router-dom\";\n\nimport { fetchUsers, userStatus } from \"../store/action\";\nimport PaginationCommon from \"../../common/pagination\";\nconst offsetLimit = 10;\nconst Users = (props) => {\n  const history = useHistory();\n\n  const [page, setPage] = useState(1);\n  const [search, setSearch] = useState(\"\");\n  const [modalOpen, setModalOpen] = useState(false);\n  const [type, setType] = useState(\"\");\n  const [offset, setOffset] = useState(\"\");\n  const [idUser, setIdUser] = useState(\"\");\n  const [usersDetails, setUsersDetails] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [count, setCount] = useState(0);\n\n  const pageChange = async (newPage) => {\n    setLoading(true);\n    const diff = newPage - page;\n    if (newPage === 1 || diff === 1) {\n      props.fetchUsers(\n        `user/all?offset=${\n          newPage === 1 ? \"\" : offset\n        }&limit=${offsetLimit}&search=${search}`,\n        (value) => {\n          const { users, count } = value.data;\n          setLoading(false);\n          setUsersDetails(users);\n          setCount(count);\n          setOffset(users.length && users[users.length - 1]._id);\n          setPage(newPage);\n        }\n      );\n    } else {\n      let totalLimit = 0;\n      if (diff > 1) {\n        totalLimit = offsetLimit * (diff - 1);\n      } else {\n        totalLimit = offsetLimit * (newPage - 1);\n      }\n      const users = await new Promise((resolve) => {\n        return props.fetchUsers(\n          `user/all?offset=${\n            diff > 0 ? offset : \"\"\n          }&limit=${totalLimit}&search=${search}`,\n          (value) => {\n            const { users } = value.data;\n            resolve(users);\n          }\n        );\n      });\n      if (users) {\n        props.fetchUsers(\n          `user/all?offset=${\n            users[users.length - 1]._id\n          }&limit=${offsetLimit}&search=${search}`,\n          (value) => {\n            const { users, count } = value.data;\n            setLoading(false);\n            setUsersDetails(users);\n            setCount(count);\n            setOffset(users.length && users[users.length - 1]._id);\n            setPage(newPage);\n          }\n        );\n      }\n    }\n  };\n  const handleSearch = (e) => {\n    setSearch(e.target.value);\n    setPage(1);\n    setOffset(\"\");\n  };\n\n  useEffect(() => {\n    callApiToFetchAllUsers();\n  }, [search]);\n\n  const callApiToFetchAllUsers = (isBlock) => {\n    if (isBlock) {\n      setLoading(true);\n\n      props.fetchUsers(\n        `user/all?offset=&limit=${offsetLimit}&search=${search}`,\n        (value) => {\n          const { users, count } = value.data;\n          setLoading(false);\n          setUsersDetails(users);\n          setCount(count);\n          setOffset(users.length && users[users.length - 1]._id);\n        }\n      );\n    } else {\n      setLoading(true);\n\n      props.fetchUsers(\n        `user/all?offset=${offset}&limit=${offsetLimit}&search=${search}`,\n        (value) => {\n          const { users, count } = value.data;\n          setLoading(false);\n          setUsersDetails(users);\n          setCount(count);\n          setOffset(users.length && users[users.length - 1]._id);\n        }\n      );\n    }\n  };\n\n  const getBadge = (status) => {\n    switch (status) {\n      case \"Verified\":\n        return \"success\";\n\n      case \"Not Verified\":\n        return \"danger\";\n      default:\n        return \"primary\";\n    }\n  };\n\n  const onBlock = (e, type, item) => {\n    setIdUser(item._id);\n    setType(type);\n    e.preventDefault();\n    e.stopPropagation();\n    setModalOpen(!modalOpen);\n  };\n  const blockUser = (id) => {\n    if (idUser === id) {\n      setModalOpen(false);\n\n      callApi(type, id);\n    }\n  };\n\n  const callApi = (type, id) => {\n    let obj = {\n      type: type,\n      id: id,\n      user_type: \"user\",\n    };\n\n    props.userStatus(\"common/change-status\", obj, (value) => {\n      if (value.status === 200) {\n        NotificationManager.success(value.message, \"\", 1000);\n        callApiToFetchAllUsers(true);\n      }\n    });\n  };\n\n  return (\n    <CRow>\n      <CCol xl={12}>\n        <Search handleSearch={handleSearch} />\n      </CCol>\n\n      <CCol xl={12}>\n        <CCard className=\"position-relative\">\n          {loading && <Loader />}\n\n          <CCardBody>\n            <Table\n              responsive\n              className={`table ${\n                usersDetails.length === 0 ? \"tableHeight\" : \"\"\n              }`}\n            >\n              <thead>\n                <tr>\n                  <th className=\"text-nowrap \">Name</th>\n\n                  <th>Email</th>\n                  <th>Status</th>\n\n                  <th>Country</th>\n                  <th>Created At</th>\n                  <th>Action</th>\n                </tr>\n              </thead>\n              <tbody>\n                {usersDetails && usersDetails.length === 0 && !loading && (\n                  <h3 className=\"text-center no-user-found\">No Users Found!</h3>\n                )}\n                {usersDetails &&\n                  usersDetails.length > 0 &&\n                  usersDetails.map((item, index) => {\n                    let istDate = new Date(item.createdAt);\n\n                    let createdAt = moment(istDate).format(\n                      \"DD-MM-YYYY, hh:mm a\"\n                    );\n\n                    return (\n                      <tr\n                        style={{ cursor: \"pointer\" }}\n                        onClick={() =>\n                          history.push({\n                            pathname: `/users/${item._id}`,\n                            state: usersDetails,\n                          })\n                        }\n                      >\n                        <td>\n                          {\" \"}\n                          {item.first_name && item.last_name\n                            ? item.first_name + \" \" + item.last_name\n                            : \"-\"}\n                        </td>\n                        <td>{item.email ? item.email : \"-\"}</td>\n                        <td>\n                          <CBadge\n                            color={getBadge(\n                              !item.is_verified ? \"Not Verified\" : \"Verified\"\n                            )}\n                          >\n                            {!item.is_verified ? \"Not Verified\" : \"Verified\"}\n                          </CBadge>\n                        </td>\n                        <td>{item.country ? item.country : \"-\"}</td>\n                        <td>\n                          {createdAt !== \"Invalid date\" ? createdAt : \"-\"}\n                        </td>\n                        <td>\n                          {item.user_status === \"blocked\" ? (\n                            <CButton\n                              onClick={(e) => onBlock(e, \"unblock\", item)}\n                              className=\"Unblock-btn block-btn\"\n                            >\n                              UnBlock\n                            </CButton>\n                          ) : item.user_status === \"activated\" ? (\n                            <div>\n                              <CButton\n                                onClick={(e) => onBlock(e, \"block\", item)}\n                                className=\"block-btn block-btn\"\n                              >\n                                Block\n                              </CButton>{\" \"}\n                            </div>\n                          ) : item.user_status === \"deactivated\" ? (\n                            <div>\n                              <CButton\n                                onClick={(e) => onBlock(e, \"block\", item)}\n                                className=\"block-btn block-btn\"\n                              >\n                                Block\n                              </CButton>\n                            </div>\n                          ) : (\n                            <CButton\n                              onClick={(e) => onBlock(e, \"block\", item)}\n                              className=\"block-btn block-btn\"\n                            >\n                              Block\n                            </CButton>\n                          )}\n                        </td>\n                      </tr>\n                    );\n                  })}\n              </tbody>\n            </Table>\n\n            <PaginationCommon\n              pageChange={pageChange}\n              count={count}\n              offsetLimit={offsetLimit}\n              page={page}\n              loading={loading}\n            />\n            <div>\n              {modalOpen && (\n                <CommonModal\n                  isOpen={modalOpen}\n                  toggle={(e) => onBlock(e, type, idUser)}\n                  block_delete={(e) => blockUser(e, idUser)}\n                  id={idUser}\n                  type={type}\n                />\n              )}\n            </div>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {};\n};\nconst mapDispatchToProps = (dispatch) => {\n  return bindActionCreators(\n    {\n      fetchUsers,\n      userStatus,\n    },\n    dispatch\n  );\n};\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Users));\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/User.js",["302","303","304","305","306"],"import React, { useState, useEffect } from \"react\";\nimport moment from \"moment\";\nimport UserPlanner from \"../users/UserPlanner\";\nimport UserExpertUsage from \"../users/UserExpertUsage\";\nimport UserResourceUsage from \"../users/UserResourceUsage\";\nimport Tabs from \"../../common/tabs\";\nimport {\n  CCard,\n  CCardBody,\n  CCol,\n  CRow,\n  CBadge,\n  CTabs,\n  CNavItem,\n  CNavLink,\n  CNav,\n  CTabContent,\n  CTabPane,\n} from \"@coreui/react\";\nimport Loader from \"../../loader\";\n\nimport { connect } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { withRouter } from \"react-router-dom\";\n\nimport { fetchOneUser } from \"../store/action\";\nconst User = (props) => {\n  const [user, setUser] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [appointments, setAppointments] = useState({});\n  const dispatch = useDispatch();\n  useEffect(() => {\n    setLoading(true);\n\n    const user_id = props && props.match.params.id;\n    dispatch(\n      fetchOneUser(`user?id=${user_id}`, (value) => {\n        setUser(value.data.user);\n        setAppointments(value.data.appointments);\n        setLoading(false);\n      })\n    );\n  }, []);\n\n  const getBadge = (status) => {\n    switch (status) {\n      case \"Verified\":\n        return \"success\";\n\n      case \"Not Verified\":\n        return \"danger\";\n      case \"Activated\":\n        return \"success\";\n\n      case \"Blocked\":\n        return \"danger\";\n      default:\n        return \"primary\";\n    }\n  };\n\n  let reasonForCareerChange =\n    user &&\n    user.reason_for_career_change &&\n    user.reason_for_career_change.join(\", \");\n\n  let istDate = new Date(user.createdAt);\n\n  let createdAt = moment(istDate).format(\"DD-MM-YYYY, hh:mm a\");\n\n  return (\n    <CRow>\n      <CCol lg={12}>\n        <CCard className=\"position-relative\">\n          {loading && <Loader />}\n\n          <CCardBody>\n            <CTabs>\n              <Tabs />\n              <CTabContent>\n                <CTabPane>\n                  {user && (\n                    <table className=\"table\">\n                      <tbody>\n                        {createdAt !== \"Invalid date\" && (\n                          <tr>\n                            <td>Created At</td>\n                            <td>\n                              <strong> {createdAt}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {!loading && (\n                          <tr>\n                            <td>Status</td>\n\n                            <td>\n                              <CBadge\n                                color={getBadge(\n                                  user.user_status === \"blocked\"\n                                    ? \"Blocked\"\n                                    : \"Activated\"\n                                )}\n                              >\n                                {user.user_status === \"blocked\"\n                                  ? \"Blocked\"\n                                  : \"Activated\"}\n                              </CBadge>\n                            </td>\n                          </tr>\n                        )}\n                        {!loading && (\n                          <tr>\n                            <td>UID</td>\n                            <td>\n                              <strong>{user._id}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {!loading && (\n                          <tr>\n                            <td>Email Verification</td>\n\n                            <td>\n                              <CBadge\n                                color={getBadge(\n                                  !user.is_verified\n                                    ? \"Not Verified\"\n                                    : \"Verified\"\n                                )}\n                              >\n                                {!user.is_verified\n                                  ? \"Not Verified\"\n                                  : \"Verified\"}\n                              </CBadge>\n                            </td>\n                          </tr>\n                        )}\n                        {user.first_name && (\n                          <tr>\n                            <td>First name</td>\n                            <td>\n                              <strong>{user.first_name}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {user.last_name && (\n                          <tr>\n                            <td>Last name</td>\n                            <td>\n                              <strong>{user.last_name}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {user.contact_no&&user.contact_no.value && (\n                          <tr>\n                            <td>Mobile</td>\n                            <td>\n                              <strong>\n                                {user.contact_no.value || user.contact_no}\n                              </strong>\n                            </td>\n                          </tr>\n                        )}\n                        {user.email && (\n                          <tr>\n                            <td>Email</td>\n                            <td>\n                              <strong>{user.email}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {user.gender && (\n                          <tr>\n                            <td>Gender</td>\n                            <td>\n                              <strong>{user.gender}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {user.current_role && (\n                          <tr>\n                            <td>Role</td>\n                            <td>\n                              <strong>{user.current_role}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {user.country && (\n                          <tr>\n                            <td>Country</td>\n                            <td>\n                              <strong>{user.country}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {user.industry && (\n                          <tr>\n                            <td>Industry</td>\n                            <td>\n                              <strong>{user.industry}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {user.full_time_work_experience && (\n                          <tr>\n                            <td>Work Experience</td>\n                            <td>\n                              <strong>{user.full_time_work_experience}</strong>\n                            </td>\n                          </tr>\n                        )}\n\n                        {reasonForCareerChange && (\n                          <tr>\n                            <td>Career Change Reason</td>\n                            <td>\n                              <strong>{reasonForCareerChange}</strong>\n                            </td>\n                          </tr>\n                        )}\n                      </tbody>\n                    </table>\n                  )}\n                </CTabPane>\n                <CTabPane>\n                  <UserPlanner />\n                </CTabPane>\n                <CTabPane>\n                  <UserExpertUsage />\n                </CTabPane>\n                <CTabPane>\n                  <UserResourceUsage />\n                </CTabPane>\n              </CTabContent>\n            </CTabs>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {};\n};\nconst mapDispatchToProps = (dispatch) => {\n  return bindActionCreators(\n    {\n      fetchOneUser,\n    },\n    dispatch\n  );\n};\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(User));\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/common/toolTip.js",["307"],"import React, { useState } from \"react\";\nimport { Tooltip } from \"reactstrap\";\n\nexport default ({ placement = \"left\", target, children }) => {\n  const [tooltipOpen, setTooltipOpen] = useState(false);\n\n  const toggle = () => setTooltipOpen(!tooltipOpen);\n\n  return (\n    <Tooltip\n      placement={placement}\n      isOpen={tooltipOpen}\n      target={target}\n      toggle={toggle}\n    >\n      {children}\n    </Tooltip>\n  );\n};\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/common/commonModal.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/store/index.js",["308","309"],"import { applyMiddleware, createStore, compose } from \"redux\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport createSagaMiddleware from \"redux-saga\";\n\nimport { rootReducer } from \"./reducers/index\";\nimport rootSaga from \"./sagas/index\";\nimport logger from \"redux-logger\";\nimport { isProduction } from \"../config\";\nconst persistConfig = {\n  debug: false,\n  key: \"root\",\n  keyPrefix: \"v.1\",\n  storage,\n};\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nexport const store = createStore(\n  persistedReducer,\n  compose(applyMiddleware(sagaMiddleware, logger))\n);\n\n// export const store = isProduction\n//   ? createStore(persistedReducer, compose(applyMiddleware(sagaMiddleware)))\n//   : createStore(\n//       persistedReducer,\n//       compose(applyMiddleware(sagaMiddleware, logger))\n//     );\n\nexport const persistor = persistStore(store);\n\nsagaMiddleware.run(rootSaga);\nexport default { store, persistor };\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/serviceWorker.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/store/sagas/index.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/store/reducers/index.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/polyfill.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/assets/icons/index.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/views/store/reducer.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/views/store/sagas.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/common/axios.js",["310"],"import axois from \"axios\";\nimport { config } from \"../config\";\nimport { NotificationManager } from \"react-notifications\";\nimport { Redirect } from \"react-router-dom\";\nexport const apiCallPost = async (url, data) => {\n  const authToken = localStorage.getItem(\"auth_token\");\n\n  let backendUrl = config.apiUrlInnow8;\n\n  let content = \"application/json\";\n\n  return await axois\n    .post(`${backendUrl}/${url}`, data, {\n      headers: {\n        \"Content-Type\": content,\n        Accept: \"application/json\",\n        Authorization: `Bearer ${authToken || \"\"}`,\n      },\n    })\n    .then((res) => {\n      if (res && res.data && res.data.status === 401) {\n        localStorage.clear();\n        localStorage.setItem(\"isLoggedIn\", false);\n        NotificationManager.info(res.data.message, \"\", 1000);\n        window.location = \"/#/login\";\n      }\n\n      return res;\n    });\n};\nexport const apiCallGet = async (url) => {\n  const authToken = localStorage.getItem(\"auth_token\");\n  let backendUrl = config.apiUrlInnow8;\n\n  return await axois\n    .get(`${backendUrl}/${url}`, {\n      headers: {\n        Accept: \"application/json\",\n        Authorization: `Bearer ${authToken || \"\"}`,\n      },\n    })\n    .then((res) => {\n      if (res && res.data && res.data.status === 401) {\n        localStorage.clear();\n        localStorage.setItem(\"isLoggedIn\", false);\n        NotificationManager.info(res.data.message, \"\", 1000);\n        window.location = \"/#/login\";\n      }\n\n      return res;\n    });\n};\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/config.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/common/stringFunction.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/views/resources/ResourcesFieldsData.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/views/experts/ExpertsFieldsData.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/views/experts/ExpertUserUsage.js",["311","312","313","314"],"import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { CCard, CCardBody, CCardHeader, CCol, CRow } from \"@coreui/react\";\nimport { Table } from \"reactstrap\";\n\nimport { fetchOneExpert, fetchUserExpert } from \"../store/action\";\nimport { connect } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { withRouter } from \"react-router-dom\";\nimport PaginationCommon from \"../../common/pagination\";\nimport Loader from \"../../loader\";\nimport Search from \"../../common/search\";\nconst offsetLimit = 10;\nconst ExpertUserUsage = (props) => {\n  const [expert, setExpert] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [appointments, setAppointments] = useState({});\n  const [search, setSearch] = useState(\"\");\n  const [offset, setOffset] = useState(\"\");\n  const [page, setPage] = useState(1);\n  const [count, setCount] = useState(0);\n  const history = useHistory();\n  const handleSearch = (e) => {\n    setSearch(e.target.value);\n    setPage(1);\n    setOffset(\"\");\n  };\n  const pageChange = (newPage) => {\n    setLoading(true);\n    const expert_id = props && props.match.params.id;\n\n    dispatch(\n      fetchUserExpert(\n        `appointment/all?id=${expert_id}&type=expert&offset=${newPage===1?\"\":offset}&limit=${offsetLimit}&search=${search}`,\n        (value) => {\n          const { appointments, count } = value.data;\n\n          setAppointments(appointments);\n          setLoading(false);\n          setCount(count);\n          setOffset(\n            appointments.length && appointments[appointments.length - 1]._id\n          );\n          setPage(newPage);\n        }\n      )\n    );\n  };\n  const dispatch = useDispatch();\n  useEffect(() => {\n    setLoading(true);\n\n    const expert_id = props && props.match.params.id;\n\n    dispatch(\n      fetchUserExpert(\n        `appointment/all?id=${expert_id}&type=expert&offset=${offset}&limit=${offsetLimit}&search=${search}`,\n        (value) => {\n          const { appointments, count } = value.data;\n\n          setAppointments(appointments);\n          setLoading(false);\n          setCount(count);\n          setOffset(\n            appointments.length && appointments[appointments.length - 1]._id\n          );\n        }\n      )\n    );\n  }, [search]);\n\n  return (\n    <CRow>\n      <CCol lg={12}>\n        <form>\n          <Search handleSearch={handleSearch} />\n          {!loading && appointments !== undefined && (\n            <div className=\"calls-with-experts\">\n              {!loading && <h5>Number of calls with users:{count}</h5>}\n            </div>\n          )}\n        </form>\n        <CCard className=\"position-relative\">\n          {loading && <Loader />}\n\n          <CCardBody>\n            <Table\n              responsive\n              className={`table ${\n                appointments && appointments.length === 0 ? \"tableHeight\" : \"\"\n              }`}\n            >\n              {appointments && appointments.length > 0 && (\n                <thead>\n                  <tr>\n                    <th className=\"text-nowrap \">Id</th>\n\n                    <th>Name</th>\n\n                    <th>Date & Time</th>\n                    <th>Payment Status</th>\n                    <th>Service</th>\n                    <th>Topics</th>\n                  </tr>\n                </thead>\n              )}\n              <tbody>\n                {appointments && appointments.length === 0 && (\n                  <h3 className=\"text-center no-user-found\">\n                    No Appointments Found!\n                  </h3>\n                )}\n                {appointments &&\n                  appointments.length > 0 &&\n                  appointments.map((item, index) => {\n                    let topics=item&&item.topics&&item.topics.join(\", \")\n                    return (\n                      <tr\n                        style={{ cursor: \"pointer\" }}\n                        onClick={() =>\n                          history.push({\n                            pathname: `/users/${item.user_id}`,\n                          })\n                        }\n                      >\n                        <td>{item.user_id}</td>\n\n                     \n\n                        <td>\n                          {\" \"}\n                          {item.user &&\n                          item.user.first_name &&\n                          item.user.last_name\n                            ? item.user.first_name +\n                              \" \" +\n                              item.user.last_name\n                            : \"-\"}\n                        </td>\n\n\n                        <td>\n                          {item.meeting\n                            ? `${item.meeting.date} & ${item.meeting.time}`\n                            : \"-\"}\n                        </td>\n                        <td>\n                          {item.payment_status === \"paid\"\n                            ? \"Completed\"\n                            : \"Pending\"}\n                        </td>\n                        <td>\n                          {item.meeting\n                            ? item.meeting.type\n                            : \"-\"}\n                        </td>\n                        <td>\n                        {topics?topics:\"-\"}\n                        </td>\n                      </tr>\n                    );\n                  })}\n              </tbody>\n            </Table>\n            {appointments && appointments.length > 0 && !loading && (\n              <PaginationCommon\n                pageChange={pageChange}\n                count={count}\n                offsetLimit={offsetLimit}\n                page={page}\n                loading={loading}\n              />\n            )}\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {};\n};\nconst mapDispatchToProps = (dispatch) => {\n  return bindActionCreators(\n    {\n      fetchOneExpert,\n      fetchUserExpert,\n    },\n    dispatch\n  );\n};\nexport default withRouter(\n  connect(mapStateToProps, mapDispatchToProps)(ExpertUserUsage)\n);\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/experts/Expert.js",["315","316"],"import React, { useState, useEffect } from \"react\";\nimport {\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CNavLink,\n  CNav,\n  CTabContent,\n  CTabPane,\n  CTabs,\n  CNavItem,\n  CBadge,\n  CButton,\n} from \"@coreui/react\";\nimport moment from \"moment\";\nimport ExpertUserUsage from \"../experts/ExpertUserUsage\";\nimport Loader from \"../../loader\";\n\nimport { connect } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { withRouter } from \"react-router-dom\";\nimport { fetchOneExpert } from \"../store/action\";\nconst Expert = (props) => {\n  const [expert, setExpert] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [appointments, setAppointments] = useState({});\n  const dispatch = useDispatch();\n  useEffect(() => {\n    setLoading(true);\n\n    const expert_id = props && props.match.params.id;\n    dispatch(\n      fetchOneExpert(`expert?id=${expert_id}`, (value) => {\n        setExpert(value.data.expert);\n        setAppointments(value.data.appointments);\n        setLoading(false);\n      })\n    );\n  }, []);\n\n  let istDate = new Date(expert && expert.createdAt);\n\n  let createdAt = moment(istDate).format(\"DD-MM-YYYY, hh:mm a\");\n  let fields =\n    expert && expert.expert_fields && expert.expert_fields.join(\", \");\n\n  let info = expert && expert.info && expert.info.join(\"\\r\\n\");\n\n  let skills =\n    expert &&\n    expert.skills &&\n    expert.skills[0] &&\n    expert.skills[0].values &&\n    expert.skills[0].values.join(\", \");\n\n  const getBadge = (status) => {\n    switch (status) {\n      case \"Deactivated\":\n        return \"danger\";\n\n      case \"Activated\":\n        return \"success\";\n\n      default:\n        return \"primary\";\n    }\n  };\n\n  let serviceName =\n    expert &&\n    expert.rates &&\n    expert.rates.map((item, index) => {\n      let length = expert.rates && expert.rates.length;\n\n      if (index === length - 1) {\n        return `${item.serviceName} and ${item.value} ${item.unit} \\n`;\n      } else {\n        return `${item.serviceName} and ${item.value} ${item.unit}, \\n`;\n      }\n    });\n\n  const onClick = () => {\n    const expert_id = props && props.match.params.id;\n    props.history.push(`/experts/${expert_id}/calls-with-users`);\n  };\n  const editExpert = (e, item) => {\n    // setIdExpert(item.id);\n    e.preventDefault();\n    e.stopPropagation();\n    props.history.push(`/editExpert/${item._id}`);\n  };\n  return (\n    <CRow>\n      <CCol lg={12}>\n        <CCard>\n          {loading && <Loader />}\n\n          <CCardBody>\n            <CTabs>\n              <div className=\"d-flex justify-content-between align-items-center\">\n                <CNav variant=\"tabs\">\n                  <CNavItem>\n                    <CNavLink>Expert Details</CNavLink>\n                  </CNavItem>\n                  <CNavItem>\n                    <CNavLink onClick={onClick}>Calls with Users</CNavLink>\n                  </CNavItem>\n                </CNav>\n                <div className=\"text-right\">\n                  <CButton\n                    block\n                    color=\"info\"\n                    className=\"btn-orange\"\n                    onClick={(e) => editExpert(e, expert)}\n                  >\n                    Edit Expert Details\n                  </CButton>\n                </div>\n              </div>\n\n              <CTabContent>\n                <CTabPane>\n                  {expert && (\n                    <table className=\"table\">\n                      <tbody>\n                        {createdAt !== \"Invalid date\" && (\n                          <tr>\n                            <td>Created At</td>\n                            <td>\n                              <strong> {createdAt}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {!loading && (\n                          <tr>\n                            <td>Status</td>\n\n                            <td>\n                              <CBadge\n                                color={getBadge(\n                                  expert.expert_status === \"deactivated\"\n                                    ? \"Deactivated\"\n                                    : \"Activated\"\n                                )}\n                              >\n                                {expert.expert_status === \"deactivated\"\n                                  ? \"Deactivated\"\n                                  : \"Activated\"}\n                              </CBadge>\n                            </td>\n                          </tr>\n                        )}\n                        {!loading && (\n                          <tr>\n                            <td>EID</td>\n                            <td>\n                              <strong>{expert._id}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {expert.profile_pic && (\n                          <tr>\n                            <td>Picture</td>\n                            <td>\n                              <img\n                                style={{\n                                  width: \"100px\",\n                                  height: \"100px\",\n                                  borderRadius: \"4px\",\n                                }}\n                                src={expert.profile_pic}\n                                alt=\"profile\"\n                              />\n                            </td>\n                          </tr>\n                        )}\n                        {expert.first_name && (\n                          <tr>\n                            <td>First name</td>\n                            <td>\n                              <strong>{expert.first_name}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {expert.last_name && (\n                          <tr>\n                            <td>Last name</td>\n                            <td>\n                              <strong>{expert.last_name}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {expert.email && (\n                          <tr>\n                            <td>Email</td>\n                            <td>\n                              <strong>{expert.email}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {expert.contact_no && (\n                          <tr>\n                            <td>Contact</td>\n                            <td>\n                              <strong>{expert.contact_no}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {expert.gender && (\n                          <tr>\n                            <td>Gender</td>\n                            <td>\n                              <strong>{expert.gender}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {expert.country && (\n                          <tr>\n                            <td>Country</td>\n                            <td>\n                              <strong>{expert.country}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {info && (\n                          <tr>\n                            <td>About</td>\n                            <td>\n                              <strong>{info}</strong>\n                            </td>\n                          </tr>\n                        )}\n\n                        {/* {expert.current_role && (\n                          <tr>\n                            <td>Current Role</td>\n                            <td>\n                              <strong>{expert.current_role}</strong>\n                            </td>\n                          </tr>\n                        )} */}\n                        {expert.industry && (\n                          <tr>\n                            <td>Organization</td>\n                            <td>\n                              <strong>{expert.industry}</strong>\n                            </td>\n                          </tr>\n                        )}\n\n                        {expert.designation && (\n                          <tr>\n                            <td>Designation</td>\n                            <td>\n                              <strong>{expert.designation}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {expert.linkedIn && (\n                          <tr>\n                            <td>Social Media URL</td>\n\n                            <td>\n                              <a href={expert.linkedIn ? expert.linkedIn : \"-\"}>\n                                {expert.linkedIn ? expert.linkedIn : \"-\"}\n                              </a>\n                            </td>\n                          </tr>\n                        )}\n                        {expert.calendar_id && (\n                          <tr>\n                            <td>Calendar Id</td>\n                            <td>\n                              <strong>{expert.calendar_id}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {serviceName && (\n                          <tr>\n                            <td>Service and its Rate</td>\n                            <td>\n                              <strong>{serviceName}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {expert.service && (\n                          <tr>\n                            <td>Service</td>\n                            <td>\n                              <strong>{expert.service}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {fields && (\n                          <tr>\n                            <td>Fields</td>\n                            <td>\n                              <strong>{fields}</strong>\n                            </td>\n                          </tr>\n                        )}\n                        {skills && (\n                          <tr>\n                            <td>Expertise</td>\n                            <td>\n                              <strong>{skills}</strong>\n                            </td>\n                          </tr>\n                        )}\n                      </tbody>\n                    </table>\n                  )}\n                </CTabPane>\n                <CTabPane>\n                  <ExpertUserUsage appointments={appointments} />\n                </CTabPane>\n              </CTabContent>\n            </CTabs>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {};\n};\nconst mapDispatchToProps = (dispatch) => {\n  return bindActionCreators(\n    {\n      fetchOneExpert,\n    },\n    dispatch\n  );\n};\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Expert));\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/UserPlanner.js",["317","318"],"import React, { useState, useEffect } from \"react\";\nimport Loader from \"../../loader\";\nimport { fetchOneUser } from \"../store/action\";\nimport { connect } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { withRouter } from \"react-router-dom\";\nimport moment from \"moment\";\nimport {\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CTabs,\n  CNavItem,\n  CNavLink,\n  CNav,\n  CTabContent,\n  CTabPane,\n} from \"@coreui/react\";\n\nimport Network from \"./planner/Network\";\nimport Explore from \"./planner/Explore\";\nimport Learn from \"./planner/Learn\";\nimport Prepare from \"./planner/Prepare\";\nimport Apply from \"./planner/Apply\";\n\nconst UserPlanner = (props) => {\n  const [user, setUser] = useState({});\n  const [plannerData, setPlannerData] = useState({});\n  const [loading, setLoading] = useState(false);\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    setLoading(true);\n    const user_id = props && props.match.params.id;\n    dispatch(\n      fetchOneUser(`user?id=${user_id}`, (value) => {\n        setUser(value.data.user);\n      \n        setPlannerData(value.data.planner);\n        setLoading(false);\n      })\n    );\n  }, []);\n  let istDate = new Date(plannerData && plannerData.createdAt);\n\n  let createdAt = moment(istDate).format(\"DD-MM-YYYY, hh:mm a\");\n \n  return (\n    <CRow>\n      <CCol lg={12}>\n        <CCard className=\"position-relative\">\n          {!loading && createdAt !== \"Invalid date\" && (\n            <CCardHeader>\n              <h5>Planner created at : {createdAt}</h5>\n            </CCardHeader>\n          )}\n          {loading && <Loader />}\n          <CCardBody>\n            <CTabs>\n              <CNav variant=\"tabs\">\n                <CNavItem>\n                  <CNavLink>Explore</CNavLink>\n                </CNavItem>\n                <CNavItem>\n                  <CNavLink>Network</CNavLink>\n                </CNavItem>\n                <CNavItem>\n                  <CNavLink>Learn</CNavLink>\n                </CNavItem>\n                <CNavItem>\n                  <CNavLink>Prepare</CNavLink>\n                </CNavItem>\n                <CNavItem>\n                  <CNavLink>Apply</CNavLink>\n                </CNavItem>\n              </CNav>\n              <CTabContent>\n                <CTabPane>\n                  <Explore explore={plannerData && plannerData.explore} loading={loading} />\n                </CTabPane>\n                <CTabPane>\n                  <Network network={plannerData && plannerData.network} />\n                </CTabPane>\n                <CTabPane>\n                  <Learn learn={plannerData && plannerData.learn} />\n                </CTabPane>\n                <CTabPane>\n                  <Prepare prepare={plannerData && plannerData.prepare} />\n                </CTabPane>\n                <CTabPane>\n                  <Apply apply={plannerData && plannerData.apply} />\n                </CTabPane>\n              </CTabContent>\n            </CTabs>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {};\n};\nconst mapDispatchToProps = (dispatch) => {\n  return bindActionCreators(\n    {\n      fetchOneUser,\n    },\n    dispatch\n  );\n};\nexport default withRouter(\n  connect(mapStateToProps, mapDispatchToProps)(UserPlanner)\n);\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/UserExpertUsage.js",["319","320","321"],"import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport PaginationCommon from \"../../common/pagination\";\nimport { CCard, CCardBody, CCol, CRow } from \"@coreui/react\";\nimport Search from \"../../common/search\";\nimport { Table } from \"reactstrap\";\n\nimport { fetchOneUser, fetchUserExpert } from \"../store/action\";\nimport { connect } from \"react-redux\";\nimport Loader from \"../../loader\";\nimport { useDispatch } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { withRouter } from \"react-router-dom\";\nconst offsetLimit = 10;\nconst UserExpertUsage = (props) => {\n  const dispatch = useDispatch();\n\n  const history = useHistory();\n  const [search, setSearch] = useState(\"\");\n  const [offset, setOffset] = useState(\"\");\n  const [page, setPage] = useState(1);\n  const [user, setUser] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [appointments, setAppointments] = useState({});\n  const [count, setCount] = useState(0);\n  useEffect(() => {\n    setLoading(true);\n\n    const user_id = props && props.match.params.id;\n\n    dispatch(\n      fetchUserExpert(\n        `appointment/all?id=${user_id}&type=user&offset=${offset}&limit=${offsetLimit}&search=${search}`,\n        (value) => {\n          const { appointments, count } = value.data;\n\n          setAppointments(appointments);\n          setLoading(false);\n          setCount(count);\n          setOffset(\n            appointments.length && appointments[appointments.length - 1]._id\n          );\n        }\n      )\n    );\n  }, [search]);\n  const handleSearch = (e) => {\n    setSearch(e.target.value);\n    setPage(1);\n    setOffset(\"\");\n  };\n\n  const pageChange = async (newPage) => {\n    setLoading(true);\n    const user_id = props && props.match.params.id;\n    const diff = newPage - page;\n    if (newPage === 1 || diff === 1) {\n      dispatch(\n        fetchUserExpert(\n          `appointment/all?id=${user_id}&type=user&offset=${\n            newPage === 1 ? \"\" : offset\n          }&limit=${offsetLimit}&search=${search}`,\n          (value) => {\n            const { appointments, count } = value.data;\n\n            setAppointments(appointments);\n            setLoading(false);\n            setCount(count);\n            setOffset(\n              appointments.length && appointments[appointments.length - 1]._id\n            );\n            setPage(newPage);\n          }\n        )\n      );\n    } else {\n      let totalLimit = 0;\n      if (diff > 1) {\n        totalLimit = offsetLimit * (diff - 1);\n      } else {\n        totalLimit = offsetLimit * (newPage - 1);\n      }\n      const appointments = await new Promise((resolve) => {\n        return dispatch(\n          fetchUserExpert(\n            `appointment/all?id=${user_id}&type=user&offset=${\n              diff > 0 ? offset : \"\"\n            }&limit=${totalLimit}&search=${search}`,\n            (value) => {\n              const { appointments } = value.data;\n              resolve(appointments);\n            }\n          )\n        );\n      });\n      if (appointments) {\n        dispatch(\n          fetchUserExpert(\n            `appointment/all?id=${user_id}&type=user&offset=${\n              appointments[appointments.length - 1]._id\n            }&limit=${offsetLimit}&search=${search}`,\n            (value) => {\n              const { appointments, count } = value.data;\n\n              setAppointments(appointments);\n              setLoading(false);\n              setCount(count);\n              setOffset(\n                appointments.length && appointments[appointments.length - 1]._id\n              );\n              setPage(newPage);\n            }\n          )\n        );\n      }\n    }\n  };\n\n  return (\n    <CRow>\n      <CCol lg={12}>\n        <form>\n          <Search handleSearch={handleSearch} />\n          {!loading && (\n            <div className=\"calls-with-experts\">\n              {!loading && appointments !== undefined && (\n                <h5>\n                  Number of calls with experts:<span>{count}</span>\n                </h5>\n              )}\n            </div>\n          )}\n        </form>\n        <CCard className=\"position-relative\">\n          {loading && <Loader />}\n\n          <CCardBody>\n            <Table\n              responsive\n              className={`table ${\n                appointments.length === 0 ? \"tableHeight\" : \"\"\n              }`}\n            >\n              {appointments && appointments.length > 0 && (\n                <thead>\n                  <tr>\n                    <th className=\"text-nowrap \">Id</th>\n\n                    <th>Name</th>\n\n                    <th>Date & Time</th>\n                    <th>Payment Status</th>\n                    <th>Service</th>\n                    <th>Topics</th>\n                  </tr>\n                </thead>\n              )}\n              <tbody>\n                {appointments && appointments.length === 0 && (\n                  <h3 className=\"text-center no-user-found\">\n                    No Appointments Found!\n                  </h3>\n                )}\n                {appointments &&\n                  appointments.length > 0 &&\n                  appointments.map((item, index) => {\n                    let topics = item && item.topics && item.topics.join(\", \");\n                    return (\n                      <tr\n                        style={{ cursor: \"pointer\" }}\n                        onClick={() =>\n                          history.push({\n                            pathname: `/experts/${item.expert_id}`,\n                          })\n                        }\n                      >\n                        <td>{item.expert_id}</td>\n                        <td>\n                          {\" \"}\n                          {item.expert &&\n                          item.expert.first_name &&\n                          item.expert.last_name\n                            ? item.expert.first_name +\n                              \" \" +\n                              item.expert.last_name\n                            : \"-\"}\n                        </td>\n\n                        <td>\n                          {item.meeting\n                            ? `${item.meeting.date} & ${item.meeting.time}`\n                            : \"-\"}\n                        </td>\n\n                        <td>\n                          {item.payment_status === \"paid\"\n                            ? \"Completed\"\n                            : \"Pending\"}\n                        </td>\n                        <td>{item.meeting ? item.meeting.type : \"-\"}</td>\n                        <td>{topics ? topics : \"-\"}</td>\n                      </tr>\n                    );\n                  })}\n              </tbody>\n            </Table>\n\n            <PaginationCommon\n              pageChange={pageChange}\n              count={count}\n              offsetLimit={offsetLimit}\n              page={page}\n              loading={loading}\n            />\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {};\n};\nconst mapDispatchToProps = (dispatch) => {\n  return bindActionCreators(\n    {\n      fetchOneUser,\n      fetchUserExpert,\n    },\n    dispatch\n  );\n};\nexport default withRouter(\n  connect(mapStateToProps, mapDispatchToProps)(UserExpertUsage)\n);\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/planner/Planner.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/UserResourceUsage.js",["322","323"],"import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport PaginationCommon from \"../../common/pagination\";\nimport Search from \"../../common/search\";\nimport Loader from \"../../loader\";\n\nimport { Table } from \"reactstrap\";\nimport { bindActionCreators } from \"redux\";\nimport { withRouter } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport { connect } from \"react-redux\";\nimport { fetchOneUser, fetchUserResource } from \"../store/action\";\nimport { CCard, CCardBody, CCol, CRow } from \"@coreui/react\";\n\nconst offsetLimit = 10;\nconst UserResourceUsage = (props) => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const [search, setSearch] = useState(\"\");\n  const [offset, setOffset] = useState(\"\");\n  const [page, setPage] = useState(1);\n  const [user, setUser] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [resources, setResources] = useState({});\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    setLoading(true);\n\n    const user_id = props && props.match.params.id;\n\n    dispatch(\n      fetchUserResource(\n        `user/used-resources?user_id=${user_id}&offset=${offset}&limit=${offsetLimit}&search=${search}`,\n        (value) => {\n          const { resources, count, user } = value.data;\n          setUser(user);\n          setResources(resources);\n          setLoading(false);\n          setCount(count);\n          setOffset(resources.length && resources[resources.length - 1]._id);\n        }\n      )\n    );\n  }, [search]);\n\n  const handleSearch = (e) => {\n    setSearch(e.target.value);\n    setPage(1);\n    setOffset(\"\");\n  };\n  const pageChange = async (newPage) => {\n    const user_id = props && props.match.params.id;\n    const diff = newPage - page;\n    if (newPage === 1 || diff === 1) {\n      dispatch(\n        fetchUserResource(\n          `user/used-resources?user_id=${user_id}&offset=${\n            newPage === 1 ? \"\" : offset\n          }&limit=${offsetLimit}&search=${search}`,\n          (value) => {\n            const { resources, count, user } = value.data;\n            setUser(user);\n            setResources(resources);\n            setLoading(false);\n            setCount(count);\n            setOffset(resources.length && resources[resources.length - 1]._id);\n            setPage(newPage);\n          }\n        )\n      );\n    } else {\n      let totalLimit = 0;\n      if (diff > 1) {\n        totalLimit = offsetLimit * (diff - 1);\n      } else {\n        totalLimit = offsetLimit * (newPage - 1);\n      }\n      const resources = await new Promise((resolve) => {\n        return dispatch(\n          fetchUserResource(\n            `user/used-resources?user_id=${user_id}&offset=${\n              diff > 0 ? offset : \"\"\n            }&limit=${totalLimit}&search=${search}`,\n            (value) => {\n              const { resources, user } = value.data;\n              setUser(user);\n              resolve(resources);\n            }\n          )\n        );\n      });\n      if (resources) {\n        dispatch(\n          fetchUserResource(\n            `user/used-resources?user_id=${user_id}&offset=${\n              resources[resources.length - 1]._id\n            }&limit=${offsetLimit}&search=${search}`,\n            (value) => {\n              const { resources, count, user } = value.data;\n              setUser(user);\n              setResources(resources);\n              setLoading(false);\n              setCount(count);\n              setOffset(\n                resources.length && resources[resources.length - 1]._id\n              );\n              setPage(newPage);\n            }\n          )\n        );\n      }\n    }\n  };\n  return (\n    <CRow>\n      <CCol lg={12}>\n        <form>\n          <Search handleSearch={handleSearch} />\n          {!loading && resources !== undefined && (\n            <div className=\"calls-with-experts\">\n              {!loading && <h5>Number of resources used:{count}</h5>}\n            </div>\n          )}\n        </form>\n        <CCard className=\"position-relative\">\n          {loading && <Loader />}\n\n          <CCardBody>\n            <Table\n              responsive\n              className={`table ${\n                resources && resources.length === 0 ? \"tableHeight\" : \"\"\n              }`}\n            >\n              {resources && resources.length > 0 && (\n                <thead>\n                  <tr>\n                    <th className=\"text-nowrap \">ID</th>\n                    <th>Resources</th>\n\n                    {/* <th>Name</th>\n\n                    <th>Format</th>\n                    <th>Price</th> */}\n                    <th>Website Links</th>\n                  </tr>\n                </thead>\n              )}\n              <tbody>\n                {resources && resources.length === 0 && !loading && (\n                  <h3 className=\"text-center no-user-found\">\n                    No Resources Found!\n                  </h3>\n                )}\n\n                {resources &&\n                  resources.length > 0 &&\n                  resources.map((item, index) => {\n                    return (\n                      <tr\n                        style={{ cursor: \"pointer\" }}\n                        onClick={() =>\n                          history.push({\n                            pathname: `/resources/${item._id}`,\n                          })\n                        }\n                      >\n                        <td>{item._id}</td>\n                        <td> {item.title ? item.title : \"-\"}</td>\n\n                        {/* <td>\n                          {\" \"}\n                          {item.resource_format ? item.resource_format : \"-\"}\n                        </td>\n                        <td>\n                          {item.price ? item.price.value || item.price : \"-\"}\n                        </td> */}\n\n                        <td>\n                          <a href={item.website ? item.website : \"-\"}>\n                            {item.website ? item.website : \"-\"}\n                          </a>\n                        </td>\n                      </tr>\n                    );\n                  })}\n              </tbody>\n            </Table>\n\n            <PaginationCommon\n              pageChange={pageChange}\n              count={count}\n              offsetLimit={offsetLimit}\n              page={page}\n              loading={loading}\n            />\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {};\n};\nconst mapDispatchToProps = (dispatch) => {\n  return bindActionCreators(\n    {\n      fetchOneUser,\n      fetchUserResource,\n    },\n    dispatch\n  );\n};\nexport default withRouter(\n  connect(mapStateToProps, mapDispatchToProps)(UserResourceUsage)\n);\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/common/pagination.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/common/search.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/planner/Learn.js",["324","325","326","327","328","329","330","331","332","333","334","335","336"],"import React, { useState } from \"react\";\nimport Loader from \"../../../loader\";\nimport Search from \"../../../common/search\";\nimport PaginationCommon from \"../../../common/pagination\";\nimport {\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CBadge,\n  CTabs,\n  CNavItem,\n  CNavLink,\n  CNav,\n  CTabContent,\n  CTabPane,\n  CButton,\n  CCollapse,\n} from \"@coreui/react\";\nimport { Table } from \"reactstrap\";\nconst Learn = (props) => {\n  const { learn } = props;\n  const [accordion, setAccordion] = useState(0);\n  const getBadge = (status) => {\n    switch (status) {\n      case \"Done\":\n        return \"green\";\n\n      case \"To-Do\":\n        return \"orange\";\n      case \"Doing\":\n        return \"yellow\";\n      case \"Ask an Expert\":\n        return \"purple\";\n      case \"Not Applicable\":\n        return \"gray\";\n      default:\n        return \"primary\";\n    }\n  };\n  const handleSearch = (e) => {\n    // setSearch(e.target.value);\n    // setOffset(\"\");\n    // setPage(1);\n  };\n  const pageChange = (newPage) => {};\n  let skillsData = learn && learn.skills && learn.skills.data;\n  let learning_platformsData =\n    learn && learn.learning_platforms && learn.learning_platforms.data;\n  let experiential_learningData =\n    learn && learn.experiential_learning && learn.experiential_learning.data;\n\n  if (!learn) {\n    return (\n      <div className=\"no-records-planner\">\n        <h5 className=\"mb-0\">\n          <i>No Records Found</i>\n        </h5>\n      </div>\n    );\n  } else {\n    return (\n      <div id=\"accordion\">\n        <CCard className=\"mb-0\">\n          <CCardHeader id=\"headingOne\">\n            <CButton\n              block\n              color=\"link\"\n              className=\"text-left m-0 p-0\"\n              onClick={() => setAccordion(accordion === 0 ? null : 0)}\n            >\n              <h5 className=\"m-0 p-0\">Skills</h5>\n            </CButton>\n          </CCardHeader>\n          <CCollapse show={accordion === 0}>\n            <CCardBody>\n              <CCardHeader>\n                <table className=\"table\">\n                  <tbody>\n                    <tr>\n                      <td>Status</td>\n                      <td>\n                        <CBadge\n                          color={getBadge(\n                            learn && learn.skills && learn.skills.status\n                          )}\n                        >\n                          {learn && learn.skills && learn.skills.status}\n                        </CBadge>{\" \"}\n                      </td>\n                    </tr>\n                  </tbody>\n                </table>\n\n                {/* <Search handleSearch={handleSearch} /> */}\n              </CCardHeader>\n              <Table responsive>\n                <thead>\n                  <th className=\"text-nowrap \">ID</th>\n                  <th>My Hard Skills</th>\n\n                  <th>My Soft Skills</th>\n                  <th>Required Hard Skills</th>\n\n                  <th>Required Soft Skills</th>\n                </thead>\n                {skillsData &&\n                  skillsData.length > 0 &&\n                  skillsData.map((item) => {\n                    return (\n                      <tbody>\n                        <td>{item.id ? item.id : \"-\"}</td>\n                        <td>\n                          {item.fields[0].value ? item.fields[0].value : \"-\"}\n                        </td>\n                        <td>\n                          {item.fields[1].value ? item.fields[1].value : \"-\"}\n                        </td>\n                        <td>\n                          {item.fields[2].value ? item.fields[2].value : \"-\"}\n                        </td>\n                        <td>\n                          {item.fields[3].value ? item.fields[3].value : \"-\"}\n                        </td>\n                      </tbody>\n                    );\n                  })}\n                {skillsData && skillsData.length === 0 && (\n                  <div className=\"no-records\">\n                    <h5 className=\"mb-0\">\n                      <i>No Records Found</i>\n                    </h5>\n                  </div>\n                )}\n              </Table>\n              {/* <PaginationCommon pageChange={pageChange} /> */}\n            </CCardBody>\n          </CCollapse>\n        </CCard>\n        <CCard className=\"mb-0\">\n          <CCardHeader id=\"headingTwo\">\n            <CButton\n              block\n              color=\"link\"\n              className=\"text-left m-0 p-0\"\n              onClick={() => setAccordion(accordion === 1 ? null : 1)}\n            >\n              <h5 className=\"m-0 p-0\">Learning Platforms</h5>\n            </CButton>\n          </CCardHeader>\n          <CCollapse show={accordion === 1}>\n            <CCardBody>\n              <CCardHeader>\n                <table className=\"table\">\n                  <tbody>\n                    <tr>\n                      <td>Status</td>\n                      <td>\n                        {\" \"}\n                        <CBadge\n                          color={getBadge(\n                            learn &&\n                              learn.learning_platforms &&\n                              learn.learning_platforms.status\n                          )}\n                        >\n                          {learn &&\n                            learn.learning_platforms &&\n                            learn.learning_platforms.status}\n                        </CBadge>{\" \"}\n                      </td>\n                    </tr>\n                  </tbody>\n                </table>\n\n                {/* <Search handleSearch={handleSearch} /> */}\n              </CCardHeader>\n              <Table responsive>\n                <thead>\n                  <th className=\"text-nowrap \">ID</th>\n                  <th>Skills</th>\n\n                  <th>Platform Name</th>\n                  <th>Course Topic</th>\n                  <th>Course Type</th>\n                </thead>\n                {learning_platformsData &&\n                  learning_platformsData.length > 0 &&\n                  learning_platformsData.map((item) => {\n                    return (\n                      <tbody>\n                        <td>{item.id ? item.id : \"-\"}</td>\n                        <td>\n                          {item.fields[0].value ? item.fields[0].value : \"-\"}\n                        </td>\n                        <td>\n                          {item.fields[1].value ? item.fields[1].value : \"-\"}\n                        </td>\n                        <td>\n                          {item.fields[2].value ? item.fields[2].value : \"-\"}\n                        </td>\n                        <td>\n                          {item.fields[3].value ? item.fields[3].value : \"-\"}\n                        </td>\n                      </tbody>\n                    );\n                  })}\n                {learning_platformsData && learning_platformsData.length === 0 && (\n                  <div className=\"no-records\">\n                    <h5 className=\"mb-0\">\n                      <i>No Records Found</i>\n                    </h5>\n                  </div>\n                )}\n              </Table>\n              {/* <PaginationCommon pageChange={pageChange} /> */}\n            </CCardBody>\n          </CCollapse>\n        </CCard>\n        <CCard className=\"mb-0\">\n          <CCardHeader id=\"headingThree\">\n            <CButton\n              block\n              color=\"link\"\n              className=\"text-left m-0 p-0\"\n              onClick={() => setAccordion(accordion === 2 ? null : 2)}\n            >\n              <h5 className=\"m-0 p-0\">Experimental Learning</h5>\n            </CButton>\n          </CCardHeader>\n          <CCollapse show={accordion === 2}>\n            <CCardBody>\n              <CCardHeader>\n                <table className=\"table\">\n                  <tbody>\n                    <tr>\n                      <td>Status</td>\n                      <td>\n                        {\" \"}\n                        <CBadge\n                          color={getBadge(\n                            learn &&\n                              learn.experiential_learning &&\n                              learn.experiential_learning.status\n                          )}\n                        >\n                          {learn &&\n                            learn.experiential_learning &&\n                            learn.experiential_learning.status}\n                        </CBadge>{\" \"}\n                      </td>\n                    </tr>\n                  </tbody>\n                </table>\n\n                {/* <Search handleSearch={handleSearch} /> */}\n              </CCardHeader>\n              <Table responsive>\n                <thead>\n                  <th className=\"text-nowrap \">ID</th>\n                  <th>Skills</th>\n\n                  <th>Organization</th>\n                  <th>Role</th>\n                  <th>Role Type</th>\n                </thead>\n                {experiential_learningData &&\n                  experiential_learningData.length > 0 &&\n                  experiential_learningData.map((item) => {\n                    return (\n                      <tbody>\n                        <td>{item.id ? item.id : \"-\"}</td>\n                        <td>\n                          {item.fields[0].value ? item.fields[0].value : \"-\"}\n                        </td>\n                        <td>\n                          {item.fields[1].value ? item.fields[1].value : \"-\"}\n                        </td>\n                        <td>\n                          {item.fields[2].value ? item.fields[2].value : \"-\"}\n                        </td>\n                        <td>\n                          {item.fields[3].value ? item.fields[3].value : \"-\"}\n                        </td>\n                      </tbody>\n                    );\n                  })}\n                {experiential_learningData &&\n                  experiential_learningData.length === 0 && (\n                    <div className=\"no-records\">\n                      <h5 className=\"mb-0\">\n                        <i>No Records Found</i>\n                      </h5>\n                    </div>\n                  )}\n              </Table>\n              {/* <PaginationCommon pageChange={pageChange} /> */}\n            </CCardBody>\n          </CCollapse>\n        </CCard>\n      </div>\n    );\n  }\n};\nexport default Learn;\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/planner/Apply.js",["337","338","339","340","341","342","343","344","345","346","347","348","349"],"import React, { useState } from \"react\";\nimport Loader from \"../../../loader\";\nimport moment from \"moment\";\nimport Search from \"../../../common/search\";\nimport PaginationCommon from \"../../../common/pagination\";\nimport {\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CBadge,\n  CTabs,\n  CNavItem,\n  CNavLink,\n  CNav,\n  CTabContent,\n  CTabPane,\n  CButton,\n  CCollapse,\n} from \"@coreui/react\";\nimport { Table } from \"reactstrap\";\nconst Apply = (props) => {\n  const { apply } = props;\n  const [accordion, setAccordion] = useState(0);\n  const getBadge = (status) => {\n    switch (status) {\n      case \"Done\":\n        return \"green\";\n\n      case \"To-Do\":\n        return \"orange\";\n      case \"Doing\":\n        return \"yellow\";\n      case \"Ask an Expert\":\n        return \"purple\";\n      case \"Not Applicable\":\n        return \"gray\";\n      default:\n        return \"primary\";\n    }\n  };\n  const handleSearch = (e) => {\n    // setSearch(e.target.value);\n    // setOffset(\"\");\n    // setPage(1);\n  };\n  const pageChange = (newPage) => {};\n  let job_application_trackerData =\n    apply &&\n    apply.job_application_tracker &&\n    apply.job_application_tracker.data;\n\n  if (!apply) {\n    return (\n      <div className=\"no-records-planner\">\n        <h5 className=\"mb-0\">\n          <i>No Records Found</i>\n        </h5>\n      </div>\n    );\n  }\n\n  return (\n    <div id=\"accordion\">\n      <CCard className=\"mb-0\">\n        <CCardHeader id=\"headingOne\">\n          <CButton\n            block\n            color=\"link\"\n            className=\"text-left m-0 p-0\"\n            onClick={() => setAccordion(accordion === 0 ? null : 0)}\n          >\n            <h5 className=\"m-0 p-0\">Job Application Tracker</h5>\n          </CButton>\n        </CCardHeader>\n        <CCollapse show={accordion === 0}>\n          <CCardBody>\n            <CCardHeader>\n              <table className=\"table\">\n                <tbody>\n                  <tr>\n                    <td>Status</td>\n                    <td>\n                      {\" \"}\n                      <CBadge\n                        color={getBadge(\n                          apply &&\n                            apply.job_application_tracker &&\n                            apply.job_application_tracker.status\n                        )}\n                      >\n                        {apply &&\n                          apply.job_application_tracker &&\n                          apply.job_application_tracker.status}\n                      </CBadge>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n\n              {/* <Search handleSearch={handleSearch} /> */}\n            </CCardHeader>\n            <Table responsive style={{ minHeight: \"110px\" }}>\n              <thead>\n                <th className=\"text-nowrap \">ID</th>\n                <th>Company</th>\n\n                <th>Position</th>\n                <th>Location</th>\n\n                {/* <th>Application Deadline</th> */}\n                <th>Date Applied</th>\n                <th>Job Post URL</th>\n                <th>Pros</th>\n                <th>Cons</th>\n                <th>Contact's Name</th>\n                <th>Contact's Position</th>\n                <th>Contact Information</th>\n                <th>Referral (Y/N)</th>\n                <th>Compensation</th>\n                <th>Company Feedback</th>\n                <th>Interview Notes</th>\n                <th>Status</th>\n                <th>Thank You Note</th>\n                <th>Notes</th>\n              </thead>\n              {job_application_trackerData &&\n                job_application_trackerData.length > 0 &&\n                job_application_trackerData.map((item) => {\n                  let istDate = new Date(item && item.applied_date);\n\n                  let appliedDate = moment(istDate).format(\n                    \"DD-MM-YYYY, hh:mm a\"\n                  );\n\n                  return (\n                    <tbody>\n                      <td>{item.id ? item.id : \"-\"}</td>\n                      <td>{item.company_name ? item.company_name : \"-\"}</td>\n                      <td>{item.job_title ? item.job_title : \"-\"}</td>\n                      <td>{item.location ? item.location : \"-\"}</td>\n                      {/* <td></td> */}\n                      <td>\n                        {appliedDate !== \"Invalid date\" ? appliedDate : \"-\"}\n                      </td>\n                      <td>\n                        <a href={item.job_post_url ? item.job_post_url : \"-\"}>\n                          {item.job_post_url ? item.job_post_url : \"-\"}\n                        </a>\n                      </td>\n                      <td>{item.pros ? item.pros : \"-\"}</td>\n                      <td>{item.cons ? item.cons : \"-\"}</td>\n\n                      <td>\n                        {item.contact_person_name\n                          ? item.contact_person_name\n                          : \"-\"}\n                      </td>\n                      <td>\n                        {item.contact_persons_position\n                          ? item.contact_persons_position\n                          : \"-\"}\n                      </td>\n                      <td>{item.contact_email ? item.contact_email : \"-\"}</td>\n                      <td>{item.referral ? \"Y\" : \"N\"}</td>\n\n                      {/* <td>\n                        {item.offer_log &&\n                        `Bonus: ${item.offer_log.bonus}, Commission: ${item.offer_log.commission}, Equity: ${item.offer_log.equity}, Salary: \n                          ${item.offer_log.salary}, Benefits: ${item.offer_log.benefits}`}\n                      </td> */}\n\n                      <td>\n                        {item.offer_log &&\n                          !item.offer_log.benefits &&\n                          !item.offer_log.bonus &&\n                          !item.offer_log.commission &&\n                          !item.offer_log.equity &&\n                          !item.offer_log.salary &&\n                          \"-\"}\n                        {item.offer_log &&\n                          item.offer_log.bonus &&\n                          `Bonus: \n                          ${item.offer_log.bonus}`}\n                        <br />\n                        {item.offer_log &&\n                          item.offer_log.commission &&\n                          `Commission: ${item.offer_log.commission}`}\n                        <br />\n                        {item.offer_log &&\n                          item.offer_log.equity &&\n                          `Equity: ${item.offer_log.equity}`}\n                        <br />\n                        {item.offer_log &&\n                          item.offer_log.salary &&\n                          `Salary: ${item.offer_log.salary}`}\n                        <br />\n                        {item.offer_log &&\n                          item.offer_log.benefits &&\n                          `Benefits: ${item.offer_log.benefits}`}\n                      </td>\n                      <td>\n                        {item.interview_log &&\n                        item.interview_log.company_feedback\n                          ? item.interview_log.company_feedback\n                          : \"-\"}\n                      </td>\n\n                      <td>\n                        {item.interview_log &&\n                        item.interview_log.interview_notes\n                          ? item.interview_log.interview_notes\n                          : \"-\"}\n                      </td>\n                      <td>{item.status ? item.status : \"-\"}</td>\n                      <td>\n                        {item.interview_log && item.interview_log.thank_you_note\n                          ? item.interview_log.thank_you_note\n                          : \"-\"}\n                      </td>\n                      <td>{item.notes ? item.notes : \"-\"}</td>\n                    </tbody>\n                  );\n                })}\n              {job_application_trackerData &&\n                job_application_trackerData.length === 0 && (\n                  <div className=\"no-records\">\n                    <h5 className=\"mb-0\">\n                      <i>No Records Found</i>\n                    </h5>\n                  </div>\n                )}\n            </Table>\n            {/* <PaginationCommon pageChange={pageChange} /> */}\n          </CCardBody>\n        </CCollapse>\n      </CCard>\n    </div>\n  );\n};\nexport default Apply;\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/planner/Explore.js",["350"],"import React, { useState } from \"react\";\n\nimport {\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CBadge,\n  CButton,\n  CCollapse,\n} from \"@coreui/react\";\nimport { Table } from \"reactstrap\";\nconst Explore = (props) => {\n  const { explore, loading } = props;\n\n  const [accordion, setAccordion] = useState(0);\n  const [search, setSearch] = useState(\"\");\n  const getBadge = (status) => {\n    switch (status) {\n      case \"Done\":\n        return \"green\";\n\n      case \"To-Do\":\n        return \"orange\";\n      case \"Doing\":\n        return \"yellow\";\n      case \"Ask an Expert\":\n        return \"purple\";\n      case \"Not Applicable\":\n        return \"gray\";\n      case \"High\":\n        return \"green\";\n      case \"Medium\":\n        return \"yellow\";\n      case \"Low\":\n        return \"pink\";\n      default:\n        return \"primary\";\n    }\n  };\n\n  const handleSearch = (e) => {\n    setSearch(e.target.value);\n  };\n\n  // const pageChange = (newPage) => {};\n\n  let introspectionData =\n    explore && explore.introspection && explore.introspection.data;\n\n  let extrospectionData =\n    explore && explore.extrospection && explore.extrospection.data;\n  let personality_assessmentData =\n    explore &&\n    explore.personality_assessment &&\n    explore.personality_assessment.data;\n\n  let practical_understandingData =\n    explore &&\n    explore.practical_understanding &&\n    explore.practical_understanding.data;\n  let career_optionsData =\n    explore && explore.career_options && explore.career_options.data;\n  const filterRecordsIntrospection = () => {\n    if (!search) return introspectionData;\n    return (\n      introspectionData &&\n      introspectionData.filter((data) => {\n        let isTrue =\n          data.fields[0].value.toLowerCase().includes(search) ||\n          data.fields[1].value.toLowerCase().includes(search) ||\n          data.fields[2].value.toLowerCase().includes(search) ||\n          data.fields[3].value.toLowerCase().includes(search);\n        return isTrue;\n      })\n    );\n  };\n  const filterRecordsExtrospection = () => {\n    if (!search) return extrospectionData;\n    return (\n      extrospectionData &&\n      extrospectionData.filter((data) => {\n        let isTrue =\n          data.fields[0].value.toLowerCase().includes(search) ||\n          data.fields[1].value.toLowerCase().includes(search) ||\n          data.fields[2].value.toLowerCase().includes(search);\n        return isTrue;\n      })\n    );\n  };\n  const filterRecordsPersonalityAssessment = () => {\n    if (!search) return personality_assessmentData;\n    return (\n      personality_assessmentData &&\n      personality_assessmentData.filter((data) => {\n        let isTrue = data.value.toLowerCase().includes(search);\n        return isTrue;\n      })\n    );\n  };\n  const filterRecordsPracticalUnderstanding = () => {\n    if (!search) return practical_understandingData;\n    return (\n      practical_understandingData &&\n      practical_understandingData.filter((data) => {\n        let isTrue =\n          data.career_option.toLowerCase().includes(search) ||\n          data.practical_understanding_via.toLowerCase().includes(search) ||\n          data.contact_person.toLowerCase().includes(search) ||\n          data.contact_email.toLowerCase().includes(search) ||\n          data.notes.toLowerCase().includes(search);\n        return isTrue;\n      })\n    );\n  };\n  const filterRecordsCareerOptions = () => {\n    if (!search) return career_optionsData;\n    return (\n      career_optionsData &&\n      career_optionsData.filter((data) => {\n        let isTrue =\n          data.fields[0].value.toLowerCase().includes(search) ||\n          data.fields[1].value.toLowerCase().includes(search) ||\n          data.fields[2].value.toLowerCase().includes(search) ||\n          data.fields[3].value.toLowerCase().includes(search) ||\n          data.fields[4].value.toLowerCase().includes(search);\n        return isTrue;\n      })\n    );\n  };\n\n  let filteredIntrospection = filterRecordsIntrospection() || [];\n  let filteredExtrospection = filterRecordsExtrospection() || [];\n  let filteredPersonalityAssessment =\n    filterRecordsPersonalityAssessment() || [];\n  let filteredPracticalUnderstanding =\n    filterRecordsPracticalUnderstanding() || [];\n  let filteredCareerOptions = filterRecordsCareerOptions() || [];\n\n  if (!explore && !loading) {\n    return (\n      <div className=\"no-records-planner\">\n        <h5 className=\"mb-0\">\n          <i>No Records Found</i>\n        </h5>\n      </div>\n    );\n  } else {\n    return (\n      <div id=\"accordion\">\n        <CCard className=\"mb-0\">\n          <CCardHeader id=\"headingOne\">\n            <CButton\n              block\n              color=\"link\"\n              className=\"text-left m-0 p-0 d-flex justify-content-between\"\n              onClick={() => setAccordion(accordion === 0 ? null : 0)}\n            >\n              <h5 className=\"m-0 p-0\">Introspection</h5>\n            </CButton>\n          </CCardHeader>\n          <CCollapse show={accordion === 0}>\n            <CCardBody>\n              <CCardHeader>\n                <table className=\"table\">\n                  <tbody>\n                    <tr>\n                      <td>Status</td>\n                      <td>\n                        {\" \"}\n                        <CBadge\n                          color={getBadge(\n                            explore &&\n                              explore.introspection &&\n                              explore.introspection.status\n                          )}\n                        >\n                          {explore &&\n                            explore.introspection &&\n                            explore.introspection.status}\n                        </CBadge>\n                      </td>\n                    </tr>\n                  </tbody>\n                </table>\n\n                {/* <Search handleSearch={handleSearch} /> */}\n              </CCardHeader>\n              <Table responsive>\n                <thead>\n                  <th className=\"text-nowrap \">ID</th>\n                  <th>Priority Level</th>\n\n                  <th>My Interests</th>\n                  <th>My Skills</th>\n\n                  <th>My Values</th>\n                </thead>\n                {filteredIntrospection &&\n                  filteredIntrospection.length > 0 &&\n                  filteredIntrospection.map((item) => {\n                    return (\n                      <tbody>\n                        <td>{item.id ? item.id : \"-\"}</td>\n                        <td>\n                          <CBadge color={getBadge(item.fields[0].value)}>\n                            {item.fields[0].value}\n                          </CBadge>\n                        </td>\n\n                        <td>\n                          {item.fields[1].value ? item.fields[1].value : \"-\"}\n                        </td>\n                        <td>\n                          {item.fields[2].value ? item.fields[2].value : \"-\"}\n                        </td>\n                        <td>\n                          {item.fields[3].value ? item.fields[3].value : \"-\"}\n                        </td>\n                      </tbody>\n                    );\n                  })}\n                {filteredIntrospection && filteredIntrospection.length === 0 && (\n                  <div className=\"no-records\">\n                    <h5 className=\"mb-0\">\n                      <i>No Records Found</i>\n                    </h5>\n                  </div>\n                )}\n              </Table>\n\n              {/* <PaginationCommon pageChange={pageChange} /> */}\n            </CCardBody>\n          </CCollapse>\n        </CCard>\n        <CCard className=\"mb-0\">\n          <CCardHeader id=\"headingTwo\">\n            <CButton\n              block\n              color=\"link\"\n              className=\"text-left m-0 p-0\"\n              onClick={() => setAccordion(accordion === 1 ? null : 1)}\n            >\n              <h5 className=\"m-0 p-0\">Extrospection</h5>\n            </CButton>\n          </CCardHeader>\n          <CCollapse show={accordion === 1}>\n            <CCardBody>\n              <CCardHeader>\n                <table className=\"table\">\n                  <tbody>\n                    <tr>\n                      <td>Status</td>\n                      <td>\n                        {\" \"}\n                        <CBadge\n                          color={getBadge(\n                            explore &&\n                              explore.extrospection &&\n                              explore.extrospection.status\n                          )}\n                        >\n                          {explore &&\n                            explore.extrospection &&\n                            explore.extrospection.status}\n                        </CBadge>\n                      </td>\n                    </tr>\n                  </tbody>\n                </table>\n\n                {/* <Search handleSearch={handleSearch} /> */}\n              </CCardHeader>\n              <Table responsive>\n                <thead>\n                  <th className=\"text-nowrap \">ID</th>\n                  <th>My Interests, Skills and Values</th>\n\n                  <th>World Needs</th>\n                  <th>World Pays For</th>\n                </thead>\n                {filteredExtrospection &&\n                  filteredExtrospection.length > 0 &&\n                  filteredExtrospection.map((item) => {\n                    return (\n                      <tbody>\n                        <td>{item.id ? item.id : \"-\"}</td>\n                        <td>\n                          {item.fields[0].value ? item.fields[0].value : \"-\"}\n                        </td>\n\n                        <td>\n                          {item.fields[1].value ? item.fields[1].value : \"-\"}\n                        </td>\n                        <td>\n                          {item.fields[2].value ? item.fields[2].value : \"-\"}\n                        </td>\n                      </tbody>\n                    );\n                  })}\n                {filteredExtrospection && filteredExtrospection.length === 0 && (\n                  <div className=\"no-records\">\n                    <h5 className=\"mb-0\">\n                      <i>No Records Found</i>\n                    </h5>\n                  </div>\n                )}\n              </Table>\n              {/* <PaginationCommon pageChange={pageChange} /> */}\n            </CCardBody>\n          </CCollapse>\n        </CCard>\n        <CCard className=\"mb-0\">\n          <CCardHeader id=\"headingThree\">\n            <CButton\n              block\n              color=\"link\"\n              className=\"text-left m-0 p-0\"\n              onClick={() => setAccordion(accordion === 2 ? null : 2)}\n            >\n              <h5 className=\"m-0 p-0\">Personality Assessment</h5>\n            </CButton>\n          </CCardHeader>\n          <CCollapse show={accordion === 2}>\n            <CCardHeader>\n              <table className=\"table\">\n                <tbody>\n                  <tr>\n                    <td>Status</td>\n                    <td>\n                      {\" \"}\n                      <CBadge\n                        color={getBadge(\n                          explore &&\n                            explore.personality_assessment &&\n                            explore.personality_assessment.status\n                        )}\n                      >\n                        {explore &&\n                          explore.personality_assessment &&\n                          explore.personality_assessment.status}\n                      </CBadge>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n\n              {/* <Search handleSearch={handleSearch} /> */}\n            </CCardHeader>\n            <CCardBody>\n              <Table responsive>\n                <thead>\n                  <th className=\"text-nowrap \">ID</th>\n                  <th>Career Option</th>\n                </thead>\n\n                {filteredPersonalityAssessment &&\n                  filteredPersonalityAssessment.length > 0 &&\n                  filteredPersonalityAssessment.map((item) => {\n                    return (\n                      <tbody>\n                        <td>{item.id ? item.id : \"-\"}</td>\n                        <td>{item.value ? item.value : \"-\"}</td>\n                      </tbody>\n                    );\n                  })}\n                {filteredPersonalityAssessment &&\n                  filteredPersonalityAssessment.length === 0 && (\n                    <div className=\"no-records\">\n                      <h5 className=\"mb-0\">\n                        <i>No Records Found</i>\n                      </h5>\n                    </div>\n                  )}\n              </Table>\n              {/* <PaginationCommon pageChange={pageChange} /> */}\n            </CCardBody>\n          </CCollapse>\n        </CCard>\n\n        <CCard className=\"mb-0\">\n          <CCardHeader id=\"headingThree\">\n            <CButton\n              block\n              color=\"link\"\n              className=\"text-left m-0 p-0\"\n              onClick={() => setAccordion(accordion === 3 ? null : 3)}\n            >\n              <h5 className=\"m-0 p-0\">Practical Understanding</h5>\n            </CButton>\n          </CCardHeader>\n          <CCollapse show={accordion === 3}>\n            <CCardBody>\n              <CCardHeader>\n                <table className=\"table\">\n                  <tbody>\n                    <tr>\n                      <td>Status</td>\n                      <td>\n                        {\" \"}\n                        <CBadge\n                          color={getBadge(\n                            explore &&\n                              explore.practical_understanding &&\n                              explore.practical_understanding.status\n                          )}\n                        >\n                          {explore &&\n                            explore.practical_understanding &&\n                            explore.practical_understanding.status}\n                        </CBadge>\n                      </td>\n                    </tr>\n                  </tbody>\n                </table>\n\n                {/* <Search handleSearch={handleSearch} /> */}\n              </CCardHeader>\n              <Table responsive>\n                <thead>\n                  <th className=\"text-nowrap \">ID</th>\n                  <th>Career Option</th>\n\n                  <th>Practical Understanding Via</th>\n                  <th>Contact Person</th>\n                  <th>Contact Email</th>\n                  <th>Notes On</th>\n                </thead>\n                {filteredPracticalUnderstanding &&\n                  filteredPracticalUnderstanding.length > 0 &&\n                  filteredPracticalUnderstanding.map((item) => {\n                    return (\n                      <tbody>\n                        <td>{item.id ? item.id : \"-\"}</td>\n                        <td>{item.career_option ? item.career_option : \"-\"}</td>\n                        <td>\n                          {item.practical_understanding_via\n                            ? item.practical_understanding_via\n                            : \"-\"}\n                        </td>\n                        <td>\n                          {item.contact_person ? item.contact_person : \"-\"}\n                        </td>\n                        <td>{item.contact_email ? item.contact_email : \"-\"}</td>\n                        <td>{item.notes ? item.notes : \"-\"}</td>\n                      </tbody>\n                    );\n                  })}\n                {filteredPracticalUnderstanding &&\n                  filteredPracticalUnderstanding.length === 0 && (\n                    <div className=\"no-records\">\n                      <h5 className=\"mb-0\">\n                        <i>No Records Found</i>\n                      </h5>\n                    </div>\n                  )}\n              </Table>\n              {/* <PaginationCommon pageChange={pageChange} /> */}\n            </CCardBody>\n          </CCollapse>\n        </CCard>\n\n        <CCard className=\"mb-0\">\n          <CCardHeader id=\"headingThree\">\n            <CButton\n              block\n              color=\"link\"\n              className=\"text-left m-0 p-0\"\n              onClick={() => setAccordion(accordion === 4 ? null : 4)}\n            >\n              <h5 className=\"m-0 p-0\">Career Options</h5>\n            </CButton>\n          </CCardHeader>\n          <CCollapse show={accordion === 4}>\n            <CCardBody>\n              <CCardHeader>\n                <table className=\"table\">\n                  <tbody>\n                    <tr>\n                      <td>Status</td>\n                      <td>\n                        {\" \"}\n                        <CBadge\n                          color={getBadge(\n                            explore &&\n                              explore.career_options &&\n                              explore.career_options.status\n                          )}\n                        >\n                          {explore &&\n                            explore.career_options &&\n                            explore.career_options.status}\n                        </CBadge>\n                      </td>\n                    </tr>\n                  </tbody>\n                </table>\n\n                {/* <Search handleSearch={handleSearch} /> */}\n              </CCardHeader>\n              <Table responsive>\n                <thead>\n                  <th className=\"text-nowrap \">ID</th>\n                  <th>Career Option</th>\n\n                  <th>Pros</th>\n                  <th>Cons</th>\n                  <th>Net Score</th>\n                  <th>Decision</th>\n                </thead>\n                {filteredCareerOptions &&\n                  filteredCareerOptions.length > 0 &&\n                  filteredCareerOptions.map((item) => {\n                    return (\n                      <tbody>\n                        <td>{item.id ? item.id : \"-\"}</td>\n                        <td>\n                          {item.fields[0].value ? item.fields[0].value : \"-\"}\n                        </td>\n                        <td>\n                          {item.fields[1].value ? item.fields[1].value : \"-\"}\n                        </td>\n                        <td>\n                          {item.fields[2].value ? item.fields[2].value : \"-\"}\n                        </td>\n                        <td>\n                          {item.fields[3].value ? item.fields[3].value : \"-\"}\n                        </td>\n                        <td>\n                          {item.fields[4].value ? item.fields[4].value : \"-\"}\n                        </td>\n                      </tbody>\n                    );\n                  })}\n                {filteredCareerOptions && filteredCareerOptions.length === 0 && (\n                  <div className=\"no-records\">\n                    <h5 className=\"mb-0\">\n                      <i>No Records Found</i>\n                    </h5>\n                  </div>\n                )}\n              </Table>\n              {/* <PaginationCommon pageChange={pageChange} /> */}\n            </CCardBody>\n          </CCollapse>\n        </CCard>\n      </div>\n    );\n  }\n};\nexport default Explore;\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/planner/Prepare.js",["351","352","353","354","355","356","357","358","359","360","361","362","363"],"import React, { useState } from \"react\";\nimport Loader from \"../../../loader\";\nimport Search from \"../../../common/search\";\nimport PaginationCommon from \"../../../common/pagination\";\nimport {\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CBadge,\n  CTabs,\n  CNavItem,\n  CNavLink,\n  CNav,\n  CTabContent,\n  CTabPane,\n  CButton,\n  CCollapse,\n} from \"@coreui/react\";\nimport { Table } from \"reactstrap\";\nconst Prepare = (props) => {\n  const { prepare } = props;\n  const [accordion, setAccordion] = useState(0);\n  const getBadge = (status) => {\n    switch (status) {\n      case \"Done\":\n        return \"green\";\n\n      case \"To-Do\":\n        return \"orange\";\n      case \"Doing\":\n        return \"yellow\";\n      case \"Ask an Expert\":\n        return \"purple\";\n      case \"Not Applicable\":\n        return \"gray\";\n      default:\n        return \"primary\";\n    }\n  };\n  const handleSearch = (e) => {\n    // setSearch(e.target.value);\n    // setOffset(\"\");\n    // setPage(1);\n  };\n  const pageChange = (newPage) => {};\n  let job_application_prepData =\n    prepare &&\n    prepare.job_application_prep &&\n    prepare.job_application_prep.data;\n  let interview_prepData =\n    prepare && prepare.interview_prep && prepare.interview_prep.data;\n  if (!prepare) {\n    return (\n      <div className=\"no-records-planner\">\n        <h5 className=\"mb-0\">\n          <i>No Records Found</i>\n        </h5>\n      </div>\n    );\n  }\n\n  return (\n    <div id=\"accordion\">\n      <CCard className=\"mb-0\">\n        <CCardHeader id=\"headingOne\">\n          <CButton\n            block\n            color=\"link\"\n            className=\"text-left m-0 p-0\"\n            onClick={() => setAccordion(accordion === 0 ? null : 0)}\n          >\n            <h5 className=\"m-0 p-0\">Job Application Prep</h5>\n          </CButton>\n        </CCardHeader>\n        <CCollapse show={accordion === 0}>\n          <CCardBody>\n            <CCardHeader>\n              <table className=\"table\">\n                <tbody>\n                  <tr>\n                    <td>Status</td>\n                    <td>\n                      {\" \"}\n                      <CBadge\n                        color={getBadge(\n                          prepare &&\n                            prepare.job_application_prep &&\n                            prepare.job_application_prep.status\n                        )}\n                      >\n                        {prepare &&\n                          prepare.job_application_prep &&\n                          prepare.job_application_prep.status}\n                      </CBadge>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n\n              {/* <Search handleSearch={handleSearch} /> */}\n            </CCardHeader>\n\n            <table className=\"table\">\n              {job_application_prepData && (\n                <tbody>\n                  <tr>\n                    <td>Resume</td>\n                    <td>\n                      <a\n                        href={\n                          job_application_prepData.resume &&\n                          job_application_prepData.resume.fileUrl\n                        }\n                      >\n                        {job_application_prepData.resume &&\n                        job_application_prepData.resume.fileUrl\n                          ? job_application_prepData.resume.fileUrl\n                          : \"-\"}\n                      </a>\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>Cover Letter Template</td>\n                    <td>\n                      <a\n                        href={\n                          job_application_prepData.cover_letter_template &&\n                          job_application_prepData.cover_letter_template.fileUrl\n                        }\n                      >\n                        {job_application_prepData.cover_letter_template &&\n                        job_application_prepData.cover_letter_template.fileUrl\n                          ? job_application_prepData.cover_letter_template\n                              .fileUrl\n                          : \"-\"}\n                      </a>\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>Portfolio / Work Sample</td>\n                    <td>\n                      <a\n                        href={\n                          job_application_prepData.portfolio_work_sample &&\n                          job_application_prepData.portfolio_work_sample.fileUrl\n                        }\n                      >\n                        {job_application_prepData.portfolio_work_sample &&\n                        job_application_prepData.portfolio_work_sample.fileUrl\n                          ? job_application_prepData.portfolio_work_sample\n                              .fileUrl\n                          : \"-\"}\n                      </a>\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>Video Profile</td>\n                    <td>\n                      <a\n                        href={\n                          job_application_prepData.video_profile &&\n                          job_application_prepData.video_profile.url\n                        }\n                      >\n                        {job_application_prepData.video_profile &&\n                        job_application_prepData.video_profile.url\n                          ? job_application_prepData.video_profile.url\n                          : \"-\"}\n                      </a>\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>LinkedIn Profile</td>\n                    <td>\n                      <a\n                        href={\n                          job_application_prepData.linkedin_profile &&\n                          job_application_prepData.linkedin_profile.url\n                        }\n                      >\n                        {job_application_prepData.linkedin_profile &&\n                        job_application_prepData.linkedin_profile.url\n                          ? job_application_prepData.linkedin_profile.url\n                          : \"-\"}\n                      </a>\n                    </td>\n                  </tr>\n                </tbody>\n              )}\n            </table>\n            {/* <PaginationCommon pageChange={pageChange} /> */}\n          </CCardBody>\n        </CCollapse>\n      </CCard>\n      <CCard className=\"mb-0\">\n        <CCardHeader id=\"headingTwo\">\n          <CButton\n            block\n            color=\"link\"\n            className=\"text-left m-0 p-0\"\n            onClick={() => setAccordion(accordion === 1 ? null : 1)}\n          >\n            <h5 className=\"m-0 p-0\">Interview Prep</h5>\n          </CButton>\n        </CCardHeader>\n        <CCollapse show={accordion === 1}>\n          <CCardBody>\n            <CCardHeader>\n              <table className=\"table\">\n                <tbody>\n                  <tr>\n                    <td>Status</td>\n                    <td>\n                      {\" \"}\n                      <CBadge\n                        color={getBadge(\n                          prepare &&\n                            prepare.interview_prep &&\n                            prepare.interview_prep.status\n                        )}\n                      >\n                        {prepare &&\n                          prepare.interview_prep &&\n                          prepare.interview_prep.status}\n                      </CBadge>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n\n              {/* <Search handleSearch={handleSearch} /> */}\n            </CCardHeader>\n            {interview_prepData && (\n              <Table responsive>\n                <thead>\n                  <th className=\"text-nowrap \">Topic</th>\n\n                  <th>Description</th>\n                  {/* <th>Sample Question</th> */}\n                  <th>Talking Points</th>\n                </thead>\n\n                {interview_prepData &&\n                  interview_prepData.length > 0 &&\n                  interview_prepData.map((data) => {\n                    return (\n                      <tbody>\n                        <td>{data.label ? data.label : \"-\"}</td>\n                        <td>{data.description ? data.description : \"-\"}</td>\n                        {/* <td></td> */}\n                        <td>{data.value ? data.value : \"-\"}</td>\n                      </tbody>\n                    );\n                  })}\n                {/* {interview_prepData.personal_background && (\n                  <tbody>\n                    <td>Personal Background</td>\n                    <td>\n                      Highlights from your non-work life like your upbringing,\n                      education, hobbies, family, etc.\n                    </td>\n                    <td>Tell me a bit about yourself</td>\n                    <td>{interview_prepData.personal_background}</td>\n                  </tbody>\n                )}\n                {interview_prepData.strengths_weaknesses && (\n                  <tbody>\n                    <td>Strengths & Weaknesses</td>\n                    <td>\n                      2-3 of your key strengths and 1-2 weaknesses from a\n                      professional standpoint along with examples\n                    </td>\n                    <td>\n                      Share your key strengths and weaknesses along with\n                      examples\n                    </td>\n                    <td>{interview_prepData.strengths_weaknesses}</td>\n                  </tbody>\n                )}\n                {interview_prepData.work_experience && (\n                  <tbody>\n                    <td>Work Experience</td>\n                    <td>\n                      Key highlights from your resume focusing on your\n                      individual contributions, achievements and career\n                      trajectory\n                    </td>\n                    <td>Walk me through your resume</td>\n                    <td>{interview_prepData.work_experience}</td>\n                  </tbody>\n                )}\n                {interview_prepData.why_career_change && (\n                  <tbody>\n                    <td>Why Career Change</td>\n                    <td>\n                      Primary factors that drove you to consider a career change\n                      and key aspects about your desired role/industry that drew\n                      you in\n                    </td>\n                    <td>\n                      Why do you want to change your role/industry at this stage\n                    </td>\n                    <td>{interview_prepData.why_career_change}</td>\n                  </tbody>\n                )}\n                {interview_prepData.why_our_organization && (\n                  <tbody>\n                    <td>Why Our Organization</td>\n                    <td>\n                      Things that excite you most about working with the\n                      organization - e.g., people, mission, values, exposure,\n                      etc.\n                    </td>\n                    <td>What interests you most about working with us</td>\n                    <td>{interview_prepData.why_our_organization}</td>\n                  </tbody>\n                )}\n\n                {interview_prepData.long_term_goals && (\n                  <tbody>\n                    <td>Long-term Goals</td>\n\n                    <td>\n                      Scope and nature of impact you aspire to make in your\n                      industry and community over the next 5 years\n                    </td>\n                    <td>\n                      What kind of impact do you want to make in your career\n                      over the next five years\n                    </td>\n                    <td>{interview_prepData.long_term_goals}</td>\n                  </tbody>\n                )}\n                {interview_prepData.behavioral && (\n                  <tbody>\n                    <td>Behavioral</td>\n                    <td>\n                      Impactful anecdotes from prior work or educational\n                      experience that demonstrate your expertise, values or\n                      other professional qualities to help assess cultural fit.\n                      Using the STAR approach here may be helpful\n                    </td>\n                    <td>\n                      Tell me about a time when you resolved stakeholder\n                      conflict at work\n                    </td>\n                    <td>{interview_prepData.behavioral}</td>\n                  </tbody>\n                )}\n                {interview_prepData.competency && (\n                  <tbody>\n                    <td>Competency</td>\n                    <td>\n                      Key indicators generally based on prior experience that\n                      exhibit your ability to tackle challenging situations and\n                      achieve aspirational goals\n                    </td>\n                    <td>\n                      Tell us about the specific steps you took in your previous\n                      role to improve your knowledge about advancements in your\n                      area of biological science\n                    </td>\n                    <td>{interview_prepData.competency}</td>\n                  </tbody>\n                )}\n\n                {interview_prepData.technical && (\n                  <tbody>\n                    <td>Technical</td>\n                    <td>\n                      Key indicators that demonstrate a strong understanding of\n                      the concepts laid out in the technical question\n                    </td>\n                    <td>\n                      If humans evolved from apes, why are there still apes\n                    </td>\n                    <td>{interview_prepData.technical}</td>\n                  </tbody>\n                )}\n                {interview_prepData.case_study && (\n                  <tbody>\n                    <td>Case Study</td>\n                    <td>\n                      Key indicators that exhibit your thought-process for\n                      solving complex problems, achieving work-related goals,\n                      and your ability to articulate the same\n                    </td>\n                    <td>\n                      Let's say that Tyrannosaurus Rex got into a fight with\n                      Utahraptor, who would win and why\n                    </td>\n                    <td>{interview_prepData.case_study}</td>\n                  </tbody>\n                )}\n                {interview_prepData.general_knowledge && (\n                  <tbody>\n                    <td>General Knowledge</td>\n                    <td>\n                      Awareness and understanding of the trending topics in\n                      politics, economy, sports, culture and industry-specific\n                      issues in your region or globally\n                    </td>\n                    <td>\n                      What are your thoughts on NASA's recent discovery of water\n                      on the sunlit surface of the moon\n                    </td>\n                    <td>{interview_prepData.general_knowledge}</td>\n                  </tbody>\n                )}\n\n                {interview_prepData.questions_for_interviewer && (\n                  <tbody>\n                    <td>Qustions for Interviewer</td>\n                    <td>\n                      Gather information on (i) the organization’s culture, core\n                      values and policies (ii) interviewer’s views on relevant\n                      work topics (iii) the job application process\n                    </td>\n                    <td>\n                      What are the core values and behaviors that this\n                      organization wants its employees to espouse\n                    </td>\n                    <td>{interview_prepData.questions_for_interviewer}</td>\n                  </tbody>\n                )}\n                {interview_prepData.other && (\n                  <tbody>\n                    <td>Other</td>\n                    <td>\n                      Anything else you would like to discuss during your\n                      interview\n                    </td>\n                    <td>-</td>\n                    <td>{interview_prepData.other}</td>\n                  </tbody>\n                )} */}\n              </Table>\n            )}\n            {interview_prepData && interview_prepData.length === 0 && (\n              <div className=\"no-records-prepare\">\n                <h5 className=\"mb-0\">\n                  <i>No Records Found</i>\n                </h5>\n              </div>\n            )}\n            {/* <PaginationCommon pageChange={pageChange} /> */}\n          </CCardBody>\n        </CCollapse>\n      </CCard>\n    </div>\n  );\n};\nexport default Prepare;\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/planner/Network.js",["364","365","366","367","368","369","370","371","372","373","374","375","376"],"import React, { useState } from \"react\";\nimport Loader from \"../../../loader\";\nimport Search from \"../../../common/search\";\nimport PaginationCommon from \"../../../common/pagination\";\nimport {\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CBadge,\n  CTabs,\n  CNavItem,\n  CNavLink,\n  CNav,\n  CTabContent,\n  CTabPane,\n  CButton,\n  CCollapse,\n} from \"@coreui/react\";\nimport { Table } from \"reactstrap\";\nconst Network = (props) => {\n  const { network } = props;\n  const [accordion, setAccordion] = useState(0);\n  const getBadge = (status) => {\n    switch (status) {\n      case \"Done\":\n        return \"green\";\n\n      case \"To-Do\":\n        return \"orange\";\n      case \"Doing\":\n        return \"yellow\";\n      case \"Ask an Expert\":\n        return \"purple\";\n      case \"Not Applicable\":\n        return \"gray\";\n      default:\n        return \"primary\";\n    }\n  };\n  const handleSearch = (e) => {\n    // setSearch(e.target.value);\n    // setOffset(\"\");\n    // setPage(1);\n  };\n  const pageChange = (newPage) => {};\n  let existing_connectionsData =\n    network &&\n    network.existing_connections &&\n    network.existing_connections.data;\n  let new_connectionsData =\n    network && network.new_connections && network.new_connections.data;\n  let cold_messagesData =\n    network && network.cold_messages && network.cold_messages.data;\n  let key_takeawaysData =\n    network && network.key_takeaways && network.key_takeaways.data;\n  if (!network) {\n    return (\n      <div className=\"no-records-planner\">\n        <h5 className=\"mb-0\">\n          <i>No Records Found</i>\n        </h5>\n      </div>\n    );\n  } else {\n    return (\n      <div id=\"accordion\">\n        <CCard className=\"mb-0\">\n          <CCardHeader id=\"headingOne\">\n            <CButton\n              block\n              color=\"link\"\n              className=\"text-left m-0 p-0\"\n              onClick={() => setAccordion(accordion === 0 ? null : 0)}\n            >\n              <h5 className=\"m-0 p-0\">Existing Connections</h5>\n            </CButton>\n          </CCardHeader>\n          <CCollapse show={accordion === 0}>\n            <CCardBody>\n              <CCardHeader>\n                <table className=\"table\">\n                  <tbody>\n                    <tr>\n                      <td>Status</td>\n                      <td>\n                        {\" \"}\n                        <CBadge\n                          color={getBadge(\n                            network &&\n                              network.existing_connections &&\n                              network.existing_connections.status\n                          )}\n                        >\n                          {network &&\n                            network.existing_connections &&\n                            network.existing_connections.status}\n                        </CBadge>\n                      </td>\n                    </tr>\n                  </tbody>\n                </table>\n\n                {/* <Search handleSearch={handleSearch} /> */}\n              </CCardHeader>\n              <Table responsive>\n                <thead>\n                  <th>ID</th>\n                  <th className=\"text-nowrap \">Career Options</th>\n\n                  <th>Family / Relatives</th>\n                  <th>Friends</th>\n\n                  <th>Professional Network</th>\n                  <th>Other</th>\n                </thead>\n                {existing_connectionsData &&\n                  existing_connectionsData.length > 0 &&\n                  existing_connectionsData.map((item) => {\n                    return (\n                      <tbody>\n                        <td>{item.id ? item.id : \"-\"}</td>\n                        <td>\n                          {item.fields[0].value ? item.fields[0].value : \"-\"}\n                        </td>\n                        <td>\n                          {item.fields[1].value ? item.fields[1].value : \"-\"}\n                        </td>\n                        <td>\n                          {item.fields[2].value ? item.fields[2].value : \"-\"}\n                        </td>\n                        <td>\n                          {item.fields[3].value ? item.fields[3].value : \"-\"}\n                        </td>\n                        <td>\n                          {item.fields[4].value ? item.fields[4].value : \"-\"}\n                        </td>\n                      </tbody>\n                    );\n                  })}\n\n                {existing_connectionsData &&\n                  existing_connectionsData.length === 0 && (\n                    <div className=\"no-records\">\n                      <h5 className=\"mb-0\">\n                        <i>No Records Found</i>\n                      </h5>\n                    </div>\n                  )}\n              </Table>\n              {/* <PaginationCommon pageChange={pageChange} /> */}\n            </CCardBody>\n          </CCollapse>\n        </CCard>\n        <CCard className=\"mb-0\">\n          <CCardHeader id=\"headingTwo\">\n            <CButton\n              block\n              color=\"link\"\n              className=\"text-left m-0 p-0\"\n              onClick={() => setAccordion(accordion === 1 ? null : 1)}\n            >\n              <h5 className=\"m-0 p-0\">New Connections</h5>\n            </CButton>\n          </CCardHeader>\n          <CCollapse show={accordion === 1}>\n            <CCardBody>\n              <CCardHeader>\n                <table className=\"table\">\n                  <tbody>\n                    <tr>\n                      <td>Status</td>\n                      <td>\n                        {\" \"}\n                        <CBadge\n                          color={getBadge(\n                            network &&\n                              network.new_connections &&\n                              network.new_connections.status\n                          )}\n                        >\n                          {network &&\n                            network.new_connections &&\n                            network.new_connections.status}\n                        </CBadge>\n                      </td>\n                    </tr>\n                  </tbody>\n                </table>\n\n                {/* <Search handleSearch={handleSearch} /> */}\n              </CCardHeader>\n\n              {new_connectionsData && new_connectionsData.length > 0 && (\n                <Table responsive>\n                  <thead>\n                    <th>Networking Platform</th>\n                    {/* <th className=\"text-nowrap \">ID</th>\n                    <th>Pivot</th>\n\n                    <th>Meetup</th>\n                    <th>Lunchclub</th>\n                    <th>Online Groups</th>\n                    <th>Conferences</th> */}\n                  </thead>\n                  {new_connectionsData &&\n                    new_connectionsData.length > 0 &&\n                    new_connectionsData.map((item) => {\n                      return (\n                        <tbody>\n                          <td>{item.value}</td>\n                        </tbody>\n                      );\n                    })}\n                </Table>\n              )}\n              {/* <PaginationCommon pageChange={pageChange} /> */}\n            </CCardBody>\n          </CCollapse>\n        </CCard>\n        <CCard className=\"mb-0\">\n          <CCardHeader id=\"headingThree\">\n            <CButton\n              block\n              color=\"link\"\n              className=\"text-left m-0 p-0\"\n              onClick={() => setAccordion(accordion === 2 ? null : 2)}\n            >\n              <h5 className=\"m-0 p-0\">Cold Messages</h5>\n            </CButton>\n          </CCardHeader>\n          <CCollapse show={accordion === 2}>\n            <CCardBody>\n              <CCardHeader>\n                <table className=\"table\">\n                  <tbody>\n                    <tr>\n                      <td>Status</td>\n                      <td>\n                        {\" \"}\n                        <CBadge\n                          color={getBadge(\n                            network &&\n                              network.cold_messages &&\n                              network.cold_messages.status\n                          )}\n                        >\n                          {network &&\n                            network.cold_messages &&\n                            network.cold_messages.status}\n                        </CBadge>\n                      </td>\n                    </tr>\n                  </tbody>\n                </table>\n\n                {/* <Search handleSearch={handleSearch} /> */}\n              </CCardHeader>\n              <Table responsive>\n                <thead>\n                  <th className=\"text-nowrap \">ID</th>\n                  <th>Title</th>\n\n                  <th>Cold Message</th>\n                </thead>\n                {cold_messagesData &&\n                  cold_messagesData.length > 0 &&\n                  cold_messagesData.map((item) => {\n                    return (\n                      <tbody>\n                        <td>{item.id ? item.id : \"-\"}</td>\n                        <td>{item.title ? item.title : \"-\"}</td>\n                        <td>{item.message ? item.message : \"-\"}</td>\n                      </tbody>\n                    );\n                  })}\n                {cold_messagesData && cold_messagesData.length === 0 && (\n                  <div className=\"no-records\">\n                    <h5 className=\"mb-0\">\n                      <i>No Records Found</i>\n                    </h5>\n                  </div>\n                )}\n              </Table>\n              {/* <PaginationCommon pageChange={pageChange} /> */}\n            </CCardBody>\n          </CCollapse>\n        </CCard>\n\n        <CCard className=\"mb-0\">\n          <CCardHeader id=\"headingThree\">\n            <CButton\n              block\n              color=\"link\"\n              className=\"text-left m-0 p-0\"\n              onClick={() => setAccordion(accordion === 3 ? null : 3)}\n            >\n              <h5 className=\"m-0 p-0\">Key Takeaways</h5>\n            </CButton>\n          </CCardHeader>\n          <CCollapse show={accordion === 3}>\n            <CCardBody>\n              <CCardHeader>\n                <table className=\"table\">\n                  <tbody>\n                    <tr>\n                      <td>Status</td>\n                      <td>\n                        {\" \"}\n                        <CBadge\n                          color={getBadge(\n                            network &&\n                              network.key_takeaways &&\n                              network.key_takeaways.status\n                          )}\n                        >\n                          {network &&\n                            network.key_takeaways &&\n                            network.key_takeaways.status}\n                        </CBadge>\n                      </td>\n                    </tr>\n                  </tbody>\n                </table>\n\n                {/* <Search handleSearch={handleSearch} /> */}\n              </CCardHeader>\n              <Table responsive style={{ minHeight: \"110px\" }}>\n                <thead>\n                  <th className=\"text-nowrap \">ID</th>\n                  <th>Name</th>\n\n                  <th>Organization</th>\n                  <th>Current Role</th>\n                  <th>Relationship</th>\n                  <th>Role & Industry Insights</th>\n                  <th>Company Insights</th>\n                  <th>Relevant Connections</th>\n                  <th>Relevant Groups</th>\n                  <th>Learning & Development</th>\n                  <th>Job Search</th>\n                  <th>Job Referral</th>\n                  <th>Other</th>\n                </thead>\n                {key_takeawaysData &&\n                  key_takeawaysData.length > 0 &&\n                  key_takeawaysData.map((item) => {\n                    return (\n                      <tbody>\n                        <td>{item.id ? item.id : \"-\"}</td>\n                        <td>\n                          {\" \"}\n                          {item && item.first_name && item.last_name\n                            ? item.first_name + \" \" + item.last_name\n                            : \"-\"}\n                        </td>\n                        <td>{item.orgnisation ? item.orgnisation : \"-\"}</td>\n                        <td>{item.current_role ? item.current_role : \"-\"}</td>\n                        <td>{item.relationship ? item.relationship : \"-\"}</td>\n                        <td>\n                          {item.role_industry_insights\n                            ? item.role_industry_insights\n                            : \"-\"}\n                        </td>\n                        <td>\n                          {item.company_insights ? item.company_insights : \"-\"}\n                        </td>\n\n                        <td>\n                          {item.relative_connections\n                            ? item.relative_connections\n                            : \"-\"}\n                        </td>\n                        <td>\n                          {item.relative_groups ? item.relative_groups : \"-\"}\n                        </td>\n                        <td>\n                          {item.learning_development\n                            ? item.learning_development\n                            : \"-\"}\n                        </td>\n                        <td>{item.job_search ? item.job_search : \"-\"}</td>\n                        <td>{item.job_referral ? item.job_referral : \"-\"}</td>\n                        <td>{item.other ? item.other : \"-\"}</td>\n                      </tbody>\n                    );\n                  })}\n                {key_takeawaysData && key_takeawaysData.length === 0 && (\n                  <div className=\"no-records\">\n                    <h5 className=\"mb-0\">\n                      <i>No Records Found</i>\n                    </h5>\n                  </div>\n                )}\n              </Table>\n\n              {/* <PaginationCommon pageChange={pageChange} /> */}\n            </CCardBody>\n          </CCollapse>\n        </CCard>\n      </div>\n    );\n  }\n};\nexport default Network;\n","/Volumes/DATA/Isha Kansal/pivot-admin/src/views/users/planner/exploreData.js",[],"/Volumes/DATA/Isha Kansal/pivot-admin/src/common/tabs.js",[],{"ruleId":"377","replacedBy":"378"},{"ruleId":"379","replacedBy":"380"},{"ruleId":"381","severity":1,"message":"382","line":167,"column":29,"nodeType":"383","endLine":167,"endColumn":50},{"ruleId":"384","severity":1,"message":"385","line":36,"column":17,"nodeType":"386","messageId":"387","endLine":36,"endColumn":20},{"ruleId":"384","severity":1,"message":"388","line":36,"column":22,"nodeType":"386","messageId":"387","endLine":36,"endColumn":25},{"ruleId":"384","severity":1,"message":"389","line":44,"column":3,"nodeType":"386","messageId":"387","endLine":44,"endColumn":14},{"ruleId":"384","severity":1,"message":"390","line":142,"column":9,"nodeType":"386","messageId":"387","endLine":142,"endColumn":14},{"ruleId":"384","severity":1,"message":"391","line":176,"column":21,"nodeType":"386","messageId":"387","endLine":176,"endColumn":32},{"ruleId":"384","severity":1,"message":"392","line":234,"column":13,"nodeType":"386","messageId":"387","endLine":234,"endColumn":17},{"ruleId":"384","severity":1,"message":"393","line":341,"column":7,"nodeType":"386","messageId":"387","endLine":341,"endColumn":11},{"ruleId":"384","severity":1,"message":"394","line":342,"column":7,"nodeType":"386","messageId":"387","endLine":342,"endColumn":15},{"ruleId":"395","severity":1,"message":"396","line":554,"column":62,"nodeType":"397","messageId":"398","endLine":554,"endColumn":63,"suggestions":"399"},{"ruleId":"395","severity":1,"message":"396","line":554,"column":105,"nodeType":"397","messageId":"398","endLine":554,"endColumn":106,"suggestions":"400"},{"ruleId":"401","severity":1,"message":"402","line":581,"column":72,"nodeType":"403","messageId":"404","endLine":581,"endColumn":74},{"ruleId":"401","severity":1,"message":"402","line":592,"column":71,"nodeType":"403","messageId":"404","endLine":592,"endColumn":73},{"ruleId":"384","severity":1,"message":"405","line":680,"column":7,"nodeType":"386","messageId":"387","endLine":680,"endColumn":18},{"ruleId":"384","severity":1,"message":"393","line":936,"column":7,"nodeType":"386","messageId":"387","endLine":936,"endColumn":11},{"ruleId":"384","severity":1,"message":"406","line":941,"column":7,"nodeType":"386","messageId":"387","endLine":941,"endColumn":19},{"ruleId":"384","severity":1,"message":"392","line":947,"column":7,"nodeType":"386","messageId":"387","endLine":947,"endColumn":11},{"ruleId":"407","severity":1,"message":"408","line":964,"column":17,"nodeType":"409","endLine":964,"endColumn":57},{"ruleId":"381","severity":1,"message":"382","line":1085,"column":25,"nodeType":"383","endLine":1085,"endColumn":39},{"ruleId":"381","severity":1,"message":"382","line":1160,"column":25,"nodeType":"383","endLine":1160,"endColumn":48},{"ruleId":"407","severity":1,"message":"408","line":1317,"column":27,"nodeType":"409","endLine":1317,"endColumn":61},{"ruleId":"407","severity":1,"message":"408","line":1343,"column":33,"nodeType":"409","endLine":1343,"endColumn":70},{"ruleId":"384","severity":1,"message":"410","line":36,"column":3,"nodeType":"386","messageId":"387","endLine":36,"endColumn":14},{"ruleId":"395","severity":1,"message":"396","line":344,"column":54,"nodeType":"397","messageId":"398","endLine":344,"endColumn":55,"suggestions":"411"},{"ruleId":"407","severity":1,"message":"408","line":778,"column":17,"nodeType":"409","endLine":778,"endColumn":57},{"ruleId":"407","severity":1,"message":"408","line":819,"column":25,"nodeType":"409","endLine":822,"endColumn":27},{"ruleId":"407","severity":1,"message":"408","line":1022,"column":25,"nodeType":"409","endLine":1022,"endColumn":59},{"ruleId":"407","severity":1,"message":"408","line":1048,"column":31,"nodeType":"409","endLine":1048,"endColumn":68},{"ruleId":"407","severity":1,"message":"408","line":1060,"column":25,"nodeType":"409","endLine":1060,"endColumn":59},{"ruleId":"407","severity":1,"message":"408","line":1086,"column":31,"nodeType":"409","endLine":1086,"endColumn":68},{"ruleId":"407","severity":1,"message":"408","line":1106,"column":25,"nodeType":"409","endLine":1106,"endColumn":59},{"ruleId":"407","severity":1,"message":"408","line":1133,"column":31,"nodeType":"409","endLine":1133,"endColumn":68},{"ruleId":"384","severity":1,"message":"412","line":3,"column":22,"nodeType":"386","messageId":"387","endLine":3,"endColumn":27},{"ruleId":"384","severity":1,"message":"413","line":1,"column":17,"nodeType":"386","messageId":"387","endLine":1,"endColumn":25},{"ruleId":"384","severity":1,"message":"414","line":13,"column":29,"nodeType":"386","messageId":"387","endLine":13,"endColumn":39},{"ruleId":"415","severity":1,"message":"416","line":3,"column":1,"nodeType":"417","endLine":14,"endColumn":3},{"ruleId":"418","severity":1,"message":"419","line":8,"column":20,"nodeType":"420","messageId":"404","endLine":8,"endColumn":22},{"ruleId":"384","severity":1,"message":"421","line":1,"column":10,"nodeType":"386","messageId":"387","endLine":1,"endColumn":17},{"ruleId":"422","severity":1,"message":"423","line":33,"column":6,"nodeType":"424","endLine":33,"endColumn":8,"suggestions":"425"},{"ruleId":"384","severity":1,"message":"426","line":2,"column":22,"nodeType":"386","messageId":"387","endLine":2,"endColumn":33},{"ruleId":"422","severity":1,"message":"427","line":149,"column":6,"nodeType":"424","endLine":149,"endColumn":14,"suggestions":"428"},{"ruleId":"407","severity":1,"message":"408","line":265,"column":31,"nodeType":"409","endLine":265,"endColumn":66},{"ruleId":"407","severity":1,"message":"408","line":277,"column":31,"nodeType":"409","endLine":277,"endColumn":68},{"ruleId":"407","severity":1,"message":"408","line":291,"column":35,"nodeType":"409","endLine":291,"endColumn":76},{"ruleId":"407","severity":1,"message":"408","line":309,"column":35,"nodeType":"409","endLine":309,"endColumn":74},{"ruleId":"384","severity":1,"message":"426","line":2,"column":22,"nodeType":"386","messageId":"387","endLine":2,"endColumn":33},{"ruleId":"422","severity":1,"message":"429","line":128,"column":6,"nodeType":"424","endLine":128,"endColumn":14,"suggestions":"430"},{"ruleId":"407","severity":1,"message":"408","line":245,"column":31,"nodeType":"409","endLine":245,"endColumn":66},{"ruleId":"407","severity":1,"message":"408","line":255,"column":31,"nodeType":"409","endLine":255,"endColumn":68},{"ruleId":"422","severity":1,"message":"431","line":92,"column":6,"nodeType":"424","endLine":92,"endColumn":14,"suggestions":"432"},{"ruleId":"384","severity":1,"message":"433","line":14,"column":3,"nodeType":"386","messageId":"387","endLine":14,"endColumn":11},{"ruleId":"384","severity":1,"message":"434","line":15,"column":3,"nodeType":"386","messageId":"387","endLine":15,"endColumn":11},{"ruleId":"384","severity":1,"message":"435","line":16,"column":3,"nodeType":"386","messageId":"387","endLine":16,"endColumn":7},{"ruleId":"384","severity":1,"message":"436","line":31,"column":10,"nodeType":"386","messageId":"387","endLine":31,"endColumn":22},{"ruleId":"422","severity":1,"message":"423","line":44,"column":6,"nodeType":"424","endLine":44,"endColumn":8,"suggestions":"437"},{"ruleId":"415","severity":1,"message":"416","line":4,"column":1,"nodeType":"417","endLine":19,"endColumn":3},{"ruleId":"384","severity":1,"message":"438","line":9,"column":10,"nodeType":"386","messageId":"387","endLine":9,"endColumn":22},{"ruleId":"415","severity":1,"message":"439","line":36,"column":1,"nodeType":"417","endLine":36,"endColumn":37},{"ruleId":"384","severity":1,"message":"440","line":4,"column":10,"nodeType":"386","messageId":"387","endLine":4,"endColumn":18},{"ruleId":"384","severity":1,"message":"441","line":3,"column":28,"nodeType":"386","messageId":"387","endLine":3,"endColumn":39},{"ruleId":"384","severity":1,"message":"442","line":16,"column":10,"nodeType":"386","messageId":"387","endLine":16,"endColumn":16},{"ruleId":"384","severity":1,"message":"443","line":16,"column":18,"nodeType":"386","messageId":"387","endLine":16,"endColumn":27},{"ruleId":"422","severity":1,"message":"444","line":71,"column":6,"nodeType":"424","endLine":71,"endColumn":14,"suggestions":"445"},{"ruleId":"384","severity":1,"message":"441","line":5,"column":3,"nodeType":"386","messageId":"387","endLine":5,"endColumn":14},{"ruleId":"422","severity":1,"message":"423","line":42,"column":6,"nodeType":"424","endLine":42,"endColumn":8,"suggestions":"446"},{"ruleId":"384","severity":1,"message":"447","line":30,"column":10,"nodeType":"386","messageId":"387","endLine":30,"endColumn":14},{"ruleId":"422","severity":1,"message":"423","line":46,"column":6,"nodeType":"424","endLine":46,"endColumn":8,"suggestions":"448"},{"ruleId":"384","severity":1,"message":"447","line":22,"column":10,"nodeType":"386","messageId":"387","endLine":22,"endColumn":14},{"ruleId":"384","severity":1,"message":"449","line":22,"column":16,"nodeType":"386","messageId":"387","endLine":22,"endColumn":23},{"ruleId":"422","severity":1,"message":"444","line":46,"column":6,"nodeType":"424","endLine":46,"endColumn":14,"suggestions":"450"},{"ruleId":"384","severity":1,"message":"447","line":22,"column":10,"nodeType":"386","messageId":"387","endLine":22,"endColumn":14},{"ruleId":"422","severity":1,"message":"444","line":45,"column":6,"nodeType":"424","endLine":45,"endColumn":14,"suggestions":"451"},{"ruleId":"384","severity":1,"message":"452","line":2,"column":8,"nodeType":"386","messageId":"387","endLine":2,"endColumn":14},{"ruleId":"384","severity":1,"message":"453","line":3,"column":8,"nodeType":"386","messageId":"387","endLine":3,"endColumn":14},{"ruleId":"384","severity":1,"message":"454","line":4,"column":8,"nodeType":"386","messageId":"387","endLine":4,"endColumn":24},{"ruleId":"384","severity":1,"message":"455","line":9,"column":3,"nodeType":"386","messageId":"387","endLine":9,"endColumn":7},{"ruleId":"384","severity":1,"message":"456","line":10,"column":3,"nodeType":"386","messageId":"387","endLine":10,"endColumn":7},{"ruleId":"384","severity":1,"message":"457","line":12,"column":3,"nodeType":"386","messageId":"387","endLine":12,"endColumn":8},{"ruleId":"384","severity":1,"message":"433","line":13,"column":3,"nodeType":"386","messageId":"387","endLine":13,"endColumn":11},{"ruleId":"384","severity":1,"message":"434","line":14,"column":3,"nodeType":"386","messageId":"387","endLine":14,"endColumn":11},{"ruleId":"384","severity":1,"message":"435","line":15,"column":3,"nodeType":"386","messageId":"387","endLine":15,"endColumn":7},{"ruleId":"384","severity":1,"message":"458","line":16,"column":3,"nodeType":"386","messageId":"387","endLine":16,"endColumn":14},{"ruleId":"384","severity":1,"message":"459","line":17,"column":3,"nodeType":"386","messageId":"387","endLine":17,"endColumn":11},{"ruleId":"384","severity":1,"message":"460","line":42,"column":9,"nodeType":"386","messageId":"387","endLine":42,"endColumn":21},{"ruleId":"384","severity":1,"message":"461","line":47,"column":9,"nodeType":"386","messageId":"387","endLine":47,"endColumn":19},{"ruleId":"384","severity":1,"message":"452","line":2,"column":8,"nodeType":"386","messageId":"387","endLine":2,"endColumn":14},{"ruleId":"384","severity":1,"message":"453","line":4,"column":8,"nodeType":"386","messageId":"387","endLine":4,"endColumn":14},{"ruleId":"384","severity":1,"message":"454","line":5,"column":8,"nodeType":"386","messageId":"387","endLine":5,"endColumn":24},{"ruleId":"384","severity":1,"message":"455","line":10,"column":3,"nodeType":"386","messageId":"387","endLine":10,"endColumn":7},{"ruleId":"384","severity":1,"message":"456","line":11,"column":3,"nodeType":"386","messageId":"387","endLine":11,"endColumn":7},{"ruleId":"384","severity":1,"message":"457","line":13,"column":3,"nodeType":"386","messageId":"387","endLine":13,"endColumn":8},{"ruleId":"384","severity":1,"message":"433","line":14,"column":3,"nodeType":"386","messageId":"387","endLine":14,"endColumn":11},{"ruleId":"384","severity":1,"message":"434","line":15,"column":3,"nodeType":"386","messageId":"387","endLine":15,"endColumn":11},{"ruleId":"384","severity":1,"message":"435","line":16,"column":3,"nodeType":"386","messageId":"387","endLine":16,"endColumn":7},{"ruleId":"384","severity":1,"message":"458","line":17,"column":3,"nodeType":"386","messageId":"387","endLine":17,"endColumn":14},{"ruleId":"384","severity":1,"message":"459","line":18,"column":3,"nodeType":"386","messageId":"387","endLine":18,"endColumn":11},{"ruleId":"384","severity":1,"message":"460","line":43,"column":9,"nodeType":"386","messageId":"387","endLine":43,"endColumn":21},{"ruleId":"384","severity":1,"message":"461","line":48,"column":9,"nodeType":"386","messageId":"387","endLine":48,"endColumn":19},{"ruleId":"384","severity":1,"message":"460","line":41,"column":9,"nodeType":"386","messageId":"387","endLine":41,"endColumn":21},{"ruleId":"384","severity":1,"message":"452","line":2,"column":8,"nodeType":"386","messageId":"387","endLine":2,"endColumn":14},{"ruleId":"384","severity":1,"message":"453","line":3,"column":8,"nodeType":"386","messageId":"387","endLine":3,"endColumn":14},{"ruleId":"384","severity":1,"message":"454","line":4,"column":8,"nodeType":"386","messageId":"387","endLine":4,"endColumn":24},{"ruleId":"384","severity":1,"message":"455","line":9,"column":3,"nodeType":"386","messageId":"387","endLine":9,"endColumn":7},{"ruleId":"384","severity":1,"message":"456","line":10,"column":3,"nodeType":"386","messageId":"387","endLine":10,"endColumn":7},{"ruleId":"384","severity":1,"message":"457","line":12,"column":3,"nodeType":"386","messageId":"387","endLine":12,"endColumn":8},{"ruleId":"384","severity":1,"message":"433","line":13,"column":3,"nodeType":"386","messageId":"387","endLine":13,"endColumn":11},{"ruleId":"384","severity":1,"message":"434","line":14,"column":3,"nodeType":"386","messageId":"387","endLine":14,"endColumn":11},{"ruleId":"384","severity":1,"message":"435","line":15,"column":3,"nodeType":"386","messageId":"387","endLine":15,"endColumn":7},{"ruleId":"384","severity":1,"message":"458","line":16,"column":3,"nodeType":"386","messageId":"387","endLine":16,"endColumn":14},{"ruleId":"384","severity":1,"message":"459","line":17,"column":3,"nodeType":"386","messageId":"387","endLine":17,"endColumn":11},{"ruleId":"384","severity":1,"message":"460","line":42,"column":9,"nodeType":"386","messageId":"387","endLine":42,"endColumn":21},{"ruleId":"384","severity":1,"message":"461","line":47,"column":9,"nodeType":"386","messageId":"387","endLine":47,"endColumn":19},{"ruleId":"384","severity":1,"message":"452","line":2,"column":8,"nodeType":"386","messageId":"387","endLine":2,"endColumn":14},{"ruleId":"384","severity":1,"message":"453","line":3,"column":8,"nodeType":"386","messageId":"387","endLine":3,"endColumn":14},{"ruleId":"384","severity":1,"message":"454","line":4,"column":8,"nodeType":"386","messageId":"387","endLine":4,"endColumn":24},{"ruleId":"384","severity":1,"message":"455","line":9,"column":3,"nodeType":"386","messageId":"387","endLine":9,"endColumn":7},{"ruleId":"384","severity":1,"message":"456","line":10,"column":3,"nodeType":"386","messageId":"387","endLine":10,"endColumn":7},{"ruleId":"384","severity":1,"message":"457","line":12,"column":3,"nodeType":"386","messageId":"387","endLine":12,"endColumn":8},{"ruleId":"384","severity":1,"message":"433","line":13,"column":3,"nodeType":"386","messageId":"387","endLine":13,"endColumn":11},{"ruleId":"384","severity":1,"message":"434","line":14,"column":3,"nodeType":"386","messageId":"387","endLine":14,"endColumn":11},{"ruleId":"384","severity":1,"message":"435","line":15,"column":3,"nodeType":"386","messageId":"387","endLine":15,"endColumn":7},{"ruleId":"384","severity":1,"message":"458","line":16,"column":3,"nodeType":"386","messageId":"387","endLine":16,"endColumn":14},{"ruleId":"384","severity":1,"message":"459","line":17,"column":3,"nodeType":"386","messageId":"387","endLine":17,"endColumn":11},{"ruleId":"384","severity":1,"message":"460","line":42,"column":9,"nodeType":"386","messageId":"387","endLine":42,"endColumn":21},{"ruleId":"384","severity":1,"message":"461","line":47,"column":9,"nodeType":"386","messageId":"387","endLine":47,"endColumn":19},"no-native-reassign",["462"],"no-negated-in-lhs",["463"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-unused-vars","'Row' is defined but never used.","Identifier","unusedVar","'Col' is defined but never used.","'optionsRole' is defined but never used.","'price' is assigned a value but never used.","'serviceList' is assigned a value but never used.","'unit' is assigned a value but never used.","'role' is assigned a value but never used.","'industry' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\+.","Literal","unnecessaryEscape",["464","465"],["466","467"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'profile_pic' is assigned a value but never used.","'selectedDate' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'optionsUnit' is defined but never used.",["468","469"],"'CFade' is defined but never used.","'useState' is defined but never used.","'TheSidebar' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","'Planner' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'props'. Either include them or remove the dependency array.","ArrayExpression",["470"],"'useLocation' is defined but never used.","React Hook useEffect has a missing dependency: 'callApiToFetchAllExperts'. Either include it or remove the dependency array.",["471"],"React Hook useEffect has a missing dependency: 'callApiToFetchAllResources'. Either include it or remove the dependency array.",["472"],"React Hook useEffect has a missing dependency: 'callApiToFetchAllUsers'. Either include it or remove the dependency array.",["473"],"'CNavItem' is defined but never used.","'CNavLink' is defined but never used.","'CNav' is defined but never used.","'appointments' is assigned a value but never used.",["474"],"'isProduction' is defined but never used.","Assign object to a variable before exporting as module default","'Redirect' is defined but never used.","'CCardHeader' is defined but never used.","'expert' is assigned a value but never used.","'setExpert' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'offset', and 'props'. Either include them or remove the dependency array.",["475"],["476"],"'user' is assigned a value but never used.",["477"],"'setUser' is assigned a value but never used.",["478"],["479"],"'Loader' is defined but never used.","'Search' is defined but never used.","'PaginationCommon' is defined but never used.","'CCol' is defined but never used.","'CRow' is defined but never used.","'CTabs' is defined but never used.","'CTabContent' is defined but never used.","'CTabPane' is defined but never used.","'handleSearch' is assigned a value but never used.","'pageChange' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"messageId":"480","fix":"481","desc":"482"},{"messageId":"483","fix":"484","desc":"485"},{"messageId":"480","fix":"486","desc":"482"},{"messageId":"483","fix":"487","desc":"485"},{"messageId":"480","fix":"488","desc":"482"},{"messageId":"483","fix":"489","desc":"485"},{"desc":"490","fix":"491"},{"desc":"492","fix":"493"},{"desc":"494","fix":"495"},{"desc":"496","fix":"497"},{"desc":"490","fix":"498"},{"desc":"499","fix":"500"},{"desc":"490","fix":"501"},{"desc":"490","fix":"502"},{"desc":"499","fix":"503"},{"desc":"499","fix":"504"},"removeEscape",{"range":"505","text":"506"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"507","text":"508"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"509","text":"506"},{"range":"510","text":"508"},{"range":"511","text":"506"},{"range":"512","text":"508"},"Update the dependencies array to be: [dispatch, props]",{"range":"513","text":"514"},"Update the dependencies array to be: [callApiToFetchAllExperts, search]",{"range":"515","text":"516"},"Update the dependencies array to be: [callApiToFetchAllResources, search]",{"range":"517","text":"518"},"Update the dependencies array to be: [callApiToFetchAllUsers, search]",{"range":"519","text":"520"},{"range":"521","text":"514"},"Update the dependencies array to be: [dispatch, offset, props, search]",{"range":"522","text":"523"},{"range":"524","text":"514"},{"range":"525","text":"514"},{"range":"526","text":"523"},{"range":"527","text":"523"},[12660,12661],"",[12660,12660],"\\",[12703,12704],[12703,12703],[8143,8144],[8143,8143],[842,844],"[dispatch, props]",[4463,4471],"[callApiToFetchAllExperts, search]",[3966,3974],"[callApiToFetchAllResources, search]",[2863,2871],"[callApiToFetchAllUsers, search]",[1190,1192],[2307,2315],"[dispatch, offset, props, search]",[1091,1093],[1196,1198],[1563,1571],[1551,1559]]